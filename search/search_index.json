{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"additional-resources/team/","text":"Team Ops Team Member Twitter Github @banteg @bantg @banteg @milkyklim @milkyklim @milkyklim @tracheopteryx @tracheopteryx @tracheopteryx Protocol and Development Team Member Twitter Github @andre.cronje @AndreCronjeTech @andrecronje @doug @doug_storming @dougstorm @fubuloubu @fubuloubu @fubuloubu @lbertenasco @lbertenasco @lbertenasco @x48 @x48_crypto @x48-crypto Academic \"Public Good\" Team Member Twitter Github @orbxball N/A @orbxball Communications Team Member Twitter Github @franklin @DeFiGod1 N/A @fameal @fameal @fameal @Dark N/A N/A Community Grants In addition to the team members above, Yearn Finance also rewards community contributions. See Announcements for grants awarded to team members.","title":"Team"},{"location":"additional-resources/team/#team","text":"","title":"Team"},{"location":"additional-resources/team/#ops","text":"Team Member Twitter Github @banteg @bantg @banteg @milkyklim @milkyklim @milkyklim @tracheopteryx @tracheopteryx @tracheopteryx","title":"Ops"},{"location":"additional-resources/team/#protocol-and-development","text":"Team Member Twitter Github @andre.cronje @AndreCronjeTech @andrecronje @doug @doug_storming @dougstorm @fubuloubu @fubuloubu @fubuloubu @lbertenasco @lbertenasco @lbertenasco @x48 @x48_crypto @x48-crypto","title":"Protocol and Development"},{"location":"additional-resources/team/#academic-public-good","text":"Team Member Twitter Github @orbxball N/A @orbxball","title":"Academic \"Public Good\""},{"location":"additional-resources/team/#communications","text":"Team Member Twitter Github @franklin @DeFiGod1 N/A @fameal @fameal @fameal @Dark N/A N/A","title":"Communications"},{"location":"additional-resources/team/#community-grants","text":"In addition to the team members above, Yearn Finance also rewards community contributions. See Announcements for grants awarded to team members.","title":"Community Grants"},{"location":"contributors/","text":"Contribute Yearn Contributors Help build the future of finance, shape your skills, and grow the Yearn ecosystem. Before joining our community, take some time to understand the philosophy behind Yearn through the Yearn Manifesto . How to Contribute Have an idea? We are always open to new suggestions or better ways of doing things. If you have an idea feel free to use the appropriate channel on Discord , Reddit , or make a post on the governance forum . If the idea is thorough enough, make a post in the Proposals section on the governance forum and be sure to follow the Proposal Guidelines . Check previous YIPs for guidance. File a Bug If a Yearn product isn't working, please visit the appropriate Github repository listed under General Resources \u2014 or search in the Yearn Github Repo \u2014 to see if the issue already exists. If it does not exist, please create a new issue following the template present in the repository. If no issue template is present, please include information such as your browser version, device, etc. for that project so the developers can replicate it and fix it. If the issue already exists, you can signal your support by adding a thumbs up to the existing issue or by adding helpful information. Leave Feedback Use the Feedback section of the governance forum to provide feedback. Write Documentation The Yearn ecosystem is expanding and, as a result, so is the need for documentation. You can find the \"official\" Yearn Documentation here \u2014 which provides high-level overviews and technical documentation. Whether its writing How To guides on using vaults or creating diagrams on how the protocol ties together, there is something for everyone. If you speak another language, translations might be up your alley! You can see our progress on the Github Project Board where you can look through any issue that interests you. Before contributing: Please see our How to Use Github guide and ensure that your PRs adhere to our Writing Style Guide . We use a combination of HackMD, Gitbook, and Github for our Documentation and we use DrawIO with Google Drive for our diagrams & schemas. If you are a grammar stickler, you can see our Reviewer Guide . Last, but not least, join the #documentation channel in Discord and introduce yourself. If this sounds confusing, please let us know what we can clear up. In the meantime: You can begin contributing to our HackMD docs immediately via the Github issues \u2014 we'll guide you through the rest. Build Developers Protocol Contributors: Developer Team List If you're a developer we need your help! Before you begin: Familiarize yourself with Yearn, its products, and its infrastructure by reading our Documentation . You can see our progress on our Github Project Board and you can immediately begin contributing where you see fit. We recommend checking out issues tagged as help wanted and recommend sticking to the respective repository's coding guidelines (linting, formatting, PRs, etc). It's that simple \ud83d\ude42. You can also join us on the #dev channel in Discord . If you are interested in working on a specific project, check out the list of Yearn products in the General Resources section below or check out our list of repos here . If you want an overview on how our services interact with one another in Vaults, please see the schema and accompanying descriptions in the Vaults Overview . If you're wondering how strategies work, please check out ETHOnline \ud83d\udee0\ufe0f Yearn Strats 101 \u2014 hosted by our Yearn Devs. To start writing a Strategy of your own, please visit the Yearn Starter Pack Repo . If you are looking to integrate with Yearn, please visit our Integration Guide and check out our Interface Documentation . Designers We invite designers, animators, artists, and more to share your skills with the Yearn ecosystem! If you're interested in creating graphics that describe Yearn's systems, creating video explainers, fixing Yearn's UI/UX, or any other combination of things \u2014 hop into the #ui-ux channel or #media-resources channels in Discord . Yearn Contributors See our wonderful list of contributors along with individual contribution stats at yContributors.finance . Get your name added to the list by contributing to documentation, code, designs, or whatever else you're interested in! General Resources Yearn Products Yearn.Finance , Github Yearn Governance , Github Yearn Insurance , Github Yearn Borrow , Github Yearn Swap , Github Yearn Documentation , Github Yearn Forum List of Yearn Tools Yearn Discord FAQ Bot, Github Yearn Party , Github Yearn Tools (Based off Yearn API) , Github Contributors Websites yCosystem (Yearn Community Aggregator) - Repository Of Yearn Links Vaults Finance - One click deposit into vaults LearnYearn Additional explainers and content Yearn Stats - Vault Statistics YFI Address Stats - TVL and vault pricing information built by @Bob_The_Buidler Yieldfarming , Github Feel-the-yearn - Table of current active strategies yVault ROI Calculator Yearn Snapshot Yearn Newsletter - Weekly YFI newsletter run by @yfi_nomad","title":"Contribute"},{"location":"contributors/#contribute","text":"","title":"Contribute"},{"location":"contributors/#yearn-contributors","text":"Help build the future of finance, shape your skills, and grow the Yearn ecosystem. Before joining our community, take some time to understand the philosophy behind Yearn through the Yearn Manifesto .","title":"Yearn Contributors"},{"location":"contributors/#how-to-contribute","text":"","title":"How to Contribute"},{"location":"contributors/#have-an-idea","text":"We are always open to new suggestions or better ways of doing things. If you have an idea feel free to use the appropriate channel on Discord , Reddit , or make a post on the governance forum . If the idea is thorough enough, make a post in the Proposals section on the governance forum and be sure to follow the Proposal Guidelines . Check previous YIPs for guidance.","title":"Have an idea?"},{"location":"contributors/#file-a-bug","text":"If a Yearn product isn't working, please visit the appropriate Github repository listed under General Resources \u2014 or search in the Yearn Github Repo \u2014 to see if the issue already exists. If it does not exist, please create a new issue following the template present in the repository. If no issue template is present, please include information such as your browser version, device, etc. for that project so the developers can replicate it and fix it. If the issue already exists, you can signal your support by adding a thumbs up to the existing issue or by adding helpful information.","title":"File a Bug"},{"location":"contributors/#leave-feedback","text":"Use the Feedback section of the governance forum to provide feedback.","title":"Leave Feedback"},{"location":"contributors/#write-documentation","text":"The Yearn ecosystem is expanding and, as a result, so is the need for documentation. You can find the \"official\" Yearn Documentation here \u2014 which provides high-level overviews and technical documentation. Whether its writing How To guides on using vaults or creating diagrams on how the protocol ties together, there is something for everyone. If you speak another language, translations might be up your alley! You can see our progress on the Github Project Board where you can look through any issue that interests you. Before contributing: Please see our How to Use Github guide and ensure that your PRs adhere to our Writing Style Guide . We use a combination of HackMD, Gitbook, and Github for our Documentation and we use DrawIO with Google Drive for our diagrams & schemas. If you are a grammar stickler, you can see our Reviewer Guide . Last, but not least, join the #documentation channel in Discord and introduce yourself. If this sounds confusing, please let us know what we can clear up. In the meantime: You can begin contributing to our HackMD docs immediately via the Github issues \u2014 we'll guide you through the rest.","title":"Write Documentation"},{"location":"contributors/#build","text":"","title":"Build"},{"location":"contributors/#developers","text":"","title":"Developers"},{"location":"contributors/#protocol-contributors","text":"Developer Team List If you're a developer we need your help! Before you begin: Familiarize yourself with Yearn, its products, and its infrastructure by reading our Documentation . You can see our progress on our Github Project Board and you can immediately begin contributing where you see fit. We recommend checking out issues tagged as help wanted and recommend sticking to the respective repository's coding guidelines (linting, formatting, PRs, etc). It's that simple \ud83d\ude42. You can also join us on the #dev channel in Discord . If you are interested in working on a specific project, check out the list of Yearn products in the General Resources section below or check out our list of repos here . If you want an overview on how our services interact with one another in Vaults, please see the schema and accompanying descriptions in the Vaults Overview . If you're wondering how strategies work, please check out ETHOnline \ud83d\udee0\ufe0f Yearn Strats 101 \u2014 hosted by our Yearn Devs. To start writing a Strategy of your own, please visit the Yearn Starter Pack Repo . If you are looking to integrate with Yearn, please visit our Integration Guide and check out our Interface Documentation .","title":"Protocol Contributors:"},{"location":"contributors/#designers","text":"We invite designers, animators, artists, and more to share your skills with the Yearn ecosystem! If you're interested in creating graphics that describe Yearn's systems, creating video explainers, fixing Yearn's UI/UX, or any other combination of things \u2014 hop into the #ui-ux channel or #media-resources channels in Discord .","title":"Designers"},{"location":"contributors/#yearn-contributors_1","text":"See our wonderful list of contributors along with individual contribution stats at yContributors.finance . Get your name added to the list by contributing to documentation, code, designs, or whatever else you're interested in!","title":"Yearn Contributors"},{"location":"contributors/#general-resources","text":"","title":"General Resources"},{"location":"contributors/#yearn-products","text":"Yearn.Finance , Github Yearn Governance , Github Yearn Insurance , Github Yearn Borrow , Github Yearn Swap , Github Yearn Documentation , Github Yearn Forum","title":"Yearn Products"},{"location":"contributors/#list-of-yearn-tools","text":"Yearn Discord FAQ Bot, Github Yearn Party , Github Yearn Tools (Based off Yearn API) , Github","title":"List of Yearn Tools"},{"location":"contributors/#contributors-websites","text":"yCosystem (Yearn Community Aggregator) - Repository Of Yearn Links Vaults Finance - One click deposit into vaults LearnYearn Additional explainers and content Yearn Stats - Vault Statistics YFI Address Stats - TVL and vault pricing information built by @Bob_The_Buidler Yieldfarming , Github Feel-the-yearn - Table of current active strategies yVault ROI Calculator Yearn Snapshot Yearn Newsletter - Weekly YFI newsletter run by @yfi_nomad","title":"Contributors Websites"},{"location":"contributors/contributor-tools/","text":"Contributor Tools This Guide introduces the tools used by the Yearn Community team and its contributors. Yearn contributors work with tools geared towards promoting open-source feedback, communication, transparency, and clarity. While there is no sophisticated software stack, contributors should be comfortable with the more heavily used tools and how they function within Yearn contribution workflows. Discussion Platforms Discord Various Yearn teams (documentation, development etc) host AMAs, ideation, discussions, and follows-ups on Yearn's Discord Channel, an open-source platform geared towards improving team communication. The Yearn Discord lists all channels and users. Start participating in public discussions by joining the recommended channels below. #general #governance #support #dev #documentation Pro Tips: Visit #documentation regularly. It's an excellent channel for collaboration. Coordinate with other members. Share early and share often. Ask for feedback. Provide progress updates. Meetings Yearn contributors host meetings when necessary on Google Hangouts. These are not centrally organized and arise organically within discussions between contributors or teams, as such, invitations are up to the individuals organizing these discussions. Invitations are sent to contributors by Discord or Telegram and Google Calendar automatically schedules the event and sends reminders. Jitsi Meet Google Meet Writing Platforms HackMD Many Yearn Doc contributors prepare their long-form documentation in HackMD , a collaborative Markdown editor. HackMD also tracks versions, enables commenting, and allows multiple users to work on a document simultaneously. Note: Run all drafts through Grammarly regularly, and before final submissions. Grammarly will catch most spelling and grammatical errors. Review the suggestions to make sure they make sense. Do not blindly accept Grammarly edits. HackMD does not identify spelling and grammatical errors. Copy text from the rendered preview into Grammarly and address any errors it flags. Grammarly will miss errors if it\u2019s given raw Markdown text. Pro Tip: Install the HackMD Google Chrome extension to make searching easier. Gitbook Yearn Documentation contributors use Gitbook as a graphical user interface (GUI) to edit content and update personal Github repositories. It is an in-browser editor and as a result improves efficiency compared to using special programs which may be more difficult for non-technical users to navigate. Google Docs Google Docs is a collaborative writing platform, with features like suggestion editing and version naming. Docs simplify feedback and review and are easy to share between team members and contributors. Suggestions: Start new projects and create first drafts in Google Docs. Use \"Suggesting Mode\" and leave \"Notes\" when reviewing a document. Suggestions draw attention to proposed changes. Notes leave room for side discussions. Avoid including direct links in a Google Doc. Use the Markdown format to simplify conversion later on. Incorrect: https://bad.link.com Correct: [link](https://link.com) Versions can be named, renamed, downloaded, or revisited at any time. Versions help other contributors quickly find and see any changes. Example: Naming a Version Make sure to name versions before passing projects off for review. Use descriptive names for versions. Names should contain information specific to the contents of the file or version. Include a version number in the name, along with any other relevant details. Numbers after the decimal define draft iterations. Example: V0.1, V0.2, V1.2, etc. Markdown Yearn documents hosted on GitHub are written in Markdown, a plaintext formatting syntax. Markdown allows for easy conversion to HTML and various other outputs, making documents easy to read on the web. Learn the basics of Markdown: Daring Fireball Markdown Syntax Guide Practice Communicating Using Markdown VSCode If you are using Google Docs to write, consider using Visual Studio Code and install the extensions below to facilitate formatting: Markdown Preview Enhanced Markdown Linter Code Spell Checker GitLens Prettier Prettier will auto-correct most Markdown mistakes. The vscode-markdownlint GitHub repo describes how to edit the error settings JSON file. Use it to address any Markdown errors that follow the Writing Style Guide. How to integrate GitHub with VSCode: Video: Up and Running with Visual Studio Code and GitHub Tools and Tips Writing Specific Best Practices Include line breaks above and below headings. Use top-level headers # only once per document. Do not make multiple top-level headings. Avoid repeat headings. They will break auto-generated navigation. Avoid trailing spaces. Do not use: Em or en dashes : \u2014 . Ampersands & in titles and headers. Pipes | in titles and headers. Curly quotes. Use the plaintext version. Correct: \" Incorrect: \u201c Escaping parentheses. Use normal parentheses. Correct: (SOMETHING) Incorrect: \\(SOMETHING\\) Add tasks using check-boxes as projects grow. A dash and brackets ( - [] ) on a new line show up as a check-box in GitHub's UI. Example: Ensure there is a single hard return at the end of a .md file. Use in-text comments for extra visibility when collaborating with other contributors on HackMD documents. Click on the comment icon in the toolbar and choose an appropriate style. Consider including a timestamp or username: Markdown: > Look Here! [name=John Doe] Rendered: Look Here! \\[name=John Doe\\] Make sure to delete comments before submitting Pull Requests. Use an emoji to call attention to an important point, when necessary. Practice discretion and use them sparingly. Do not load documents with emojis. This cheat sheet lists emojis and their Markdown shortcuts. Naming Files and Versions Markdown file names should be lowercase. Use dashes - , not spaces, to separate words within Markdown file names. Correct: meeting-transcript-ep-01.md Incorrect: Meeting Transcript Episode 01.md Use descriptive names for Markdown files and versions. Filenames should contain information specific to the contents of the file. Context is provided from the directory or through the presentation layer (e.g., GitBooks). Correct: meeting-summary-ep-01.md Incorrect: scientific-governance-and-risk-meeting-summary-ep-01.md Pro Tip: For a document's final draft, name it \"Final draft, moving to GitHub.\" Post a link to the HackMD file or a relevant page on GitHub. Miscellaneous Important Links GitHub Desktop Broken Link Checker Code Blocks : for formatting blocks of code in a doc or adding Markdown. Markdown Conversion : for Google Drive. A long stack-exchange thread on this use case. DrawIO : Open source software using Google Drive for createing flowcharts and schemas. Figma : Creates visual mockups, especially for team collaboration. Wallets and 3 rd Party Services Metamask : Wallet for sending and receiving YFI Zerion : For checking Yearn Treasury statistics. Keyboard Shortcuts Mac Shortcuts Windows Shortcuts Use The Keyboard : Open-source collection of keyboard shortcuts for Mac apps, Windows programs, and websites. Acknowledgments This document could not be possible without the amazing work done by the MakerDAO team as this document is mostly based on their Contributor Tools Guide .","title":"Contributor Tools"},{"location":"contributors/contributor-tools/#contributor-tools","text":"This Guide introduces the tools used by the Yearn Community team and its contributors. Yearn contributors work with tools geared towards promoting open-source feedback, communication, transparency, and clarity. While there is no sophisticated software stack, contributors should be comfortable with the more heavily used tools and how they function within Yearn contribution workflows.","title":"Contributor Tools"},{"location":"contributors/contributor-tools/#discussion-platforms","text":"","title":"Discussion Platforms"},{"location":"contributors/contributor-tools/#discord","text":"Various Yearn teams (documentation, development etc) host AMAs, ideation, discussions, and follows-ups on Yearn's Discord Channel, an open-source platform geared towards improving team communication. The Yearn Discord lists all channels and users. Start participating in public discussions by joining the recommended channels below. #general #governance #support #dev #documentation Pro Tips: Visit #documentation regularly. It's an excellent channel for collaboration. Coordinate with other members. Share early and share often. Ask for feedback. Provide progress updates.","title":"Discord"},{"location":"contributors/contributor-tools/#meetings","text":"Yearn contributors host meetings when necessary on Google Hangouts. These are not centrally organized and arise organically within discussions between contributors or teams, as such, invitations are up to the individuals organizing these discussions. Invitations are sent to contributors by Discord or Telegram and Google Calendar automatically schedules the event and sends reminders. Jitsi Meet Google Meet","title":"Meetings"},{"location":"contributors/contributor-tools/#writing-platforms","text":"","title":"Writing Platforms"},{"location":"contributors/contributor-tools/#hackmd","text":"Many Yearn Doc contributors prepare their long-form documentation in HackMD , a collaborative Markdown editor. HackMD also tracks versions, enables commenting, and allows multiple users to work on a document simultaneously. Note: Run all drafts through Grammarly regularly, and before final submissions. Grammarly will catch most spelling and grammatical errors. Review the suggestions to make sure they make sense. Do not blindly accept Grammarly edits. HackMD does not identify spelling and grammatical errors. Copy text from the rendered preview into Grammarly and address any errors it flags. Grammarly will miss errors if it\u2019s given raw Markdown text. Pro Tip: Install the HackMD Google Chrome extension to make searching easier.","title":"HackMD"},{"location":"contributors/contributor-tools/#gitbook","text":"Yearn Documentation contributors use Gitbook as a graphical user interface (GUI) to edit content and update personal Github repositories. It is an in-browser editor and as a result improves efficiency compared to using special programs which may be more difficult for non-technical users to navigate.","title":"Gitbook"},{"location":"contributors/contributor-tools/#google-docs","text":"Google Docs is a collaborative writing platform, with features like suggestion editing and version naming. Docs simplify feedback and review and are easy to share between team members and contributors. Suggestions: Start new projects and create first drafts in Google Docs. Use \"Suggesting Mode\" and leave \"Notes\" when reviewing a document. Suggestions draw attention to proposed changes. Notes leave room for side discussions. Avoid including direct links in a Google Doc. Use the Markdown format to simplify conversion later on. Incorrect: https://bad.link.com Correct: [link](https://link.com) Versions can be named, renamed, downloaded, or revisited at any time. Versions help other contributors quickly find and see any changes. Example: Naming a Version Make sure to name versions before passing projects off for review. Use descriptive names for versions. Names should contain information specific to the contents of the file or version. Include a version number in the name, along with any other relevant details. Numbers after the decimal define draft iterations. Example: V0.1, V0.2, V1.2, etc.","title":"Google Docs"},{"location":"contributors/contributor-tools/#markdown","text":"Yearn documents hosted on GitHub are written in Markdown, a plaintext formatting syntax. Markdown allows for easy conversion to HTML and various other outputs, making documents easy to read on the web. Learn the basics of Markdown: Daring Fireball Markdown Syntax Guide Practice Communicating Using Markdown","title":"Markdown"},{"location":"contributors/contributor-tools/#vscode","text":"If you are using Google Docs to write, consider using Visual Studio Code and install the extensions below to facilitate formatting: Markdown Preview Enhanced Markdown Linter Code Spell Checker GitLens Prettier Prettier will auto-correct most Markdown mistakes. The vscode-markdownlint GitHub repo describes how to edit the error settings JSON file. Use it to address any Markdown errors that follow the Writing Style Guide. How to integrate GitHub with VSCode: Video: Up and Running with Visual Studio Code and GitHub","title":"VSCode"},{"location":"contributors/contributor-tools/#tools-and-tips","text":"","title":"Tools and Tips"},{"location":"contributors/contributor-tools/#writing-specific","text":"","title":"Writing Specific"},{"location":"contributors/contributor-tools/#best-practices","text":"Include line breaks above and below headings. Use top-level headers # only once per document. Do not make multiple top-level headings. Avoid repeat headings. They will break auto-generated navigation. Avoid trailing spaces. Do not use: Em or en dashes : \u2014 . Ampersands & in titles and headers. Pipes | in titles and headers. Curly quotes. Use the plaintext version. Correct: \" Incorrect: \u201c Escaping parentheses. Use normal parentheses. Correct: (SOMETHING) Incorrect: \\(SOMETHING\\) Add tasks using check-boxes as projects grow. A dash and brackets ( - [] ) on a new line show up as a check-box in GitHub's UI. Example: Ensure there is a single hard return at the end of a .md file. Use in-text comments for extra visibility when collaborating with other contributors on HackMD documents. Click on the comment icon in the toolbar and choose an appropriate style. Consider including a timestamp or username: Markdown: > Look Here! [name=John Doe] Rendered: Look Here! \\[name=John Doe\\] Make sure to delete comments before submitting Pull Requests. Use an emoji to call attention to an important point, when necessary. Practice discretion and use them sparingly. Do not load documents with emojis. This cheat sheet lists emojis and their Markdown shortcuts.","title":"Best Practices"},{"location":"contributors/contributor-tools/#naming-files-and-versions","text":"Markdown file names should be lowercase. Use dashes - , not spaces, to separate words within Markdown file names. Correct: meeting-transcript-ep-01.md Incorrect: Meeting Transcript Episode 01.md Use descriptive names for Markdown files and versions. Filenames should contain information specific to the contents of the file. Context is provided from the directory or through the presentation layer (e.g., GitBooks). Correct: meeting-summary-ep-01.md Incorrect: scientific-governance-and-risk-meeting-summary-ep-01.md Pro Tip: For a document's final draft, name it \"Final draft, moving to GitHub.\" Post a link to the HackMD file or a relevant page on GitHub.","title":"Naming Files and Versions"},{"location":"contributors/contributor-tools/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"contributors/contributor-tools/#important-links","text":"GitHub Desktop Broken Link Checker Code Blocks : for formatting blocks of code in a doc or adding Markdown. Markdown Conversion : for Google Drive. A long stack-exchange thread on this use case. DrawIO : Open source software using Google Drive for createing flowcharts and schemas. Figma : Creates visual mockups, especially for team collaboration.","title":"Important Links"},{"location":"contributors/contributor-tools/#wallets-and-3rd-party-services","text":"Metamask : Wallet for sending and receiving YFI Zerion : For checking Yearn Treasury statistics.","title":"Wallets and 3rd Party Services"},{"location":"contributors/contributor-tools/#keyboard-shortcuts","text":"Mac Shortcuts Windows Shortcuts Use The Keyboard : Open-source collection of keyboard shortcuts for Mac apps, Windows programs, and websites.","title":"Keyboard Shortcuts"},{"location":"contributors/contributor-tools/#acknowledgments","text":"This document could not be possible without the amazing work done by the MakerDAO team as this document is mostly based on their Contributor Tools Guide .","title":"Acknowledgments"},{"location":"contributors/writing-style-guide/","text":"Writing Style Guide The Yearn Community Writing Style Guide summarizes the standards and best practices writers should follow when contributing to Yearn Documentation resources. Writing Intent and Tone Yearn Community materials should cater to readers who are unfamiliar with the Yearn ecosystem. Writers should also assume that their readers have tight schedules and short attention spans, as after all, farming is honest but hard work. As such, Writers should focus on communicating concepts as clearly and succinctly as possible. Use simple language. Use short, concise sentences. Avoid unnecessary words. Remain open and objective. Provide examples when possible. Provide examples to help explain concepts, but avoid overcomplicating them. Use math when necessary, but keep it simple and visually easy to understand. Link to basic terms if necessary. Writer Guidelines General Rules Run all drafts through Grammarly regularly, and before final submissions. Grammarly will catch most spelling and grammatical errors. Copy rendered text into Grammarly and address any mistakes it flags. HackMD does not identify spelling and grammatical errors. Grammarly will miss errors if it\u2019s given raw Markdown text. Be careful of copy and pasting code from Grammarly to VScode, Grammarly may mess with formatting. Please Note When migrating to a new document (i.e., from Google Docs to HackMD): Leave a note in the old file. Provide a link to the latest version. Do not blindly accept Grammarly suggestions. Review edits to make sure they make sense. Use: Oxford commas . Pluralized, gender-neutral pronouns . Use \u201cthey/their\u201d instead of \u201che/she/his/hers.\u201d Examples: \u201cWhen they\u2026\u201d or \u201cIf users choose to X, then their\u2026\u201d The % symbol. Do not spell out \"percent.\" Correct: 15% Incorrect: 15 percent Double quotes \" \" for phrases, quotes, etc. Do not use single ' ' quotes. Avoid: First-person language. Examples: I, we, our, etc. Second-person language (unless it is appropriate for a guide or action page). Examples: \"You then\u2026\" or \"Now you should\u2026\" Exclamation points. Footnotes. References to deprecated names for Yearn Components. Examples: yyCRV or yUSD instead of yvCurve-Y (see: Yearn Naming Conventions ). Parentheses for stating additional information. Incorrect: Development Grants are larger sized ($5,000 to $50,000) grants aimed at individuals or teams building projects around vaults and the broader Yearn ecosystem. Correct: Development Grants are generally larger sized grants, ranging from $5,000 to $50,000, aimed at individuals or teams building projects around vaults and the broader Yearn ecosystem. Abbreviations Use parentheses to define abbreviated terms the first time they appear in a given document. Example: A Yearn Improvement Proposal (YIP) is a proposal framework to support new initiatives and to expand the scope of existing ones. Acronyms, Decades and Cases Do not use apostrophes to pluralize acronyms or indicate decades. Add an \"s\" at the end. Acronyms To make an acronym plural: Correct: YIPs Incorrect: YIP's Decades To indicate a decade: Correct: 1990s Incorrect: 1990's Capitalize Names and proper nouns. Cities, countries, nationalities, and languages. Terms with definitions provided by Yearn. Title Case The Title Case Converter will keep titles consistent. Follow the New York Times standard. Capitalize the first and last words, all nouns, pronouns, verbs, adverbs, and adjectives. Lowercase all articles, conjunctions, and prepositions. Currencies The examples below use dollars, but the same rules apply to all global currencies. Use lowercase except when writing \"US Dollar.\u201d Use figures and the \"$\" sign in all except casual references, or amounts without a figure. Standard: \"The book costs $4.\" Casual: \"Please give me a dollar.\" For amounts under $1 million, follow this format: Correct: $4, $25, $500, $1,000, $650,000. For amounts over $1 million, use the word, not numerals. Correct: \"He is worth $4 million.\" Incorrect: \"He is worth $4,000,000.\" Naming Conventions Cryptocurrencies When directly referring to the creation, destruction, or manipulation of a token (particularly as it relates to tooling) or when referencing the token as a currency, in an instructional or conversational setting, or as a conceptual product of the Foundation or its systems: Use the proper prefix if necessary and capitalized TLA version: wETH Example: \u201cwETH is a token that represents Ether 1:1 and conforms to the ERC20 token standard.\u201d Similarly, when referring to exchange pairs: Use: wETH/DAI Yearn Products Please see Yearn Naming Conventions . Yearn When referring to Yearn as a smart contract system, use \"The Yearn Protocol.\" Example: \u201cThe Yearn Protocol is a set of contracts for yield optimization.\" When referring to Yearn as a body of YFI voters and the general stakeholder community, use \"Yearn Community\" or simply \"Yearn.\" Example: \"Yearn passed a vote to decrease the yCRV vault performance fee.\" Example: \"The Yearn Community passed a vote to add an additional vault.\" Use \"Yearn\" for casual references to Yearn and the Yearn Protocol as a whole. Numbers Spell out numbers below 10. Examples: one, two, three, etc. Use numerals for numbers above 10, unless starting a sentence. For numbers with million, billion, or trillion, use figures in all except casual cases. Standard: \"The nation has 1 million citizens.\" Casual: \"I'd like to make a billion dollars.\" Lists When bulleted and numbered lists contain complete sentences, capitalize the first word, and follow each with a period. If list items are phrases, no capitalization or punctuation is required. Don't use a list with only 1 item. Use parallel construction for each item in a list. Start with the same part of speech for each item (in this case, a verb). Use the same verb tense for each item. Use the same voice for each item. Use the same sentence type (statement, question, exclamation) for each item. List items that include definitions should look like this: Team: Yearn Protocol Developers and Contributors Community : General participants in Yearn forums and chat Use dashes rather than asterisks for unordered lists. Correct: - Incorrect: * Alphabetize lists of names unless there is a clear priority at work. Do not use ordered (numbered) lists unless order matters. Ordered list items should use the 1. repeated. Markdown will automatically generate numbers. Example: 1. Item 1 1. Item 2 1. Item 3 1. Item 3a 1. Item 3b Links Use absolute links and standard web URLs when referencing external resources. Create descriptive hyperlinks and avoid generic language. Correct - Descriptive: (Learn more at Yearn Documentation Incorrect - Generic: Learn more here . Include a . outside the link for sentences that end with a link. When creating links for parallel translated documents, make sure to update relative links to reflect the correct heading. Tables of Contents Include a table of contents for documents that span several pages and multiple sections. Use the raw Markdown from the Table of Contents above as a template. Be sure to include the line breaks --- as well to keep formatting consistent. The table of contents should list relevant sections for easy navigation. Markdown Guide Yearn documents posted on GitHub are written in Markdown, a text-to-HTML conversion tool for web writers. Include line breaks above and below headings. Use top-level headers ( # ) only once per document. Do not make multiple top-level headings. Avoid repeat headings. They will break auto-generated navigation. Avoid trailing spaces. Do not use: Em or en dashes: \u2014 Ampersands & in titles and headers. Pipes | in titles and headers. Curly quotes. Use the plaintext version. Correct: \" Incorrect: \u201c Escaping parentheses. Use normal parentheses. Correct: (SOMETHING) Incorrect: \\(SOMETHING\\) Ensure there is a single hard return at the end of a .md file. Use emojis to call attention to an important point, when necessary. Practice discretion and use them sparingly. This cheat sheet lists emojis and their Markdown shortcuts. Best Practices and Resources Writers and contributors familiar with Yearn and cryptocurrency basics will have a better sense of where to apply their skills best. Spend some time learning about Yearn's function, history, and any recent events before contributing. In-depth knowledge is appreciated but not required. Learn the Basics of Markdown Daring Fireball Markdown Syntax Guide Practice Communicating Using Markdown Helpful Writing Tools Make use of any writing tools that help improve workflow and writing quality. See the list below for some recommendations. Text Editors Grammarly - Mistake-free writing editor HemingwayApp - Make writing bold and clear Word Choice Thesaurus - Synonyms Powerthesaurus - Synonyms and phrase suggestions WordHippo - Synonyms and phrase suggestions Review Community Guides Review the respective Contribute.md for each repository where pertinent before starting work on any Yearn project. Yearn contributor guides outline writing standards and help simplify the writing process. Document-Specific Maintenance Guides Check for an associated maintenance guide before starting work on a given document if applicable. A document maintenance guide outlines standards to help Reviewers and contributors when maintaining a given resource. The rules described within a document-specific maintenance guide supersede other guides. If a discrepancy is glaring or unreasonable, bring the issue to an admin in the #documentation channel on Yearn's discord. Contributor Tools The Contributor Tools Guide guide introduces the tools regularly used by Yearn contributors. Express Interest Check out the Getting Started guide for contributing to Documentation. Join the #documentation channel on Yearn's Discord, read the pinned messages, and reach out to a channel admin. Yearn community team members and senior contributors help onboard new contributors via Discord or Telegram chats where applicable. Feel free to discuss personal interests and relevant skills to help determine a well-suited project/issue and jump right in. To understand strengths you can also provide relevant examples of past projects, work, and experience. Demonstrate a reliable work ethic and offer quality work that speaks for itself. Stand out by suggesting projects and adding insight to public discussions. Collaborate When accepting an assignment, be sure to collaborate early and often. Visit #documentation or corresponding Telegram chat regularly. Coordinate with other members. Ask as many questions as necessary Ask for feedback when stuck. Provide frequent progress updates. Develop a plan that defines an approach for an assignment. Produce a project outline. Clarify the what so we can agree on the how. Set achievable deadlines. Timeboxing is good :) Assign and divide tasks with other contributors. Multiple contributors should not start work on similar projects individually. Please check that the same issue does not already exist in the Github Issues for that Repository, and if it does please coordinate with whoever is working on it to divide the work if needed. Track Progress Track projects and progress with GitHub Issues. Keep GitHub issues updated with comments and feedback. Take advantage of version history when working in HackMD or Google Docs. Final Drafts and Submissions Transfer approved final drafts from Google Docs to HackMD or DrawIO(for diagrams) if need be. Let the team know when a project is ready for final review by moving your issue to the status of Pending Review on Github and messaging in the appropriate Discord or Telegram channel. Once reviewed, submit completed projects for approval as a Pull Request on GitHub. Ensure to update any relevant issues and the project board on GitHub Acknowledgements This document could not be possible without the amazing work done by the MakerDAO team as this document is mostly based on their Writing Style Guide .","title":"Writing Style Guide"},{"location":"contributors/writing-style-guide/#writing-style-guide","text":"The Yearn Community Writing Style Guide summarizes the standards and best practices writers should follow when contributing to Yearn Documentation resources.","title":"Writing Style Guide"},{"location":"contributors/writing-style-guide/#writing-intent-and-tone","text":"Yearn Community materials should cater to readers who are unfamiliar with the Yearn ecosystem. Writers should also assume that their readers have tight schedules and short attention spans, as after all, farming is honest but hard work. As such, Writers should focus on communicating concepts as clearly and succinctly as possible. Use simple language. Use short, concise sentences. Avoid unnecessary words. Remain open and objective. Provide examples when possible. Provide examples to help explain concepts, but avoid overcomplicating them. Use math when necessary, but keep it simple and visually easy to understand. Link to basic terms if necessary.","title":"Writing Intent and Tone"},{"location":"contributors/writing-style-guide/#writer-guidelines","text":"","title":"Writer Guidelines"},{"location":"contributors/writing-style-guide/#general-rules","text":"Run all drafts through Grammarly regularly, and before final submissions. Grammarly will catch most spelling and grammatical errors. Copy rendered text into Grammarly and address any mistakes it flags. HackMD does not identify spelling and grammatical errors. Grammarly will miss errors if it\u2019s given raw Markdown text. Be careful of copy and pasting code from Grammarly to VScode, Grammarly may mess with formatting. Please Note When migrating to a new document (i.e., from Google Docs to HackMD): Leave a note in the old file. Provide a link to the latest version. Do not blindly accept Grammarly suggestions. Review edits to make sure they make sense. Use: Oxford commas . Pluralized, gender-neutral pronouns . Use \u201cthey/their\u201d instead of \u201che/she/his/hers.\u201d Examples: \u201cWhen they\u2026\u201d or \u201cIf users choose to X, then their\u2026\u201d The % symbol. Do not spell out \"percent.\" Correct: 15% Incorrect: 15 percent Double quotes \" \" for phrases, quotes, etc. Do not use single ' ' quotes. Avoid: First-person language. Examples: I, we, our, etc. Second-person language (unless it is appropriate for a guide or action page). Examples: \"You then\u2026\" or \"Now you should\u2026\" Exclamation points. Footnotes. References to deprecated names for Yearn Components. Examples: yyCRV or yUSD instead of yvCurve-Y (see: Yearn Naming Conventions ). Parentheses for stating additional information. Incorrect: Development Grants are larger sized ($5,000 to $50,000) grants aimed at individuals or teams building projects around vaults and the broader Yearn ecosystem. Correct: Development Grants are generally larger sized grants, ranging from $5,000 to $50,000, aimed at individuals or teams building projects around vaults and the broader Yearn ecosystem.","title":"General Rules"},{"location":"contributors/writing-style-guide/#abbreviations","text":"Use parentheses to define abbreviated terms the first time they appear in a given document. Example: A Yearn Improvement Proposal (YIP) is a proposal framework to support new initiatives and to expand the scope of existing ones.","title":"Abbreviations"},{"location":"contributors/writing-style-guide/#acronyms-decades-and-cases","text":"Do not use apostrophes to pluralize acronyms or indicate decades. Add an \"s\" at the end.","title":"Acronyms, Decades and Cases"},{"location":"contributors/writing-style-guide/#acronyms","text":"To make an acronym plural: Correct: YIPs Incorrect: YIP's","title":"Acronyms"},{"location":"contributors/writing-style-guide/#decades","text":"To indicate a decade: Correct: 1990s Incorrect: 1990's","title":"Decades"},{"location":"contributors/writing-style-guide/#capitalize","text":"Names and proper nouns. Cities, countries, nationalities, and languages. Terms with definitions provided by Yearn.","title":"Capitalize"},{"location":"contributors/writing-style-guide/#title-case","text":"The Title Case Converter will keep titles consistent. Follow the New York Times standard. Capitalize the first and last words, all nouns, pronouns, verbs, adverbs, and adjectives. Lowercase all articles, conjunctions, and prepositions.","title":"Title Case"},{"location":"contributors/writing-style-guide/#currencies","text":"The examples below use dollars, but the same rules apply to all global currencies. Use lowercase except when writing \"US Dollar.\u201d Use figures and the \"$\" sign in all except casual references, or amounts without a figure. Standard: \"The book costs $4.\" Casual: \"Please give me a dollar.\" For amounts under $1 million, follow this format: Correct: $4, $25, $500, $1,000, $650,000. For amounts over $1 million, use the word, not numerals. Correct: \"He is worth $4 million.\" Incorrect: \"He is worth $4,000,000.\"","title":"Currencies"},{"location":"contributors/writing-style-guide/#naming-conventions","text":"","title":"Naming Conventions"},{"location":"contributors/writing-style-guide/#cryptocurrencies","text":"When directly referring to the creation, destruction, or manipulation of a token (particularly as it relates to tooling) or when referencing the token as a currency, in an instructional or conversational setting, or as a conceptual product of the Foundation or its systems: Use the proper prefix if necessary and capitalized TLA version: wETH Example: \u201cwETH is a token that represents Ether 1:1 and conforms to the ERC20 token standard.\u201d Similarly, when referring to exchange pairs: Use: wETH/DAI","title":"Cryptocurrencies"},{"location":"contributors/writing-style-guide/#yearn-products","text":"Please see Yearn Naming Conventions .","title":"Yearn Products"},{"location":"contributors/writing-style-guide/#yearn","text":"When referring to Yearn as a smart contract system, use \"The Yearn Protocol.\" Example: \u201cThe Yearn Protocol is a set of contracts for yield optimization.\" When referring to Yearn as a body of YFI voters and the general stakeholder community, use \"Yearn Community\" or simply \"Yearn.\" Example: \"Yearn passed a vote to decrease the yCRV vault performance fee.\" Example: \"The Yearn Community passed a vote to add an additional vault.\" Use \"Yearn\" for casual references to Yearn and the Yearn Protocol as a whole.","title":"Yearn"},{"location":"contributors/writing-style-guide/#numbers","text":"Spell out numbers below 10. Examples: one, two, three, etc. Use numerals for numbers above 10, unless starting a sentence. For numbers with million, billion, or trillion, use figures in all except casual cases. Standard: \"The nation has 1 million citizens.\" Casual: \"I'd like to make a billion dollars.\"","title":"Numbers"},{"location":"contributors/writing-style-guide/#lists","text":"When bulleted and numbered lists contain complete sentences, capitalize the first word, and follow each with a period. If list items are phrases, no capitalization or punctuation is required. Don't use a list with only 1 item. Use parallel construction for each item in a list. Start with the same part of speech for each item (in this case, a verb). Use the same verb tense for each item. Use the same voice for each item. Use the same sentence type (statement, question, exclamation) for each item. List items that include definitions should look like this: Team: Yearn Protocol Developers and Contributors Community : General participants in Yearn forums and chat Use dashes rather than asterisks for unordered lists. Correct: - Incorrect: * Alphabetize lists of names unless there is a clear priority at work. Do not use ordered (numbered) lists unless order matters. Ordered list items should use the 1. repeated. Markdown will automatically generate numbers. Example: 1. Item 1 1. Item 2 1. Item 3 1. Item 3a 1. Item 3b","title":"Lists"},{"location":"contributors/writing-style-guide/#links","text":"Use absolute links and standard web URLs when referencing external resources. Create descriptive hyperlinks and avoid generic language. Correct - Descriptive: (Learn more at Yearn Documentation Incorrect - Generic: Learn more here . Include a . outside the link for sentences that end with a link. When creating links for parallel translated documents, make sure to update relative links to reflect the correct heading.","title":"Links"},{"location":"contributors/writing-style-guide/#tables-of-contents","text":"Include a table of contents for documents that span several pages and multiple sections. Use the raw Markdown from the Table of Contents above as a template. Be sure to include the line breaks --- as well to keep formatting consistent. The table of contents should list relevant sections for easy navigation.","title":"Tables of Contents"},{"location":"contributors/writing-style-guide/#markdown-guide","text":"Yearn documents posted on GitHub are written in Markdown, a text-to-HTML conversion tool for web writers. Include line breaks above and below headings. Use top-level headers ( # ) only once per document. Do not make multiple top-level headings. Avoid repeat headings. They will break auto-generated navigation. Avoid trailing spaces. Do not use: Em or en dashes: \u2014 Ampersands & in titles and headers. Pipes | in titles and headers. Curly quotes. Use the plaintext version. Correct: \" Incorrect: \u201c Escaping parentheses. Use normal parentheses. Correct: (SOMETHING) Incorrect: \\(SOMETHING\\) Ensure there is a single hard return at the end of a .md file. Use emojis to call attention to an important point, when necessary. Practice discretion and use them sparingly. This cheat sheet lists emojis and their Markdown shortcuts.","title":"Markdown Guide"},{"location":"contributors/writing-style-guide/#best-practices-and-resources","text":"Writers and contributors familiar with Yearn and cryptocurrency basics will have a better sense of where to apply their skills best. Spend some time learning about Yearn's function, history, and any recent events before contributing. In-depth knowledge is appreciated but not required.","title":"Best Practices and Resources"},{"location":"contributors/writing-style-guide/#learn-the-basics-of-markdown","text":"Daring Fireball Markdown Syntax Guide Practice Communicating Using Markdown","title":"Learn the Basics of Markdown"},{"location":"contributors/writing-style-guide/#helpful-writing-tools","text":"Make use of any writing tools that help improve workflow and writing quality. See the list below for some recommendations.","title":"Helpful Writing Tools"},{"location":"contributors/writing-style-guide/#text-editors","text":"Grammarly - Mistake-free writing editor HemingwayApp - Make writing bold and clear","title":"Text Editors"},{"location":"contributors/writing-style-guide/#word-choice","text":"Thesaurus - Synonyms Powerthesaurus - Synonyms and phrase suggestions WordHippo - Synonyms and phrase suggestions","title":"Word Choice"},{"location":"contributors/writing-style-guide/#review-community-guides","text":"Review the respective Contribute.md for each repository where pertinent before starting work on any Yearn project. Yearn contributor guides outline writing standards and help simplify the writing process.","title":"Review Community Guides"},{"location":"contributors/writing-style-guide/#document-specific-maintenance-guides","text":"Check for an associated maintenance guide before starting work on a given document if applicable. A document maintenance guide outlines standards to help Reviewers and contributors when maintaining a given resource. The rules described within a document-specific maintenance guide supersede other guides. If a discrepancy is glaring or unreasonable, bring the issue to an admin in the #documentation channel on Yearn's discord.","title":"Document-Specific Maintenance Guides"},{"location":"contributors/writing-style-guide/#contributor-tools","text":"The Contributor Tools Guide guide introduces the tools regularly used by Yearn contributors.","title":"Contributor Tools"},{"location":"contributors/writing-style-guide/#express-interest","text":"Check out the Getting Started guide for contributing to Documentation. Join the #documentation channel on Yearn's Discord, read the pinned messages, and reach out to a channel admin. Yearn community team members and senior contributors help onboard new contributors via Discord or Telegram chats where applicable. Feel free to discuss personal interests and relevant skills to help determine a well-suited project/issue and jump right in. To understand strengths you can also provide relevant examples of past projects, work, and experience. Demonstrate a reliable work ethic and offer quality work that speaks for itself. Stand out by suggesting projects and adding insight to public discussions.","title":"Express Interest"},{"location":"contributors/writing-style-guide/#collaborate","text":"When accepting an assignment, be sure to collaborate early and often. Visit #documentation or corresponding Telegram chat regularly. Coordinate with other members. Ask as many questions as necessary Ask for feedback when stuck. Provide frequent progress updates. Develop a plan that defines an approach for an assignment. Produce a project outline. Clarify the what so we can agree on the how. Set achievable deadlines. Timeboxing is good :) Assign and divide tasks with other contributors. Multiple contributors should not start work on similar projects individually. Please check that the same issue does not already exist in the Github Issues for that Repository, and if it does please coordinate with whoever is working on it to divide the work if needed.","title":"Collaborate"},{"location":"contributors/writing-style-guide/#track-progress","text":"Track projects and progress with GitHub Issues. Keep GitHub issues updated with comments and feedback. Take advantage of version history when working in HackMD or Google Docs.","title":"Track Progress"},{"location":"contributors/writing-style-guide/#final-drafts-and-submissions","text":"Transfer approved final drafts from Google Docs to HackMD or DrawIO(for diagrams) if need be. Let the team know when a project is ready for final review by moving your issue to the status of Pending Review on Github and messaging in the appropriate Discord or Telegram channel. Once reviewed, submit completed projects for approval as a Pull Request on GitHub. Ensure to update any relevant issues and the project board on GitHub","title":"Final Drafts and Submissions"},{"location":"contributors/writing-style-guide/#acknowledgements","text":"This document could not be possible without the amazing work done by the MakerDAO team as this document is mostly based on their Writing Style Guide .","title":"Acknowledgements"},{"location":"developers/code-repositories/","text":"Code Repositories Frontends Yearn.Finance Site: https://yearn.finance Repo: https://github.com/iearn-finance/iearn-finance Yearn Governance Site: https://ygov.finance Repo: https://github.com/iearn-finance/ygov-finance Yearn Insurance Site: https://yinsure.finance Repo: https://github.com/iearn-finance/yinsure-finance Yearn Borrow Site: https://yborrow.finance Repo: https://github.com/iearn-finance/iborrow-finance Yearn Swap Site: https://yswap.exchange Repo: https://github.com/iearn-finance/yswap-finance Yearn Documentation Site: https://docs.yearn.finance Repo: https://github.com/iearn-finance/docs Smart Contracts Yearn smart contracts repo: https://github.com/iearn-finance/yearn-protocol Controllers Registries Vaults Strategies iToken Wrappers APR Oracle Utils Security Disclosures Repo Misc Yearn multisig ychad.eth ychad.eth budget Yearn improvement proposals Collection of public audits Yearn vault schema Yearn Community Tools Yearn Discord FAQ Bot Repo: https://github.com/dgornjakovic/yfi-faq-bot Yearn Party Site: https://yearn.party Repo: https://github.com/x48-crypto/yearn-party Yearn Tools Based off Yearn API Based off Yearn API Site: https://yearn.tools Repo: https://github.com/yearn-integrations/api Recycler Vault Interface Site: https://vaults.finance Repo: https://github.com/banteg/yearn-recycle Add Yearn Tokens to MetaMask Site: https://addyearn.finance Repo: https://github.com/x48-crypto/watch-token","title":"Code Repositories"},{"location":"developers/code-repositories/#code-repositories","text":"","title":"Code Repositories"},{"location":"developers/code-repositories/#frontends","text":"Yearn.Finance Site: https://yearn.finance Repo: https://github.com/iearn-finance/iearn-finance Yearn Governance Site: https://ygov.finance Repo: https://github.com/iearn-finance/ygov-finance Yearn Insurance Site: https://yinsure.finance Repo: https://github.com/iearn-finance/yinsure-finance Yearn Borrow Site: https://yborrow.finance Repo: https://github.com/iearn-finance/iborrow-finance Yearn Swap Site: https://yswap.exchange Repo: https://github.com/iearn-finance/yswap-finance Yearn Documentation Site: https://docs.yearn.finance Repo: https://github.com/iearn-finance/docs","title":"Frontends"},{"location":"developers/code-repositories/#smart-contracts","text":"Yearn smart contracts repo: https://github.com/iearn-finance/yearn-protocol Controllers Registries Vaults Strategies iToken Wrappers APR Oracle Utils","title":"Smart Contracts"},{"location":"developers/code-repositories/#security","text":"Disclosures Repo","title":"Security"},{"location":"developers/code-repositories/#misc","text":"Yearn multisig ychad.eth ychad.eth budget Yearn improvement proposals Collection of public audits Yearn vault schema","title":"Misc"},{"location":"developers/code-repositories/#yearn-community-tools","text":"Yearn Discord FAQ Bot Repo: https://github.com/dgornjakovic/yfi-faq-bot Yearn Party Site: https://yearn.party Repo: https://github.com/x48-crypto/yearn-party Yearn Tools Based off Yearn API Based off Yearn API Site: https://yearn.tools Repo: https://github.com/yearn-integrations/api Recycler Vault Interface Site: https://vaults.finance Repo: https://github.com/banteg/yearn-recycle Add Yearn Tokens to MetaMask Site: https://addyearn.finance Repo: https://github.com/x48-crypto/watch-token","title":"Yearn Community Tools"},{"location":"developers/deployed-contracts-registry/","text":"Deployed Contracts Registry Below is a list of relevant smart contracts and Github repositories for using and interacting with the Yearn product suite. Token Contracts YFI The Yearn ecosystem is controlled by YFI token holders who submit and vote on proposals that govern the ecosystem. Token Address YFI 0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e v2 Yield Tokens The v2 yield tokens can be used in one lender at a time. Currently being used on Curve\u2019s Y Pool, Yearn\u2019s yBTC pool and sUSD pool. Token Address Github yDAIv2 0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01 YDAIv2.sol yUSDCv2 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e YUSDCv2.sol yUSDTv2 0x83f798e925BcD4017Eb265844FDDAbb448f1707D YUSDTv2.sol ysUSDv2 0xF61718057901F84C4eEC4339EF8f0D86D2B45600 YSUSDv2.sol yTUSDv2 0x73a052500105205d34daf004eab301916da8190f YTUSDv2.sol yWBTCv2 0x04Aa51bbcB46541455cCF1B8bef2ebc5d3787EC9 YWBTCv2.sol v3 Yield Tokens The v3 yield tokens allow the underlying assets to be spread across multiple lenders. Currently being used on Curve\u2019s BUSD pool. Token Address Github yDAIv3 0xC2cB1040220768554cf699b0d863A3cd4324ce32 YDAIv3.sol yUSDCv3 0x26EA744E5B887E5205727f55dFBE8685e3b21951 YUSDCv3.sol yUSDTv3 0xE6354ed5bC4b393a5Aad09f21c46E101e692d447 YUSDCv3.sol yBUSDv3 0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE YBUSDv3.sol Vault Contracts Vaults follow unique strategies that are designed to maximize yield of the deposited asset and minimize risk. The vaults are maintained by a Controller which oversees the strategy execution. Strategies' generated profits are used to buy respective vault underlying asset. The Controller contract can be found here and the source code can be found here . Vaults Vault Address GitHub WETH 0xe1237aa7f535b0cc33fd973d66cbf830354d16c7 yWETH.sol YFI 0xba2e7fed597fd0e3e70f5130bcdbbfe06bb94fe1 yVault.sol curve.fi/3pool LP 0x9cA85572E6A3EbF24dEDd195623F188735A5179f yVault.sol curve.fi/y LP 0x5dbcf33d8c2e976c6b560249878e6f1491bca25c yVault.sol curve.fi/busd LP 0x2994529c0652d127b7842094103715ec5299bbed yVault.sol curve.fi/sbtc LP 0x7ff566e1d69deff32a7b244ae7276b9f90e9d0f6 yVault.sol DAI 0xacd43e627e64355f1861cec6d3a6688b31a6f952 yVault.sol TUSD 0x37d19d1c4e1fa9dc47bd1ea12f742a0887eda74a yVault.sol USDC 0x597ad1e0c13bfe8025993d9e79c69e1c0233522e yVault.sol USDT 0x2f08119c6f07c006695e079aafc638b8789faf18 yVault.sol GUSD 0xec0d8d3ed5477106c6d4ea27d90a60e594693c90 yVault.sol Strategies Strategy Address GitHub Vault StrategyCurve3CrvVoterProxy 0xC59601F0CC49baa266891b7fc63d2D5FE097A79D StrategyCurve3CrvVoterProxy.sol curve.fi/3pool LP StrategyMKRVaultDAIDelegate 0x932fc4fd0eee66f22f1e23fba74d7058391c0b15 StrategyMKRVaultDAIDelegate.sol WETH StrategyYFIGovernance 0x395f93350d5102b6139abfc84a7d6ee70488797c StrategyYFIGovernance.sol YFI StrategyCurveYCRVVoter 0xc999fb87aca383a63d804a575396f65a55aa5ac8 StrategyCurveYCRVVoter.sol curve.fi/y LP StrategyCurveYBUSD 0xb15ee8e74dac2d77f9d1080b32b0f3562954aee9 StrategyCurveYBUSD.sol curve.fi/busd LP StrategyCurveSBTC 0x4feeaeced575239b46d70b50e13532ecb62e4ea8 StrategyCurveSBTC.sol curve.fi/sbtc LP StrategyDAICurve 0xaa880345a3147a1fc6889080401c791813ed08dc StrategyDAICurve.sol DAI StrategyTUSDCurve 0x1d91e3f77271ed069618b4ba06d19821bc2ed8b0 StrategyTUSDCurve.sol TUSD StrategyDForceUSDC 0xa30d1d98c502378ad61fe71bcdc3a808cf60b897 StrategyDForceUSDC.sol USDC StrategyDForceUSDT 0x787c771035bde631391ced5c083db424a4a64bd8 StrategyDForceUSDT.sol USDT Delegated Vault Contracts Volatile assets can also participate in yield farming strategies as part of the Delegated Vaults. Currently, there is only one Delegated Vault: aLINK. The Controller deposits LINK into AAVE and borrows stable coins USDC USDC . The initial health factor of these loans is always above 4, and if the health factor drops below 4 at any time the Controller repays a portion of the debt in order to maintain a health factor above 4. The stable coins borrowed e.g., USDC, DAI, USDT, etc. e.g., USDC, DAI, USDT, etc. depend on the strategy selected by the Controller . After obtaining stable coins the Controller will deposit them into one of the yVaults identified above. The aLINK vault uses the StrategyControllerV2 contract . The source code for StrategyControllerV2 is here . Strategy Strategy GitHub StrategyVaultUSDC 0x25faca21dd2ad7edb3a027d543e617496820d8d6 StrategyVaultUSDC.sol Vault Address GitHub aLINK 0x29e240cfd7946ba20895a7a02edb25c210f9f324 yDelegatedVault.sol Governance Contracts YFI holders govern the Yearn ecosystem and are eligible to receive a portion of protocol profits. Therefore, YFI represents a right to govern the platform and a claim on earnings. Profits are obtained from each of Yearn's products. In order to claim profits, YFI holders stake their tokens into the Governance contract. Contract Status Address Governance Staking v2 v2 Live 0xba37b002abafdd8e89a1995da52740bbc013d992 YearnGovernance Balancer v1 Balancer v1 Old 0x3a22df48d84957f907e67f4313e3d43179040d6e YearnRewards Yearn v1 Yearn v1 Old 0x0001fb050fe7312791bf6475b96569d83f695c9f YearnRewards Balancer v1 Balancer v1 Old 0x033e52f513f9b98e129381c6708f9faa2dee5db5 YearnRewards Gov. Staking v1 Gov. Staking v1 Old 0xb01419e74d8a2abb1bbad82925b19c36c191a701 Status and Info Contracts Utility Summary YRegistry The Vault Registry is the single source of truth for active Yearn vaults. The registry allows users to query for active Yearn vaults and vault metadata details [here](https://hackmd.io/JDWZ6BAuSmm-VRQRp-bZXw#Vault-Registry-) details [here](https://hackmd.io/JDWZ6BAuSmm-VRQRp-bZXw#Vault-Registry-) . UniswapROI On-chain uniswap pool ROI calculator APROracle Allows on-chain rate comparison between Compound, Fulcrum, Aave, and dYdX. UniswapAPR An on-chain uniswap pool APR calculator. It calculates all values in ETH adjusted for the last year. IEarnAPR Contract for on-chain APR decision trees between Compound, Fulcrum, Aave, and dYdX. IEarnManager On-chain stateless execution. Recommendations based on IearnAPR. APRWithPoolOracle APR used for stateless recommend() function. Can be used to change the recommended provider. IEarnAPRWithPool APR used for stateless recommend() function. Can be used to change the recommended provider. Utility Contracts Utility Address Curve's yPool 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8","title":"Deployed Contracts Registry"},{"location":"developers/deployed-contracts-registry/#deployed-contracts-registry","text":"Below is a list of relevant smart contracts and Github repositories for using and interacting with the Yearn product suite.","title":"Deployed Contracts Registry"},{"location":"developers/deployed-contracts-registry/#token-contracts","text":"","title":"Token Contracts"},{"location":"developers/deployed-contracts-registry/#yfi","text":"The Yearn ecosystem is controlled by YFI token holders who submit and vote on proposals that govern the ecosystem. Token Address YFI 0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e","title":"YFI"},{"location":"developers/deployed-contracts-registry/#v2-yield-tokens","text":"The v2 yield tokens can be used in one lender at a time. Currently being used on Curve\u2019s Y Pool, Yearn\u2019s yBTC pool and sUSD pool. Token Address Github yDAIv2 0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01 YDAIv2.sol yUSDCv2 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e YUSDCv2.sol yUSDTv2 0x83f798e925BcD4017Eb265844FDDAbb448f1707D YUSDTv2.sol ysUSDv2 0xF61718057901F84C4eEC4339EF8f0D86D2B45600 YSUSDv2.sol yTUSDv2 0x73a052500105205d34daf004eab301916da8190f YTUSDv2.sol yWBTCv2 0x04Aa51bbcB46541455cCF1B8bef2ebc5d3787EC9 YWBTCv2.sol","title":"v2 Yield Tokens"},{"location":"developers/deployed-contracts-registry/#v3-yield-tokens","text":"The v3 yield tokens allow the underlying assets to be spread across multiple lenders. Currently being used on Curve\u2019s BUSD pool. Token Address Github yDAIv3 0xC2cB1040220768554cf699b0d863A3cd4324ce32 YDAIv3.sol yUSDCv3 0x26EA744E5B887E5205727f55dFBE8685e3b21951 YUSDCv3.sol yUSDTv3 0xE6354ed5bC4b393a5Aad09f21c46E101e692d447 YUSDCv3.sol yBUSDv3 0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE YBUSDv3.sol","title":"v3 Yield Tokens"},{"location":"developers/deployed-contracts-registry/#vault-contracts","text":"Vaults follow unique strategies that are designed to maximize yield of the deposited asset and minimize risk. The vaults are maintained by a Controller which oversees the strategy execution. Strategies' generated profits are used to buy respective vault underlying asset. The Controller contract can be found here and the source code can be found here .","title":"Vault Contracts"},{"location":"developers/deployed-contracts-registry/#vaults","text":"Vault Address GitHub WETH 0xe1237aa7f535b0cc33fd973d66cbf830354d16c7 yWETH.sol YFI 0xba2e7fed597fd0e3e70f5130bcdbbfe06bb94fe1 yVault.sol curve.fi/3pool LP 0x9cA85572E6A3EbF24dEDd195623F188735A5179f yVault.sol curve.fi/y LP 0x5dbcf33d8c2e976c6b560249878e6f1491bca25c yVault.sol curve.fi/busd LP 0x2994529c0652d127b7842094103715ec5299bbed yVault.sol curve.fi/sbtc LP 0x7ff566e1d69deff32a7b244ae7276b9f90e9d0f6 yVault.sol DAI 0xacd43e627e64355f1861cec6d3a6688b31a6f952 yVault.sol TUSD 0x37d19d1c4e1fa9dc47bd1ea12f742a0887eda74a yVault.sol USDC 0x597ad1e0c13bfe8025993d9e79c69e1c0233522e yVault.sol USDT 0x2f08119c6f07c006695e079aafc638b8789faf18 yVault.sol GUSD 0xec0d8d3ed5477106c6d4ea27d90a60e594693c90 yVault.sol","title":"Vaults"},{"location":"developers/deployed-contracts-registry/#strategies","text":"Strategy Address GitHub Vault StrategyCurve3CrvVoterProxy 0xC59601F0CC49baa266891b7fc63d2D5FE097A79D StrategyCurve3CrvVoterProxy.sol curve.fi/3pool LP StrategyMKRVaultDAIDelegate 0x932fc4fd0eee66f22f1e23fba74d7058391c0b15 StrategyMKRVaultDAIDelegate.sol WETH StrategyYFIGovernance 0x395f93350d5102b6139abfc84a7d6ee70488797c StrategyYFIGovernance.sol YFI StrategyCurveYCRVVoter 0xc999fb87aca383a63d804a575396f65a55aa5ac8 StrategyCurveYCRVVoter.sol curve.fi/y LP StrategyCurveYBUSD 0xb15ee8e74dac2d77f9d1080b32b0f3562954aee9 StrategyCurveYBUSD.sol curve.fi/busd LP StrategyCurveSBTC 0x4feeaeced575239b46d70b50e13532ecb62e4ea8 StrategyCurveSBTC.sol curve.fi/sbtc LP StrategyDAICurve 0xaa880345a3147a1fc6889080401c791813ed08dc StrategyDAICurve.sol DAI StrategyTUSDCurve 0x1d91e3f77271ed069618b4ba06d19821bc2ed8b0 StrategyTUSDCurve.sol TUSD StrategyDForceUSDC 0xa30d1d98c502378ad61fe71bcdc3a808cf60b897 StrategyDForceUSDC.sol USDC StrategyDForceUSDT 0x787c771035bde631391ced5c083db424a4a64bd8 StrategyDForceUSDT.sol USDT","title":"Strategies"},{"location":"developers/deployed-contracts-registry/#delegated-vault-contracts","text":"Volatile assets can also participate in yield farming strategies as part of the Delegated Vaults. Currently, there is only one Delegated Vault: aLINK. The Controller deposits LINK into AAVE and borrows stable coins USDC USDC . The initial health factor of these loans is always above 4, and if the health factor drops below 4 at any time the Controller repays a portion of the debt in order to maintain a health factor above 4. The stable coins borrowed e.g., USDC, DAI, USDT, etc. e.g., USDC, DAI, USDT, etc. depend on the strategy selected by the Controller . After obtaining stable coins the Controller will deposit them into one of the yVaults identified above. The aLINK vault uses the StrategyControllerV2 contract . The source code for StrategyControllerV2 is here . Strategy Strategy GitHub StrategyVaultUSDC 0x25faca21dd2ad7edb3a027d543e617496820d8d6 StrategyVaultUSDC.sol Vault Address GitHub aLINK 0x29e240cfd7946ba20895a7a02edb25c210f9f324 yDelegatedVault.sol","title":"Delegated Vault Contracts"},{"location":"developers/deployed-contracts-registry/#governance-contracts","text":"YFI holders govern the Yearn ecosystem and are eligible to receive a portion of protocol profits. Therefore, YFI represents a right to govern the platform and a claim on earnings. Profits are obtained from each of Yearn's products. In order to claim profits, YFI holders stake their tokens into the Governance contract. Contract Status Address Governance Staking v2 v2 Live 0xba37b002abafdd8e89a1995da52740bbc013d992 YearnGovernance Balancer v1 Balancer v1 Old 0x3a22df48d84957f907e67f4313e3d43179040d6e YearnRewards Yearn v1 Yearn v1 Old 0x0001fb050fe7312791bf6475b96569d83f695c9f YearnRewards Balancer v1 Balancer v1 Old 0x033e52f513f9b98e129381c6708f9faa2dee5db5 YearnRewards Gov. Staking v1 Gov. Staking v1 Old 0xb01419e74d8a2abb1bbad82925b19c36c191a701","title":"Governance Contracts"},{"location":"developers/deployed-contracts-registry/#status-and-info-contracts","text":"Utility Summary YRegistry The Vault Registry is the single source of truth for active Yearn vaults. The registry allows users to query for active Yearn vaults and vault metadata details [here](https://hackmd.io/JDWZ6BAuSmm-VRQRp-bZXw#Vault-Registry-) details [here](https://hackmd.io/JDWZ6BAuSmm-VRQRp-bZXw#Vault-Registry-) . UniswapROI On-chain uniswap pool ROI calculator APROracle Allows on-chain rate comparison between Compound, Fulcrum, Aave, and dYdX. UniswapAPR An on-chain uniswap pool APR calculator. It calculates all values in ETH adjusted for the last year. IEarnAPR Contract for on-chain APR decision trees between Compound, Fulcrum, Aave, and dYdX. IEarnManager On-chain stateless execution. Recommendations based on IearnAPR. APRWithPoolOracle APR used for stateless recommend() function. Can be used to change the recommended provider. IEarnAPRWithPool APR used for stateless recommend() function. Can be used to change the recommended provider.","title":"Status and Info Contracts"},{"location":"developers/deployed-contracts-registry/#utility-contracts","text":"Utility Address Curve's yPool 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8","title":"Utility Contracts"},{"location":"developers/integration-guide/","text":"Integration Guide Integration Points Vault Registry Subgraph API Vault Registry The Yearn Vault Registry aka yRegistry aka yRegistry is a smart contract deployed on the ethereum mainnet. The Vault Registry is the single source of truth for active Yearn vaults. The registry allows users to query for active Yearn vaults and vault metadata see \"[available data](integration-guide.md#Vault-Registry-Available-Data)\" below see \"[available data](integration-guide.md#Vault-Registry-Available-Data)\" below . Details Currently vaults are added manually by Yearn governance. In the future the vault registry may be integrated into the vault lifecycle meaning new vaults would get added into the registry during their deployment process meaning new vaults would get added into the registry during their deployment process . Interact ENS: registry.ychad.eth Address: 0x3ee41c098f9666ed2ea246f4d2558010e59d63a0 Code https://github.com/iearn-finance/yearn-protocol/blob/develop/contracts/registries/YRegistry.sol Available data Vault addresses methods: getVaults methods: <code>getVaults</code> . Active controller address per vault methods: getVaultInfo , , getVaultsInfo methods: <code>getVaultInfo</code>, , <code>getVaultsInfo</code> . Active strategy address per vault methods: getVaultInfo , , getVaultsInfo methods: <code>getVaultInfo</code>, , <code>getVaultsInfo</code> . Vault type normal, wrapped, delegated normal, wrapped, delegated methods: isDelegated , , isWrapped methods: <code>isDelegated</code>, , <code>isWrapped</code> . Governance address methods: governance methods: <code>governance</code> . Integrations Yearn API - utilizes vault registry as the single source of truth in many API calls. Future Integrations Yearn Subgraph - in the future we would like the Yearn subgraph to index new vaults automatically using the Vault registry. In order to accomplish this the vault registry must first be incorporated into the vault lifecycle. Subgraph The Yearn Subgraph is a GraphQL-based public API running on The Graph that can be utilized to extract current and historical data from the Yearn ecosystem. Details See README for detailed integration details. Interact Graph Explorer Code Github Available data Vault snapshot current contract values current contract values . Vault metrics per vault net deposits, withdrawals, transfers, earnings, etc. net deposits, withdrawals, transfers, earnings, etc. . Vault metrics per user net deposits, withdrawals, transfers, earnings, etc. net deposits, withdrawals, transfers, earnings, etc. . Active controller address per vault. Active strategy address per vault. Historical harvest events and earnings. Integrations Examples of projects using the Yearn Subgraph Link Code By https://yearn.tools https://github.com/yearn-integrations/api x48 , Lucinao , Graham https://yvault-roi.netlify.app https://github.com/rrridges/yvault-roi Matt Ridges https://www.yfistats.com Bob_The_Builder API Yearn API is a collection of Serverless API endpoints focused on Yearn integrations. Details Goals Provide free API endpoints to simplify 3 rd party integration with Yearn. Provide an \"API playground\" Swagger UI Swagger UI anyone can use to quickly browse and test available APIs. Document all existing APIs. Allow the entire API stack to be forked to enable community involvement in API development. Data Sources Vault Registry - Yearn API utilizes the vault registry in a number of endpoints to maintain a list of active vaults. Subgraph - Yearn API utilizes the Yearn Subgraph for various metrics endpoints. Interact Yearn API Playground Swagger UI Swagger UI : https://yearn.tools . Code Github Available data Current vault snapshots. Vault listings from vault registry with injected strategy/controller/token metadata with injected strategy/controller/token metadata . Vault metrics per user net deposits, withdrawals, transfers, earnings, etc. net deposits, withdrawals, transfers, earnings, etc. . Vault transactions per user. Vault APY data. Integrations Examples of projects using the API Link Code By https://yearn.finance https://github.com/iearn-finance/iearn-finance Yearn https://yearn.party https://github.com/x48-crypto/yearn-party x48 https://feel-the-yearn.app Graham","title":"Integration Guide"},{"location":"developers/integration-guide/#integration-guide","text":"","title":"Integration Guide"},{"location":"developers/integration-guide/#integration-points","text":"Vault Registry Subgraph API","title":"Integration Points"},{"location":"developers/integration-guide/#vault-registry","text":"The Yearn Vault Registry aka yRegistry aka yRegistry is a smart contract deployed on the ethereum mainnet. The Vault Registry is the single source of truth for active Yearn vaults. The registry allows users to query for active Yearn vaults and vault metadata see \"[available data](integration-guide.md#Vault-Registry-Available-Data)\" below see \"[available data](integration-guide.md#Vault-Registry-Available-Data)\" below .","title":"Vault Registry "},{"location":"developers/integration-guide/#details","text":"Currently vaults are added manually by Yearn governance. In the future the vault registry may be integrated into the vault lifecycle meaning new vaults would get added into the registry during their deployment process meaning new vaults would get added into the registry during their deployment process .","title":"Details"},{"location":"developers/integration-guide/#interact","text":"ENS: registry.ychad.eth Address: 0x3ee41c098f9666ed2ea246f4d2558010e59d63a0","title":"Interact"},{"location":"developers/integration-guide/#code","text":"https://github.com/iearn-finance/yearn-protocol/blob/develop/contracts/registries/YRegistry.sol","title":"Code"},{"location":"developers/integration-guide/#available-data","text":"Vault addresses methods: getVaults methods: <code>getVaults</code> . Active controller address per vault methods: getVaultInfo , , getVaultsInfo methods: <code>getVaultInfo</code>, , <code>getVaultsInfo</code> . Active strategy address per vault methods: getVaultInfo , , getVaultsInfo methods: <code>getVaultInfo</code>, , <code>getVaultsInfo</code> . Vault type normal, wrapped, delegated normal, wrapped, delegated methods: isDelegated , , isWrapped methods: <code>isDelegated</code>, , <code>isWrapped</code> . Governance address methods: governance methods: <code>governance</code> .","title":"Available data "},{"location":"developers/integration-guide/#integrations","text":"Yearn API - utilizes vault registry as the single source of truth in many API calls.","title":"Integrations"},{"location":"developers/integration-guide/#future-integrations","text":"Yearn Subgraph - in the future we would like the Yearn subgraph to index new vaults automatically using the Vault registry. In order to accomplish this the vault registry must first be incorporated into the vault lifecycle.","title":"Future Integrations"},{"location":"developers/integration-guide/#subgraph","text":"The Yearn Subgraph is a GraphQL-based public API running on The Graph that can be utilized to extract current and historical data from the Yearn ecosystem.","title":"Subgraph "},{"location":"developers/integration-guide/#details_1","text":"See README for detailed integration details.","title":"Details"},{"location":"developers/integration-guide/#interact_1","text":"Graph Explorer","title":"Interact"},{"location":"developers/integration-guide/#code_1","text":"Github","title":"Code"},{"location":"developers/integration-guide/#available-data_1","text":"Vault snapshot current contract values current contract values . Vault metrics per vault net deposits, withdrawals, transfers, earnings, etc. net deposits, withdrawals, transfers, earnings, etc. . Vault metrics per user net deposits, withdrawals, transfers, earnings, etc. net deposits, withdrawals, transfers, earnings, etc. . Active controller address per vault. Active strategy address per vault. Historical harvest events and earnings.","title":"Available data"},{"location":"developers/integration-guide/#integrations_1","text":"Examples of projects using the Yearn Subgraph Link Code By https://yearn.tools https://github.com/yearn-integrations/api x48 , Lucinao , Graham https://yvault-roi.netlify.app https://github.com/rrridges/yvault-roi Matt Ridges https://www.yfistats.com Bob_The_Builder","title":"Integrations"},{"location":"developers/integration-guide/#api","text":"Yearn API is a collection of Serverless API endpoints focused on Yearn integrations.","title":"API "},{"location":"developers/integration-guide/#details_2","text":"Goals Provide free API endpoints to simplify 3 rd party integration with Yearn. Provide an \"API playground\" Swagger UI Swagger UI anyone can use to quickly browse and test available APIs. Document all existing APIs. Allow the entire API stack to be forked to enable community involvement in API development. Data Sources Vault Registry - Yearn API utilizes the vault registry in a number of endpoints to maintain a list of active vaults. Subgraph - Yearn API utilizes the Yearn Subgraph for various metrics endpoints.","title":"Details"},{"location":"developers/integration-guide/#interact_2","text":"Yearn API Playground Swagger UI Swagger UI : https://yearn.tools .","title":"Interact"},{"location":"developers/integration-guide/#code_2","text":"Github","title":"Code"},{"location":"developers/integration-guide/#available-data_2","text":"Current vault snapshots. Vault listings from vault registry with injected strategy/controller/token metadata with injected strategy/controller/token metadata . Vault metrics per user net deposits, withdrawals, transfers, earnings, etc. net deposits, withdrawals, transfers, earnings, etc. . Vault transactions per user. Vault APY data.","title":"Available data"},{"location":"developers/integration-guide/#integrations_2","text":"Examples of projects using the API Link Code By https://yearn.finance https://github.com/iearn-finance/iearn-finance Yearn https://yearn.party https://github.com/x48-crypto/yearn-party x48 https://feel-the-yearn.app Graham","title":"Integrations"},{"location":"developers/naming-convention/","text":"Naming conventions yVaults Acceptable alternative names include Yearn Vaults, or informally referring to the product as vaults. When referring to a specific yVault, the preferred name is generally token name + yVault ; this matches the name field on the token contract. However, it is also acceptable to use yvToken + Vault or yvToken ; the latter matches symbol in the contract. Examples: DAI yVault , yvDAI Vault , or simply yvDAI For each yVault, name and symbol conventions are as follows: Name: ${token.symbol()} or override yVault Symbol: yv${token.symbol()} or override A version field is included in the token contract to correspond to the major yVault release version. The predominant use case for name and symbol override is for LP tokens. Curve Name: Curve + pool + Pool yVault Examples: Curve sBTC Pool yVault , Curve 3pool yVault , Curve Y Pool yVault In this case, pool is taken directly from Curve.fi's UI, and we can adjust for capitalization as needed. In the case of the 3pool , the redundant \"Pool\" is removed. Symbol: yvCurve-pool Examples: yvCurve-sBTC , yvCurve-3pool , yvCurve-Y Note: In this methodology, yvCurve-Y refers to the vault previously known as yUSD . Please see below for a more detailed discussion on proper use of yUSD . Uniswap Name: Uniswap + v${self.version()} + TOKEN-TOKEN + Pool yVault Examples: Uniswap v2 USDT-WETH Pool yVault , Uniswap v2 WBTC-WETH Pool yVault Symbol: yvUni-TOKEN-TOKEN Examples: yvUni-USDT-WETH , yvUni-WBTC-WETH Note: Version was included for Uniswap LP tokens to help limit confusion between UNI-v2 LP tokens and upcoming UNI-v3 LP tokens. Balancer Name: Balancer + TOKEN-TOKEN + Pool yVault Examples: Balancer USDT-WETH Pool yVault , Balancer WBTC-WETH Pool yVault Symbol: yvBal-TOKEN-TOKEN Examples: yvBal-USDT-WETH , yvBal-WBTC-WETH Note: Since Balancer allows more than two tokens per pool, append as many TOKEN as needed for the pool in question. yUSD While the term yUSD was used to refer to the Curve Y Pool yVault in the past, under our updated naming convention this vault token is now yvCurve-Y . However, usage of yUSD is still permissable when referring to the asset itself. Example: Yearn pays monthly grants in yUSD . In the future, if Yearn creates a new yUSD that is a collection of several yVault tokens (as has been previously discussed), then the current yUSD will simply be referred to as yvCurve-Y and only the new token will be yUSD . yEarn These are Yearn's original yield-aware tokens, whose v2 and v3 contracts can be found here . These products should be referred to as yEarn Tokens, underlying token name + Earn , or y{token.symbol()}v${self.version()} Examples: yDAIv2 , yDAI Earn , yBUSDv3 , yBUSD Earn Test Products For deployed contracts that have not reached their final production version, a simple modification is included to designate these on the contract level as being test products. Name: ${token.symbol()} or override + Test + Product Symbol: yt${token.symbol()} or override Examples: DAI Test yVault , ytDAI Additionally, the v2 yVault contracts have upgradeable name and symbol fields. This means that should a test contract perform well, these fields can be updated to reflect that it is no longer a test contract, removing the need to deploy new contracts. Future Products Future products can follow a simple naming convention: y + product , where the product and any potential token names follow similar guidelines as above with yVaults. These can then be further modified as needed based on the product s s . Examples: ySwap , yBorrow , yTrade","title":"Naming conventions"},{"location":"developers/naming-convention/#naming-conventions","text":"","title":"Naming conventions"},{"location":"developers/naming-convention/#yvaults","text":"Acceptable alternative names include Yearn Vaults, or informally referring to the product as vaults. When referring to a specific yVault, the preferred name is generally token name + yVault ; this matches the name field on the token contract. However, it is also acceptable to use yvToken + Vault or yvToken ; the latter matches symbol in the contract. Examples: DAI yVault , yvDAI Vault , or simply yvDAI For each yVault, name and symbol conventions are as follows: Name: ${token.symbol()} or override yVault Symbol: yv${token.symbol()} or override A version field is included in the token contract to correspond to the major yVault release version. The predominant use case for name and symbol override is for LP tokens. Curve Name: Curve + pool + Pool yVault Examples: Curve sBTC Pool yVault , Curve 3pool yVault , Curve Y Pool yVault In this case, pool is taken directly from Curve.fi's UI, and we can adjust for capitalization as needed. In the case of the 3pool , the redundant \"Pool\" is removed. Symbol: yvCurve-pool Examples: yvCurve-sBTC , yvCurve-3pool , yvCurve-Y Note: In this methodology, yvCurve-Y refers to the vault previously known as yUSD . Please see below for a more detailed discussion on proper use of yUSD . Uniswap Name: Uniswap + v${self.version()} + TOKEN-TOKEN + Pool yVault Examples: Uniswap v2 USDT-WETH Pool yVault , Uniswap v2 WBTC-WETH Pool yVault Symbol: yvUni-TOKEN-TOKEN Examples: yvUni-USDT-WETH , yvUni-WBTC-WETH Note: Version was included for Uniswap LP tokens to help limit confusion between UNI-v2 LP tokens and upcoming UNI-v3 LP tokens. Balancer Name: Balancer + TOKEN-TOKEN + Pool yVault Examples: Balancer USDT-WETH Pool yVault , Balancer WBTC-WETH Pool yVault Symbol: yvBal-TOKEN-TOKEN Examples: yvBal-USDT-WETH , yvBal-WBTC-WETH Note: Since Balancer allows more than two tokens per pool, append as many TOKEN as needed for the pool in question.","title":"yVaults"},{"location":"developers/naming-convention/#yusd","text":"While the term yUSD was used to refer to the Curve Y Pool yVault in the past, under our updated naming convention this vault token is now yvCurve-Y . However, usage of yUSD is still permissable when referring to the asset itself. Example: Yearn pays monthly grants in yUSD . In the future, if Yearn creates a new yUSD that is a collection of several yVault tokens (as has been previously discussed), then the current yUSD will simply be referred to as yvCurve-Y and only the new token will be yUSD .","title":"yUSD"},{"location":"developers/naming-convention/#yearn","text":"These are Yearn's original yield-aware tokens, whose v2 and v3 contracts can be found here . These products should be referred to as yEarn Tokens, underlying token name + Earn , or y{token.symbol()}v${self.version()} Examples: yDAIv2 , yDAI Earn , yBUSDv3 , yBUSD Earn","title":"yEarn"},{"location":"developers/naming-convention/#test-products","text":"For deployed contracts that have not reached their final production version, a simple modification is included to designate these on the contract level as being test products. Name: ${token.symbol()} or override + Test + Product Symbol: yt${token.symbol()} or override Examples: DAI Test yVault , ytDAI Additionally, the v2 yVault contracts have upgradeable name and symbol fields. This means that should a test contract perform well, these fields can be updated to reflect that it is no longer a test contract, removing the need to deploy new contracts.","title":"Test Products"},{"location":"developers/naming-convention/#future-products","text":"Future products can follow a simple naming convention: y + product , where the product and any potential token names follow similar guidelines as above with yVaults. These can then be further modified as needed based on the product s s . Examples: ySwap , yBorrow , yTrade","title":"Future Products"},{"location":"developers/misc-resources/","text":"Misc Resources","title":"Misc Resources"},{"location":"developers/misc-resources/#misc-resources","text":"","title":"Misc Resources"},{"location":"developers/misc-resources/adminpolicy/","text":"Admin Access Policy {% hint style=\"info\" %} These docs are still being worked on. v2 Yield Tokens Contract ABI Address yDAIv2 JSON ydaiv2.iearn.eth yUSDCv2 JSON yusdcv2.iearn.eth yUSDTv2 JSON yusdtv2.iearn.eth yTUSDv2 JSON ytusdv2.iearn.eth yDAIv2 None \u2705 yUSDCv2 None \u2705 yUSDTv2 set_new_APR \u2705 No interaction with funds. APR used for stateless recommend() function. Can be used to change the recommended provider. The owner could replace the existing contract to a controlled contract that could suggest a specific lending provider. set_new_COMPOUND \u26a0\ufe0f Could access funds via malicious lending contract. Sets the downstream address for Compound. The owner could replicate the compound mint() function call and force the APR change (with the vector mentioned in set_new_APR) and withdraw funds. This method is implemented to allow adding Compound if they support the underlying token. set_new_DTOKEN \u2705 No interaction with funds. Can only update the ID at dydx, no way to influence any other action. This method is implemented to allow adding dYdX if they support the underlying token. set_new_FULCRUM \u26a0\ufe0f As per set_new_COMPOUND yTUSDv2 set_new_APR \u2705 set_new_COMPOUND \u26a0\ufe0f set_new_DTOKEN \u2705 Utility Contracts Contract ABI Address APROracle JSON apr.iearn.eth UniswapROI JSON uniroi.iearn.eth UniswapAPR JSON uniapr.iearn.eth APRWithPoolOracle JSON apradj.iearn.eth IEarnAPRWithPool JSON iapradj.iearn.eth IEarnAPRWithPool No interaction with funds. APR used for stateless recommend() function. Can be used to change the recommended provider. The owner could influence the calculation to a specific lending provider. addAToken \u2705 addAUniToken \u2705 addCToken \u2705 addDToken \u2705 addIToken \u2705 addPool \u2705 addYToken \u2705 set_new_APR \u2705 set_new_UNI \u2705 set_new_UNIAPR \u2705 set_new_UNIROI \u2705 APRWithPoolOracle No interaction with funds. APR used for stateless recommend() function. Can be used to change the recommended provider. The owner could influence the calculation to a specific lending provider. set_new_AAVE \u2705 set_new_DDEX \u2705 set_new_DYDX \u2705 set_new_Modifier \u2705 set_new_Ratio \u2705 set_new_blocksPerYear \u2705 UniswapROI None \u2705 UniswapAPR No interaction with funds. set_new_blocksPerYear \u2705 Lending Providers compound.finance aave.com ddex.io dydx.exchange fulcrum.trade","title":"Admin Access Policy"},{"location":"developers/misc-resources/adminpolicy/#admin-access-policy","text":"{% hint style=\"info\" %} These docs are still being worked on.","title":"Admin Access Policy"},{"location":"developers/misc-resources/adminpolicy/#v2-yield-tokens","text":"Contract ABI Address yDAIv2 JSON ydaiv2.iearn.eth yUSDCv2 JSON yusdcv2.iearn.eth yUSDTv2 JSON yusdtv2.iearn.eth yTUSDv2 JSON ytusdv2.iearn.eth","title":"v2 Yield Tokens"},{"location":"developers/misc-resources/adminpolicy/#ydaiv2","text":"None \u2705","title":"yDAIv2"},{"location":"developers/misc-resources/adminpolicy/#yusdcv2","text":"None \u2705","title":"yUSDCv2"},{"location":"developers/misc-resources/adminpolicy/#yusdtv2","text":"set_new_APR \u2705 No interaction with funds. APR used for stateless recommend() function. Can be used to change the recommended provider. The owner could replace the existing contract to a controlled contract that could suggest a specific lending provider. set_new_COMPOUND \u26a0\ufe0f Could access funds via malicious lending contract. Sets the downstream address for Compound. The owner could replicate the compound mint() function call and force the APR change (with the vector mentioned in set_new_APR) and withdraw funds. This method is implemented to allow adding Compound if they support the underlying token. set_new_DTOKEN \u2705 No interaction with funds. Can only update the ID at dydx, no way to influence any other action. This method is implemented to allow adding dYdX if they support the underlying token. set_new_FULCRUM \u26a0\ufe0f As per set_new_COMPOUND","title":"yUSDTv2"},{"location":"developers/misc-resources/adminpolicy/#ytusdv2","text":"set_new_APR \u2705 set_new_COMPOUND \u26a0\ufe0f set_new_DTOKEN \u2705","title":"yTUSDv2"},{"location":"developers/misc-resources/adminpolicy/#utility-contracts","text":"Contract ABI Address APROracle JSON apr.iearn.eth UniswapROI JSON uniroi.iearn.eth UniswapAPR JSON uniapr.iearn.eth APRWithPoolOracle JSON apradj.iearn.eth IEarnAPRWithPool JSON iapradj.iearn.eth","title":"Utility Contracts"},{"location":"developers/misc-resources/adminpolicy/#iearnaprwithpool","text":"No interaction with funds. APR used for stateless recommend() function. Can be used to change the recommended provider. The owner could influence the calculation to a specific lending provider. addAToken \u2705 addAUniToken \u2705 addCToken \u2705 addDToken \u2705 addIToken \u2705 addPool \u2705 addYToken \u2705 set_new_APR \u2705 set_new_UNI \u2705 set_new_UNIAPR \u2705 set_new_UNIROI \u2705","title":"IEarnAPRWithPool"},{"location":"developers/misc-resources/adminpolicy/#aprwithpooloracle","text":"No interaction with funds. APR used for stateless recommend() function. Can be used to change the recommended provider. The owner could influence the calculation to a specific lending provider. set_new_AAVE \u2705 set_new_DDEX \u2705 set_new_DYDX \u2705 set_new_Modifier \u2705 set_new_Ratio \u2705 set_new_blocksPerYear \u2705","title":"APRWithPoolOracle"},{"location":"developers/misc-resources/adminpolicy/#uniswaproi","text":"None \u2705","title":"UniswapROI"},{"location":"developers/misc-resources/adminpolicy/#uniswapapr","text":"No interaction with funds. set_new_blocksPerYear \u2705","title":"UniswapAPR"},{"location":"developers/misc-resources/adminpolicy/#lending-providers","text":"compound.finance aave.com ddex.io dydx.exchange fulcrum.trade","title":"Lending Providers"},{"location":"developers/misc-resources/smart-contract-api/","text":"Smart Contract API","title":"Smart Contract API"},{"location":"developers/misc-resources/smart-contract-api/#smart-contract-api","text":"","title":"Smart Contract API"},{"location":"developers/misc-resources/smart-contract-api/apr/","text":"APR initializeFactory {% tabs %} initializeFactory (( template : address )); {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . initializeFactory ( template ). send (); {% endtab %} Parameter Description template Ethereum address of exchange template createExchange {% tabs %} createExchange ( token : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . initializeFactory ( token ). send (); {% endtab %} Parameter Type Description token address Ethereum address of an ERC20 token Returns address Ethereum address of a Uniswap exchange getExchange {% tabs %} @ constant getExchange ( token : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getExchange ( token ). call (); {% endtab %} Parameter Type Description token address Ethereum address of an ERC20 token Returns address Ethereum address of a Uniswap exchange getToken {% tabs %} @ constant getToken ( exchange : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getToken ( exchange ). call (); {% endtab %} Parameter Type Description exchange address Ethereum address of a Uniswap exchange Returns address Ethereum address of an ERC20 token getTokenWithId {% tabs %} @ constant getTokenWithId ( token_id : uint256 ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getToken ( exchange ). call (); {% endtab %} Parameter Type Description token_id uint256 Uniswap ID for an ERC20 token Returns address Ethereum address of an ERC20 token","title":"APR"},{"location":"developers/misc-resources/smart-contract-api/apr/#apr","text":"","title":"APR"},{"location":"developers/misc-resources/smart-contract-api/apr/#initializefactory","text":"{% tabs %} initializeFactory (( template : address )); {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . initializeFactory ( template ). send (); {% endtab %} Parameter Description template Ethereum address of exchange template","title":"initializeFactory"},{"location":"developers/misc-resources/smart-contract-api/apr/#createexchange","text":"{% tabs %} createExchange ( token : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . initializeFactory ( token ). send (); {% endtab %} Parameter Type Description token address Ethereum address of an ERC20 token Returns address Ethereum address of a Uniswap exchange","title":"createExchange"},{"location":"developers/misc-resources/smart-contract-api/apr/#getexchange","text":"{% tabs %} @ constant getExchange ( token : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getExchange ( token ). call (); {% endtab %} Parameter Type Description token address Ethereum address of an ERC20 token Returns address Ethereum address of a Uniswap exchange","title":"getExchange"},{"location":"developers/misc-resources/smart-contract-api/apr/#gettoken","text":"{% tabs %} @ constant getToken ( exchange : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getToken ( exchange ). call (); {% endtab %} Parameter Type Description exchange address Ethereum address of a Uniswap exchange Returns address Ethereum address of an ERC20 token","title":"getToken"},{"location":"developers/misc-resources/smart-contract-api/apr/#gettokenwithid","text":"{% tabs %} @ constant getTokenWithId ( token_id : uint256 ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getToken ( exchange ). call (); {% endtab %} Parameter Type Description token_id uint256 Uniswap ID for an ERC20 token Returns address Ethereum address of an ERC20 token","title":"getTokenWithId"},{"location":"developers/misc-resources/smart-contract-api/itoken/","text":"iToken setup {% tabs %} // Can only be called by factory contract during createExchange() setup ( token_addr : address ) : {% endtab %} {% tab title=\"Web3\" %} // Can only be called by factory contract during createExchange() exchangeContract . methods . setup (( token : String )). send (); {% endtab %} Parameter Description token_addr Ethereum address of an ERC20 Token addLiquidity {% tabs %} @ payable addLiquidity ( min_liquidity : uint256 , max_tokens : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . addLiquidity ( min_liquidity , max_tokens , deadline ) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Amount of ETH added min_liquidity uint256 Minimum minted liquidity max_tokens uint256 Maximum ERC20 tokens added deadline uint256 Transaction deadline Returns uint256 Amount of liquidity tokens minted removeLiquidity {% tabs %} removeLiquidity ( amount : uint256 ; min_eth : uint256 , min_tokens : uint256 , deadline : uint256 ) : ( uint256 , uint256 ) {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . removeLiquidity ( amount , min_eth , min_tokens , deadline ) . send (); {% endtab %} Parameter Type Description amount uint256 Amount of liquidity burned min_eth uint256 Minimum ETH removed min_tokens uint256 Minimum ERC20 tokens removed deadline uint256 Transaction deadline Returns uint256 Amount of ETH removed uint256 Amount of ERC20 tokens removed. default {% tabs %} // Default function in Vyper replaces the \"fallback\" function in Solidity @ payable __default__ () : {% endtab %} {% tab title=\"Web3\" %} web3 . eth . sendTransaction ({ value : ethAmount }); {% endtab %} Parameter Type Description msg.value uint256 Amount of ETH sold ethToTokenSwapInput {% tabs %} @ payable ethToTokenSwapInput ( min_tokens : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . ethToTokenSwapInput ( min_liquidity , max_tokens , deadline ) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Amount of ETH sold min_tokens uint256 Minimum ERC20 tokens bought deadline uint256 Transaction deadline Returns uint256 Amount of ERC20 tokens bought ethToTokenTransferInput {% tabs %} @ payable ethToTokenTransferInput ( min_tokens : uint256 , deadline : uint256 , recipient : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . ethToTokenTransferInput ( min_liquidity , max_tokens , deadline , recipient ) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Amount of ETH sold min_tokens uint256 Minimum ERC20 tokens bought deadline uint256 Transaction deadline recipient address Address that receives ERC20 tokens Returns uint256 Amount of ERC20 tokens bought ethToTokenSwapOutput {% tabs %} @ payable ethToTokenSwapOutput ( tokens_bought : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . ethToTokenSwapOutput ( tokens_bought , deadline ) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Maximum ETH sold tokens_bought uint256 Amount of ERC20 tokens bought deadline uint256 Transaction deadline Returns uint256 Amount of ETH sold ethToTokenTransferOutput {% tabs %} @ payable ethToTokenTransferOutput ( tokens_bought : uint256 , deadline : uint256 , recipient : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . ethToTokenTransferOutput ( tokens_bought , deadline , ( recipient : String )) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Maximum ETH sold tokens_bought uint256 Amount of ERC20 tokens bought deadline uint256 Transaction deadline recipient address Address that receives ERC20 tokens Returns uint256 Amount of ETH sold tokenToEthSwapInput {% tabs %} tokenToEthSwapInput ( tokens_sold : uint256 , min_eth : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToEthSwapInput ( tokens_sold , min_eth , deadline ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of ERC20 tokens sold min_eth uint256 Minimum ETH bought deadline uint256 Transaction deadline Returns uint256 Amount of ETH bought tokenToEthTransferInput {% tabs %} tokenToEthTransferInput ( tokens_sold : uint256 , min_eth : uint256 , deadline : uint256 , recipient : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToEthTransferInput ( tokens_sold , min_eth , deadline , recipient ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of ERC20 tokens sold min_eth uint256 Minimum ETH bought deadline uint256 Transaction deadline recipient address Address that receives ETH Returns uint256 Amount of ETH bought tokenToEthSwapOutput {% tabs %} tokenToEthSwapOutput ( eth_bought : uint256 , max_tokens : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToEthSwapOutput ( eth_bought , max_tokens , ( deadline : Integer )) . send (); {% endtab %} Parameter Type Description eth_bought uint256 Amount of ETH bought max_tokens uint256 Maximum ERC20 tokens sold deadline uint256 Transaction deadline Returns uint256 Amount of ERC20 tokens sold tokenToEthTransferOutput {% tabs %} tokenToEthTransferOutput ( eth_bought : uint256 , max_tokens : uint256 , deadline : uint256 , recipient : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToEthTransferOutput ( eth_bought , max_tokens , ( deadline : Integer ), ( recipient : String ) ) . send (); {% endtab %} Parameter Type Description eth_bought uint256 Amount of ETH bought max_tokens uint256 Maximum ERC20 tokens sold deadline uint256 Transaction deadline recipient address Address that receives ETH Returns uint256 Amount of ERC20 tokens sold tokenToTokenSwapInput {% tabs %} tokenToTokenSwapInput ( tokens_sold : uint256 , min_tokens_bought : uint256 , min_eth_bought : uint256 , deadline : uint256 , token_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenSwapInput ( tokens_sold , min_tokens_bought , min_eth_bought , deadline , token_addr ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of input ERC20 tokens sold min_tokens_bought uint256 Minimum output ERC20 tokens bought min_eth_bought uint256 Minimum ETH bought as intermediary deadline uint256 Transaction deadline token_addr address Address of output ERC20 token Returns uint256 Amount of output ERC20 tokens bought tokenToTokenTransferInput {% tabs %} tokenToTokenTransferInput ( tokens_sold : uint256 , min_tokens_bought : uint256 , min_eth_bought : uint256 , deadline : uint256 , recipient : address token_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenTransferInput ( tokens_sold , min_tokens_bought , min_eth_bought , deadline , recipient , token_addr ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of input ERC20 tokens sold min_tokens_bought uint256 Minimum output ERC20 tokens bought min_eth_bought uint256 Minimum ETH bought as intermediary deadline uint256 Transaction deadline recipient address Address that receives output ERC20 tokens token_addr address Address of output ERC20 token Returns uint256 Amount of output ERC20 tokens bought tokenToTokenSwapOutput {% tabs %} tokenToTokenSwapOutput ( tokens_bought : uint256 , max_tokens_sold : uint256 , max_eth_sold : uint256 , deadline : uint256 , token_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenSwapOutput ( tokens_bought , max_tokens_sold , max_eth_sold , deadline , token_addr ) . send (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of output ERC20 tokens bought max_tokens_sold uint256 Maximum input ERC20 tokens bought max_eth_sold uint256 Maximum ETH bought as intermediary deadline uint256 Transaction deadline token_addr address Address of output ERC20 token Returns uint256 Amount of input ERC20 tokens sold tokenToTokenTransferOutput {% tabs %} tokenToTokenTransferOutput ( tokens_bought : uint256 , max_tokens_sold : uint256 , max_eth_sold : uint256 , deadline : uint256 , recipient : address , token_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenTransferOutput ( tokens_bought , max_tokens_sold , max_eth_sold , deadline , recipient , token_addr ) . send (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of output ERC20 tokens bought max_tokens_sold uint256 Maximum input ERC20 tokens bought max_eth_sold uint256 Maximum ETH bought as intermediary deadline uint256 Transaction deadline recipient address Address that receives output ERC20 tokens token_addr address Address of output ERC20 token Returns uint256 Amount of input ERC20 tokens sold tokenToExchangeSwapInput {% tabs %} tokenToTokenSwapInput ( tokens_sold : uint256 , min_tokens_bought : uint256 , min_eth_bought : uint256 , deadline : uint256 , exchange_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenSwapInput ( tokens_sold , min_tokens_bought , min_eth_bought , deadline , exchange_addr ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of input ERC20 tokens sold min_tokens_bought uint256 Minimum output ERC20 tokens bought min_eth_bought uint256 Minimum ETH bought as intermediary deadline uint256 Transaction deadline exchange_addr address Address of output ERC20 token exchange Returns uint256 Amount of output ERC20 tokens bought tokenToExchangeTransferInput {% tabs %} tokenToExchangeTransferInput ( tokens_sold : uint256 , min_tokens_bought : uint256 , min_eth_bought : uint256 , deadline : uint256 , recipient : address exchange_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToExchangeTransferInput ( tokens_sold , min_tokens_bought , min_eth_bought , deadline , recipient , exchange_addr ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of input ERC20 tokens sold min_tokens_bought uint256 Minimum output ERC20 tokens bought min_eth_bought uint256 Minimum ETH bought as intermediary deadline uint256 Transaction deadline recipient address Address that receives output ERC20 tokens exchange_addr address Address of output ERC20 token exchange Returns uint256 Amount of output ERC20 tokens bought tokenToExchangeSwapOutput {% tabs %} tokenToExchangeSwapOutput ( tokens_bought : uint256 , max_tokens_sold : uint256 , max_eth_sold : uint256 , deadline : uint256 , exchange_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToExchangeSwapOutput ( tokens_bought , max_tokens_sold , max_eth_sold , deadline , exchange_addr ) . send (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of output ERC20 tokens bought max_tokens_sold uint256 Maximum input ERC20 tokens bought max_eth_sold uint256 Maximum ETH bought as intermediary deadline uint256 Transaction deadline exchange_addr address Address of output ERC20 token exchange Returns uint256 Amount of input ERC20 tokens sold tokenToExchangeTransferOutput {% tabs %} tokenToExchangeTransferOutput ( tokens_bought : uint256 , max_tokens_sold : uint256 , max_eth_sold : uint256 , deadline : uint256 , recipient : address , exchange_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToExchangeTransferOutput ( tokens_bought , max_tokens_sold , max_eth_sold , deadline , recipient , exchange_addr ) . send (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of output ERC20 tokens bought max_tokens_sold uint256 Maximum input ERC20 tokens bought max_eth_sold uint256 Maximum ETH bought as intermediary deadline uint256 Transaction deadline recipient address Address that receives output ERC20 tokens exchange_addr address Address of output ERC20 token exchange Returns uint256 Amount of input ERC20 tokens sold getEthToTokenInputPrice {% tabs %} @ constant getEthToTokenInputPrice ( eth_sold : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . getEthToTokenInputPrice ( eth_sold ). call (); {% endtab %} Parameter Type Description eth_sold uint256 Amount of ETH sold Returns uint256 Amount of ERC20 tokens that can be bought getEthToTokenOutputPrice {% tabs %} @ constant getEthToTokenOutputPrice ( tokens_bought : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . getEthToTokenOutputPrice ( tokens_bought ). call (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of ERC20 tokens bought Returns uint256 Amount of ETH that must be sold getTokenToEthInputPrice {% tabs %} @ constant getTokenToEthInputPrice ( tokens_sold : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . getTokenToEthInputPrice ( tokens_sold ). call (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of ERC20 tokens sold Returns uint256 Amount of ETH that can be bought getTokenToEthOutputPrice {% tabs %} @ constant getTokenToEthOutputPrice ( eth_bought : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . getTokenToEthOutputPrice ( eth_bought ). call (); {% endtab %} Parameter Type Description eth_bought uint256 Amount of ETH bought Returns uint256 Amount of ERC20 tokens that must be sold tokenAddress {% tabs %} @ constant tokenAddress () : address {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenAddress (). call (); {% endtab %} Returns address Address of ERC20 token sold on exchange factoryAddress {% tabs %} @ constant factoryAddress () : address {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . factoryAddress (). call (); {% endtab %} Returns address Address of factory that created exchange name {% tabs %} // all exchange contracts have the same name @ constant name () : bytes32 // Uniswap V1 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenAddress (). call (); {% endtab %} Returns bytes32 Name of liquidity token symbol {% tabs %} // all exchange contracts have the same symbol @ constant symbol () : bytes32 // UNI-V1 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenAddress (). call (); {% endtab %} Returns bytes32 Symbol of liquidity token decimals {% tabs %} // all exchange contracts have the same decimals @ constant decimals () : uint256 // 18 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . decimals (). call (); {% endtab %} Returns uint256 Decimals of liquidity token balanceOf {% tabs %} @ constant balanceOf ( _owner : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . balanceOf ( _owner ). call (); {% endtab %} Parameter Type Description _owner address Ethereum address Returns uint256 Liquidity token balance of address transfer {% tabs %} transfer ( _to : address , _value : uint256 ) : bool {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . transfer ( _to , _value ). send (); {% endtab %} Parameter Type Description _to address Recipient address _value uint256 Amount transferred Returns bool True if successful. Reverts or false on failure transferFrom {% tabs %} transferFrom ( _from : address , _to : address , _value : uint256 ) : bool {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . transferFrom ( _from , _to , _value ). send (); {% endtab %} Parameter Type Description _from address Sender address _to address Recipient address _value uint256 Amount transferred Returns bool True if successful. Reverts or false on failure approve {% tabs %} approve ( _spender : address , _value : uint256 ) : bool {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . approve ( _spender , _value ). send (); {% endtab %} Parameter Type Description _spender address Address of approved spender _value uint256 Spender allowance Returns bool True if successful. Reverts or false on failure allowance {% tabs %} allowance ( _owner : address , _spender : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . allowance ( _owner , _spender ). call (); {% endtab %} Parameter Type Description _owner address Address of liquidity token owner _spender uint256 Address of approved spender Returns uint256 Spender allowance","title":"iToken"},{"location":"developers/misc-resources/smart-contract-api/itoken/#itoken","text":"","title":"iToken"},{"location":"developers/misc-resources/smart-contract-api/itoken/#setup","text":"{% tabs %} // Can only be called by factory contract during createExchange() setup ( token_addr : address ) : {% endtab %} {% tab title=\"Web3\" %} // Can only be called by factory contract during createExchange() exchangeContract . methods . setup (( token : String )). send (); {% endtab %} Parameter Description token_addr Ethereum address of an ERC20 Token","title":"setup"},{"location":"developers/misc-resources/smart-contract-api/itoken/#addliquidity","text":"{% tabs %} @ payable addLiquidity ( min_liquidity : uint256 , max_tokens : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . addLiquidity ( min_liquidity , max_tokens , deadline ) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Amount of ETH added min_liquidity uint256 Minimum minted liquidity max_tokens uint256 Maximum ERC20 tokens added deadline uint256 Transaction deadline Returns uint256 Amount of liquidity tokens minted","title":"addLiquidity"},{"location":"developers/misc-resources/smart-contract-api/itoken/#removeliquidity","text":"{% tabs %} removeLiquidity ( amount : uint256 ; min_eth : uint256 , min_tokens : uint256 , deadline : uint256 ) : ( uint256 , uint256 ) {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . removeLiquidity ( amount , min_eth , min_tokens , deadline ) . send (); {% endtab %} Parameter Type Description amount uint256 Amount of liquidity burned min_eth uint256 Minimum ETH removed min_tokens uint256 Minimum ERC20 tokens removed deadline uint256 Transaction deadline Returns uint256 Amount of ETH removed uint256 Amount of ERC20 tokens removed.","title":"removeLiquidity"},{"location":"developers/misc-resources/smart-contract-api/itoken/#default","text":"{% tabs %} // Default function in Vyper replaces the \"fallback\" function in Solidity @ payable __default__ () : {% endtab %} {% tab title=\"Web3\" %} web3 . eth . sendTransaction ({ value : ethAmount }); {% endtab %} Parameter Type Description msg.value uint256 Amount of ETH sold","title":"default"},{"location":"developers/misc-resources/smart-contract-api/itoken/#ethtotokenswapinput","text":"{% tabs %} @ payable ethToTokenSwapInput ( min_tokens : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . ethToTokenSwapInput ( min_liquidity , max_tokens , deadline ) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Amount of ETH sold min_tokens uint256 Minimum ERC20 tokens bought deadline uint256 Transaction deadline Returns uint256 Amount of ERC20 tokens bought","title":"ethToTokenSwapInput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#ethtotokentransferinput","text":"{% tabs %} @ payable ethToTokenTransferInput ( min_tokens : uint256 , deadline : uint256 , recipient : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . ethToTokenTransferInput ( min_liquidity , max_tokens , deadline , recipient ) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Amount of ETH sold min_tokens uint256 Minimum ERC20 tokens bought deadline uint256 Transaction deadline recipient address Address that receives ERC20 tokens Returns uint256 Amount of ERC20 tokens bought","title":"ethToTokenTransferInput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#ethtotokenswapoutput","text":"{% tabs %} @ payable ethToTokenSwapOutput ( tokens_bought : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . ethToTokenSwapOutput ( tokens_bought , deadline ) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Maximum ETH sold tokens_bought uint256 Amount of ERC20 tokens bought deadline uint256 Transaction deadline Returns uint256 Amount of ETH sold","title":"ethToTokenSwapOutput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#ethtotokentransferoutput","text":"{% tabs %} @ payable ethToTokenTransferOutput ( tokens_bought : uint256 , deadline : uint256 , recipient : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . ethToTokenTransferOutput ( tokens_bought , deadline , ( recipient : String )) . send ({ value : ethValue }); {% endtab %} Parameter Type Description msg.value uint256 Maximum ETH sold tokens_bought uint256 Amount of ERC20 tokens bought deadline uint256 Transaction deadline recipient address Address that receives ERC20 tokens Returns uint256 Amount of ETH sold","title":"ethToTokenTransferOutput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentoethswapinput","text":"{% tabs %} tokenToEthSwapInput ( tokens_sold : uint256 , min_eth : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToEthSwapInput ( tokens_sold , min_eth , deadline ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of ERC20 tokens sold min_eth uint256 Minimum ETH bought deadline uint256 Transaction deadline Returns uint256 Amount of ETH bought","title":"tokenToEthSwapInput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentoethtransferinput","text":"{% tabs %} tokenToEthTransferInput ( tokens_sold : uint256 , min_eth : uint256 , deadline : uint256 , recipient : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToEthTransferInput ( tokens_sold , min_eth , deadline , recipient ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of ERC20 tokens sold min_eth uint256 Minimum ETH bought deadline uint256 Transaction deadline recipient address Address that receives ETH Returns uint256 Amount of ETH bought","title":"tokenToEthTransferInput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentoethswapoutput","text":"{% tabs %} tokenToEthSwapOutput ( eth_bought : uint256 , max_tokens : uint256 , deadline : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToEthSwapOutput ( eth_bought , max_tokens , ( deadline : Integer )) . send (); {% endtab %} Parameter Type Description eth_bought uint256 Amount of ETH bought max_tokens uint256 Maximum ERC20 tokens sold deadline uint256 Transaction deadline Returns uint256 Amount of ERC20 tokens sold","title":"tokenToEthSwapOutput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentoethtransferoutput","text":"{% tabs %} tokenToEthTransferOutput ( eth_bought : uint256 , max_tokens : uint256 , deadline : uint256 , recipient : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToEthTransferOutput ( eth_bought , max_tokens , ( deadline : Integer ), ( recipient : String ) ) . send (); {% endtab %} Parameter Type Description eth_bought uint256 Amount of ETH bought max_tokens uint256 Maximum ERC20 tokens sold deadline uint256 Transaction deadline recipient address Address that receives ETH Returns uint256 Amount of ERC20 tokens sold","title":"tokenToEthTransferOutput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentotokenswapinput","text":"{% tabs %} tokenToTokenSwapInput ( tokens_sold : uint256 , min_tokens_bought : uint256 , min_eth_bought : uint256 , deadline : uint256 , token_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenSwapInput ( tokens_sold , min_tokens_bought , min_eth_bought , deadline , token_addr ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of input ERC20 tokens sold min_tokens_bought uint256 Minimum output ERC20 tokens bought min_eth_bought uint256 Minimum ETH bought as intermediary deadline uint256 Transaction deadline token_addr address Address of output ERC20 token Returns uint256 Amount of output ERC20 tokens bought","title":"tokenToTokenSwapInput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentotokentransferinput","text":"{% tabs %} tokenToTokenTransferInput ( tokens_sold : uint256 , min_tokens_bought : uint256 , min_eth_bought : uint256 , deadline : uint256 , recipient : address token_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenTransferInput ( tokens_sold , min_tokens_bought , min_eth_bought , deadline , recipient , token_addr ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of input ERC20 tokens sold min_tokens_bought uint256 Minimum output ERC20 tokens bought min_eth_bought uint256 Minimum ETH bought as intermediary deadline uint256 Transaction deadline recipient address Address that receives output ERC20 tokens token_addr address Address of output ERC20 token Returns uint256 Amount of output ERC20 tokens bought","title":"tokenToTokenTransferInput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentotokenswapoutput","text":"{% tabs %} tokenToTokenSwapOutput ( tokens_bought : uint256 , max_tokens_sold : uint256 , max_eth_sold : uint256 , deadline : uint256 , token_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenSwapOutput ( tokens_bought , max_tokens_sold , max_eth_sold , deadline , token_addr ) . send (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of output ERC20 tokens bought max_tokens_sold uint256 Maximum input ERC20 tokens bought max_eth_sold uint256 Maximum ETH bought as intermediary deadline uint256 Transaction deadline token_addr address Address of output ERC20 token Returns uint256 Amount of input ERC20 tokens sold","title":"tokenToTokenSwapOutput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentotokentransferoutput","text":"{% tabs %} tokenToTokenTransferOutput ( tokens_bought : uint256 , max_tokens_sold : uint256 , max_eth_sold : uint256 , deadline : uint256 , recipient : address , token_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenTransferOutput ( tokens_bought , max_tokens_sold , max_eth_sold , deadline , recipient , token_addr ) . send (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of output ERC20 tokens bought max_tokens_sold uint256 Maximum input ERC20 tokens bought max_eth_sold uint256 Maximum ETH bought as intermediary deadline uint256 Transaction deadline recipient address Address that receives output ERC20 tokens token_addr address Address of output ERC20 token Returns uint256 Amount of input ERC20 tokens sold","title":"tokenToTokenTransferOutput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentoexchangeswapinput","text":"{% tabs %} tokenToTokenSwapInput ( tokens_sold : uint256 , min_tokens_bought : uint256 , min_eth_bought : uint256 , deadline : uint256 , exchange_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToTokenSwapInput ( tokens_sold , min_tokens_bought , min_eth_bought , deadline , exchange_addr ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of input ERC20 tokens sold min_tokens_bought uint256 Minimum output ERC20 tokens bought min_eth_bought uint256 Minimum ETH bought as intermediary deadline uint256 Transaction deadline exchange_addr address Address of output ERC20 token exchange Returns uint256 Amount of output ERC20 tokens bought","title":"tokenToExchangeSwapInput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentoexchangetransferinput","text":"{% tabs %} tokenToExchangeTransferInput ( tokens_sold : uint256 , min_tokens_bought : uint256 , min_eth_bought : uint256 , deadline : uint256 , recipient : address exchange_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToExchangeTransferInput ( tokens_sold , min_tokens_bought , min_eth_bought , deadline , recipient , exchange_addr ) . send (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of input ERC20 tokens sold min_tokens_bought uint256 Minimum output ERC20 tokens bought min_eth_bought uint256 Minimum ETH bought as intermediary deadline uint256 Transaction deadline recipient address Address that receives output ERC20 tokens exchange_addr address Address of output ERC20 token exchange Returns uint256 Amount of output ERC20 tokens bought","title":"tokenToExchangeTransferInput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentoexchangeswapoutput","text":"{% tabs %} tokenToExchangeSwapOutput ( tokens_bought : uint256 , max_tokens_sold : uint256 , max_eth_sold : uint256 , deadline : uint256 , exchange_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToExchangeSwapOutput ( tokens_bought , max_tokens_sold , max_eth_sold , deadline , exchange_addr ) . send (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of output ERC20 tokens bought max_tokens_sold uint256 Maximum input ERC20 tokens bought max_eth_sold uint256 Maximum ETH bought as intermediary deadline uint256 Transaction deadline exchange_addr address Address of output ERC20 token exchange Returns uint256 Amount of input ERC20 tokens sold","title":"tokenToExchangeSwapOutput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokentoexchangetransferoutput","text":"{% tabs %} tokenToExchangeTransferOutput ( tokens_bought : uint256 , max_tokens_sold : uint256 , max_eth_sold : uint256 , deadline : uint256 , recipient : address , exchange_addr : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenToExchangeTransferOutput ( tokens_bought , max_tokens_sold , max_eth_sold , deadline , recipient , exchange_addr ) . send (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of output ERC20 tokens bought max_tokens_sold uint256 Maximum input ERC20 tokens bought max_eth_sold uint256 Maximum ETH bought as intermediary deadline uint256 Transaction deadline recipient address Address that receives output ERC20 tokens exchange_addr address Address of output ERC20 token exchange Returns uint256 Amount of input ERC20 tokens sold","title":"tokenToExchangeTransferOutput"},{"location":"developers/misc-resources/smart-contract-api/itoken/#getethtotokeninputprice","text":"{% tabs %} @ constant getEthToTokenInputPrice ( eth_sold : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . getEthToTokenInputPrice ( eth_sold ). call (); {% endtab %} Parameter Type Description eth_sold uint256 Amount of ETH sold Returns uint256 Amount of ERC20 tokens that can be bought","title":"getEthToTokenInputPrice"},{"location":"developers/misc-resources/smart-contract-api/itoken/#getethtotokenoutputprice","text":"{% tabs %} @ constant getEthToTokenOutputPrice ( tokens_bought : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . getEthToTokenOutputPrice ( tokens_bought ). call (); {% endtab %} Parameter Type Description tokens_bought uint256 Amount of ERC20 tokens bought Returns uint256 Amount of ETH that must be sold","title":"getEthToTokenOutputPrice"},{"location":"developers/misc-resources/smart-contract-api/itoken/#gettokentoethinputprice","text":"{% tabs %} @ constant getTokenToEthInputPrice ( tokens_sold : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . getTokenToEthInputPrice ( tokens_sold ). call (); {% endtab %} Parameter Type Description tokens_sold uint256 Amount of ERC20 tokens sold Returns uint256 Amount of ETH that can be bought","title":"getTokenToEthInputPrice"},{"location":"developers/misc-resources/smart-contract-api/itoken/#gettokentoethoutputprice","text":"{% tabs %} @ constant getTokenToEthOutputPrice ( eth_bought : uint256 ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . getTokenToEthOutputPrice ( eth_bought ). call (); {% endtab %} Parameter Type Description eth_bought uint256 Amount of ETH bought Returns uint256 Amount of ERC20 tokens that must be sold","title":"getTokenToEthOutputPrice"},{"location":"developers/misc-resources/smart-contract-api/itoken/#tokenaddress","text":"{% tabs %} @ constant tokenAddress () : address {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenAddress (). call (); {% endtab %} Returns address Address of ERC20 token sold on exchange","title":"tokenAddress"},{"location":"developers/misc-resources/smart-contract-api/itoken/#factoryaddress","text":"{% tabs %} @ constant factoryAddress () : address {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . factoryAddress (). call (); {% endtab %} Returns address Address of factory that created exchange","title":"factoryAddress"},{"location":"developers/misc-resources/smart-contract-api/itoken/#name","text":"{% tabs %} // all exchange contracts have the same name @ constant name () : bytes32 // Uniswap V1 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenAddress (). call (); {% endtab %} Returns bytes32 Name of liquidity token","title":"name"},{"location":"developers/misc-resources/smart-contract-api/itoken/#symbol","text":"{% tabs %} // all exchange contracts have the same symbol @ constant symbol () : bytes32 // UNI-V1 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . tokenAddress (). call (); {% endtab %} Returns bytes32 Symbol of liquidity token","title":"symbol"},{"location":"developers/misc-resources/smart-contract-api/itoken/#decimals","text":"{% tabs %} // all exchange contracts have the same decimals @ constant decimals () : uint256 // 18 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . decimals (). call (); {% endtab %} Returns uint256 Decimals of liquidity token","title":"decimals"},{"location":"developers/misc-resources/smart-contract-api/itoken/#balanceof","text":"{% tabs %} @ constant balanceOf ( _owner : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . balanceOf ( _owner ). call (); {% endtab %} Parameter Type Description _owner address Ethereum address Returns uint256 Liquidity token balance of address","title":"balanceOf"},{"location":"developers/misc-resources/smart-contract-api/itoken/#transfer","text":"{% tabs %} transfer ( _to : address , _value : uint256 ) : bool {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . transfer ( _to , _value ). send (); {% endtab %} Parameter Type Description _to address Recipient address _value uint256 Amount transferred Returns bool True if successful. Reverts or false on failure","title":"transfer"},{"location":"developers/misc-resources/smart-contract-api/itoken/#transferfrom","text":"{% tabs %} transferFrom ( _from : address , _to : address , _value : uint256 ) : bool {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . transferFrom ( _from , _to , _value ). send (); {% endtab %} Parameter Type Description _from address Sender address _to address Recipient address _value uint256 Amount transferred Returns bool True if successful. Reverts or false on failure","title":"transferFrom"},{"location":"developers/misc-resources/smart-contract-api/itoken/#approve","text":"{% tabs %} approve ( _spender : address , _value : uint256 ) : bool {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . approve ( _spender , _value ). send (); {% endtab %} Parameter Type Description _spender address Address of approved spender _value uint256 Spender allowance Returns bool True if successful. Reverts or false on failure","title":"approve"},{"location":"developers/misc-resources/smart-contract-api/itoken/#allowance","text":"{% tabs %} allowance ( _owner : address , _spender : address ) : uint256 {% endtab %} {% tab title=\"Web3\" %} exchangeContract . methods . allowance ( _owner , _spender ). call (); {% endtab %} Parameter Type Description _owner address Address of liquidity token owner _spender uint256 Address of approved spender Returns uint256 Spender allowance","title":"allowance"},{"location":"developers/misc-resources/smart-contract-api/zap/","text":"Zap initializeFactory {% tabs %} initializeFactory (( template : address )); {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . initializeFactory ( template ). send (); {% endtab %} Parameter Description template Ethereum address of exchange template createExchange {% tabs %} createExchange ( token : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . initializeFactory ( token ). send (); {% endtab %} Parameter Type Description token address Ethereum address of an ERC20 token Returns address Ethereum address of a Uniswap exchange getExchange {% tabs %} @ constant getExchange ( token : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getExchange ( token ). call (); {% endtab %} Parameter Type Description token address Ethereum address of an ERC20 token Returns address Ethereum address of a Uniswap exchange getToken {% tabs %} @ constant getToken ( exchange : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getToken ( exchange ). call (); {% endtab %} Parameter Type Description exchange address Ethereum address of a Uniswap exchange Returns address Ethereum address of an ERC20 token getTokenWithId {% tabs %} @ constant getTokenWithId ( token_id : uint256 ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getToken ( exchange ). call (); {% endtab %} Parameter Type Description token_id uint256 Uniswap ID for an ERC20 token Returns address Ethereum address of an ERC20 token","title":"Zap"},{"location":"developers/misc-resources/smart-contract-api/zap/#zap","text":"","title":"Zap"},{"location":"developers/misc-resources/smart-contract-api/zap/#initializefactory","text":"{% tabs %} initializeFactory (( template : address )); {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . initializeFactory ( template ). send (); {% endtab %} Parameter Description template Ethereum address of exchange template","title":"initializeFactory"},{"location":"developers/misc-resources/smart-contract-api/zap/#createexchange","text":"{% tabs %} createExchange ( token : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . initializeFactory ( token ). send (); {% endtab %} Parameter Type Description token address Ethereum address of an ERC20 token Returns address Ethereum address of a Uniswap exchange","title":"createExchange"},{"location":"developers/misc-resources/smart-contract-api/zap/#getexchange","text":"{% tabs %} @ constant getExchange ( token : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getExchange ( token ). call (); {% endtab %} Parameter Type Description token address Ethereum address of an ERC20 token Returns address Ethereum address of a Uniswap exchange","title":"getExchange"},{"location":"developers/misc-resources/smart-contract-api/zap/#gettoken","text":"{% tabs %} @ constant getToken ( exchange : address ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getToken ( exchange ). call (); {% endtab %} Parameter Type Description exchange address Ethereum address of a Uniswap exchange Returns address Ethereum address of an ERC20 token","title":"getToken"},{"location":"developers/misc-resources/smart-contract-api/zap/#gettokenwithid","text":"{% tabs %} @ constant getTokenWithId ( token_id : uint256 ) : address {% endtab %} {% tab title=\"Web3\" %} factoryContract . methods . getToken ( exchange ). call (); {% endtab %} Parameter Type Description token_id uint256 Uniswap ID for an ERC20 token Returns address Ethereum address of an ERC20 token","title":"getTokenWithId"},{"location":"developers/misc-resources/smart-contract-integration/","text":"Smart Contract Integration","title":"Smart Contract Integration"},{"location":"developers/misc-resources/smart-contract-integration/#smart-contract-integration","text":"","title":"Smart Contract Integration"},{"location":"developers/misc-resources/smart-contract-integration/1split/","text":"1split Contract Address 1split.eth 1split.eth 1split.eth Interface {% tabs %} // Solidity Interface interface IOneSplit { function getExpectedReturn ( address fromToken , address toToken , uint256 amount , uint256 parts , uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken ) external view returns ( uint256 returnAmount , uint256 [] memory distribution // [Uniswap, Kyber, Bancor, Oasis] ); function swap ( address fromToken , address toToken , uint256 amount , uint256 minReturn , uint256 [] calldata distribution , // [Uniswap, Kyber, Bancor, Oasis] uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken ) external payable ; function goodSwap ( address fromToken , address toToken , uint256 amount , uint256 minReturn , uint256 parts , uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken ) external payable ; } {% endtab %}","title":"1split"},{"location":"developers/misc-resources/smart-contract-integration/1split/#1split","text":"Contract Address 1split.eth 1split.eth","title":"1split"},{"location":"developers/misc-resources/smart-contract-integration/1split/#1spliteth-interface","text":"{% tabs %} // Solidity Interface interface IOneSplit { function getExpectedReturn ( address fromToken , address toToken , uint256 amount , uint256 parts , uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken ) external view returns ( uint256 returnAmount , uint256 [] memory distribution // [Uniswap, Kyber, Bancor, Oasis] ); function swap ( address fromToken , address toToken , uint256 amount , uint256 minReturn , uint256 [] calldata distribution , // [Uniswap, Kyber, Bancor, Oasis] uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken ) external payable ; function goodSwap ( address fromToken , address toToken , uint256 amount , uint256 minReturn , uint256 parts , uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken ) external payable ; } {% endtab %}","title":"1split.eth Interface"},{"location":"developers/misc-resources/smart-contract-integration/aave/","text":"aave {% tabs %} // Solidity Interface interface LendingPoolCore { function getReserveCurrentLiquidityRate ( address _reserve ) external view returns ( uint256 liquidityRate ); } {% endtab %}","title":"aave"},{"location":"developers/misc-resources/smart-contract-integration/aave/#aave","text":"{% tabs %} // Solidity Interface interface LendingPoolCore { function getReserveCurrentLiquidityRate ( address _reserve ) external view returns ( uint256 liquidityRate ); } {% endtab %}","title":"aave"},{"location":"developers/misc-resources/smart-contract-integration/apr/","text":"apr Contract ABI Address APROracle JSON apr.iearn.eth IAPROracle Interface {% tabs %} // Solidity Interface interface IAPROracle { function recommendDAI () external view returns ( string memory ); function recommendETH () external view returns ( string memory ); function recommendUSDC () external view returns ( string memory ); function getAllCompoundAPR () external view returns ( uint256 cDAI , uint256 cBAT , uint256 cETH , uint256 cREP , uint256 cSAI , uint256 cUSDC , uint256 cWBTC , uint256 cZRC ); // Compound function getCDAIAPR () external view returns ( uint256 ); function getCBATAPR () external view returns ( uint256 ); function getCETHAPR () external view returns ( uint256 ); function getCREPAPR () external view returns ( uint256 ); function getCSAIAPR () external view returns ( uint256 ); function getCUSDCAPR () external view returns ( uint256 ); function getCWBTCAPR () external view returns ( uint256 ); function getCZRCAPR () external view returns ( uint256 ); function getCompoundAPR ( address token ) external view returns ( uint256 ); function getAllDyDxAPR () external view returns ( uint256 dSAI , uint256 dETH , uint256 dUSDC , uint256 dDAI ); // dYdX function getDyDxSAIAPR () external view returns ( uint256 ); function getDyDxETHAPR () external view returns ( uint256 ); function getDyDxUSDCAPR () external view returns ( uint256 ); function getDyDxDAIAPR () external view returns ( uint256 ); function getAllFulcrumAPR () external view returns ( uint256 iZRX , uint256 iREP , uint256 iKNC , uint256 iWBTC , uint256 iUSDC , uint256 iETH , uint256 iSAI , uint256 iDAI , uint256 iLINK , uint256 iSUSD ); // Fulcrum function getIZRXAPR () external view returns ( uint256 ); function getIREPAPR () external view returns ( uint256 ); function getIKNCAPR () external view returns ( uint256 ); function getIWBTCAPR () external view returns ( uint256 ); function getIUSDCAPR () external view returns ( uint256 ); function getIETHAPR () external view returns ( uint256 ); function getISAIAPR () external view returns ( uint256 ); function getIDAIAPR () external view returns ( uint256 ); function getILINKAPR () external view returns ( uint256 ); function getISUSDAPR () external view returns ( uint256 ); function getFulcrumAPR ( address token ) external view returns ( uint256 ); function getDyDxAPR ( uint256 marketId ) external view returns ( uint256 ); function getAllAaveAPR () external view returns ( uint256 aDAI , uint256 aTUSD , uint256 aUSDC , uint256 aUSDT , uint256 aSUSD , uint256 aBAT , uint256 aETH , uint256 aLINK , uint256 aKNC , uint256 aREP , uint256 aZRX , uint256 aSNX ); function getADAIAPR () external view returns ( uint256 ); function getATUSDAPR () external view returns ( uint256 ); function getAUSDCAPR () external view returns ( uint256 ); function getAUSDTAPR () external view returns ( uint256 ); function getASUSDAPR () external view returns ( uint256 ); function getALENDAPR () external view returns ( uint256 ); function getABATAPR () external view returns ( uint256 ); function getAETHAPR () external view returns ( uint256 ); function getALINKAPR () external view returns ( uint256 ); function getAKNCAPR () external view returns ( uint256 ); function getAREPAPR () external view returns ( uint256 ); function getAMKRAPR () external view returns ( uint256 ); function getAMANAAPR () external view returns ( uint256 ); function getAZRXAPR () external view returns ( uint256 ); function getASNXAPR () external view returns ( uint256 ); function getAWBTCAPR () external view returns ( uint256 ); function getAaveAPR ( address token ) external view returns ( uint256 ); } {% endtab %}","title":"apr"},{"location":"developers/misc-resources/smart-contract-integration/apr/#apr","text":"Contract ABI Address APROracle JSON apr.iearn.eth","title":"apr"},{"location":"developers/misc-resources/smart-contract-integration/apr/#iaproracle-interface","text":"{% tabs %} // Solidity Interface interface IAPROracle { function recommendDAI () external view returns ( string memory ); function recommendETH () external view returns ( string memory ); function recommendUSDC () external view returns ( string memory ); function getAllCompoundAPR () external view returns ( uint256 cDAI , uint256 cBAT , uint256 cETH , uint256 cREP , uint256 cSAI , uint256 cUSDC , uint256 cWBTC , uint256 cZRC ); // Compound function getCDAIAPR () external view returns ( uint256 ); function getCBATAPR () external view returns ( uint256 ); function getCETHAPR () external view returns ( uint256 ); function getCREPAPR () external view returns ( uint256 ); function getCSAIAPR () external view returns ( uint256 ); function getCUSDCAPR () external view returns ( uint256 ); function getCWBTCAPR () external view returns ( uint256 ); function getCZRCAPR () external view returns ( uint256 ); function getCompoundAPR ( address token ) external view returns ( uint256 ); function getAllDyDxAPR () external view returns ( uint256 dSAI , uint256 dETH , uint256 dUSDC , uint256 dDAI ); // dYdX function getDyDxSAIAPR () external view returns ( uint256 ); function getDyDxETHAPR () external view returns ( uint256 ); function getDyDxUSDCAPR () external view returns ( uint256 ); function getDyDxDAIAPR () external view returns ( uint256 ); function getAllFulcrumAPR () external view returns ( uint256 iZRX , uint256 iREP , uint256 iKNC , uint256 iWBTC , uint256 iUSDC , uint256 iETH , uint256 iSAI , uint256 iDAI , uint256 iLINK , uint256 iSUSD ); // Fulcrum function getIZRXAPR () external view returns ( uint256 ); function getIREPAPR () external view returns ( uint256 ); function getIKNCAPR () external view returns ( uint256 ); function getIWBTCAPR () external view returns ( uint256 ); function getIUSDCAPR () external view returns ( uint256 ); function getIETHAPR () external view returns ( uint256 ); function getISAIAPR () external view returns ( uint256 ); function getIDAIAPR () external view returns ( uint256 ); function getILINKAPR () external view returns ( uint256 ); function getISUSDAPR () external view returns ( uint256 ); function getFulcrumAPR ( address token ) external view returns ( uint256 ); function getDyDxAPR ( uint256 marketId ) external view returns ( uint256 ); function getAllAaveAPR () external view returns ( uint256 aDAI , uint256 aTUSD , uint256 aUSDC , uint256 aUSDT , uint256 aSUSD , uint256 aBAT , uint256 aETH , uint256 aLINK , uint256 aKNC , uint256 aREP , uint256 aZRX , uint256 aSNX ); function getADAIAPR () external view returns ( uint256 ); function getATUSDAPR () external view returns ( uint256 ); function getAUSDCAPR () external view returns ( uint256 ); function getAUSDTAPR () external view returns ( uint256 ); function getASUSDAPR () external view returns ( uint256 ); function getALENDAPR () external view returns ( uint256 ); function getABATAPR () external view returns ( uint256 ); function getAETHAPR () external view returns ( uint256 ); function getALINKAPR () external view returns ( uint256 ); function getAKNCAPR () external view returns ( uint256 ); function getAREPAPR () external view returns ( uint256 ); function getAMKRAPR () external view returns ( uint256 ); function getAMANAAPR () external view returns ( uint256 ); function getAZRXAPR () external view returns ( uint256 ); function getASNXAPR () external view returns ( uint256 ); function getAWBTCAPR () external view returns ( uint256 ); function getAaveAPR ( address token ) external view returns ( uint256 ); } {% endtab %}","title":"IAPROracle Interface"},{"location":"developers/misc-resources/smart-contract-integration/aprmap/","text":"aprmap Contract ABI Address IIEarnAPR JSON iapr.iearn.eth IIEarnAPR Interface {% tabs %} // Solidity Interface interface IIEarnAPR { function getSNX () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getUSDT () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getBAT () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getMKR () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getZRX () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getREP () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getKNC () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getWBTC () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getLINK () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getSUSD () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getDAI () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getETH () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getUSDC () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getAPROptions ( address _token ) external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function viewPool ( address _token ) external view returns ( address token , address unipool , uint256 created , string memory name , string memory symbol ); } {% endtab %}","title":"aprmap"},{"location":"developers/misc-resources/smart-contract-integration/aprmap/#aprmap","text":"Contract ABI Address IIEarnAPR JSON iapr.iearn.eth","title":"aprmap"},{"location":"developers/misc-resources/smart-contract-integration/aprmap/#iiearnapr-interface","text":"{% tabs %} // Solidity Interface interface IIEarnAPR { function getSNX () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getUSDT () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getBAT () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getMKR () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getZRX () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getREP () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getKNC () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getWBTC () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getLINK () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getSUSD () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getDAI () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getETH () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getUSDC () external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function getAPROptions ( address _token ) external view returns ( uint256 uniapr , uint256 capr , uint256 unicapr , uint256 iapr , uint256 uniiapr , uint256 aapr , uint256 uniaapr , uint256 dapr ); function viewPool ( address _token ) external view returns ( address token , address unipool , uint256 created , string memory name , string memory symbol ); } {% endtab %}","title":"IIEarnAPR Interface"},{"location":"developers/misc-resources/smart-contract-integration/aprmapwithpool/","text":"aprmapwithpool Contract ABI Address IIEarnAPRWithPool JSON iapradj.iearn.eth IIEarnAPRWithPool Interface {% tabs %} // Solidity Interface interface IIEarnAPRWithPool { function getAPROptions ( address _token ) external view returns ( uint256 _uniswap , uint256 _compound , uint256 _unicompound , uint256 _fulcrum , uint256 _unifulcrum , uint256 _aave , uint256 _uniaave , uint256 _dydx , uint256 _ddex , uint256 _lendf ); function getAPROptionsAdjusted ( address _token , uint256 _supply ) external view returns ( uint256 _uniswap , uint256 _compound , uint256 _unicompound , uint256 _fulcrum , uint256 _unifulcrum , uint256 _aave , uint256 _uniaave , uint256 _dydx , uint256 _ddex , uint256 _lendf ); function viewPool ( address _token ) external view returns ; } {% endtab %}","title":"aprmapwithpool"},{"location":"developers/misc-resources/smart-contract-integration/aprmapwithpool/#aprmapwithpool","text":"Contract ABI Address IIEarnAPRWithPool JSON iapradj.iearn.eth","title":"aprmapwithpool"},{"location":"developers/misc-resources/smart-contract-integration/aprmapwithpool/#iiearnaprwithpool-interface","text":"{% tabs %} // Solidity Interface interface IIEarnAPRWithPool { function getAPROptions ( address _token ) external view returns ( uint256 _uniswap , uint256 _compound , uint256 _unicompound , uint256 _fulcrum , uint256 _unifulcrum , uint256 _aave , uint256 _uniaave , uint256 _dydx , uint256 _ddex , uint256 _lendf ); function getAPROptionsAdjusted ( address _token , uint256 _supply ) external view returns ( uint256 _uniswap , uint256 _compound , uint256 _unicompound , uint256 _fulcrum , uint256 _unifulcrum , uint256 _aave , uint256 _uniaave , uint256 _dydx , uint256 _ddex , uint256 _lendf ); function viewPool ( address _token ) external view returns ; } {% endtab %}","title":"IIEarnAPRWithPool Interface"},{"location":"developers/misc-resources/smart-contract-integration/aprwithpool/","text":"aprwithpool Contract ABI Address APRWithPoolOracle JSON apradj.iearn.eth APRWithPoolOracle Interface {% tabs %} // Solidity Interface interface APRWithPoolOracle { function getLENDFAPR ( address token ) external view returns ( uint256 ); function getLENDFAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); function getDDEXAPR ( address token ) external view returns ( uint256 ); function getDDEXAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); function getCompoundAPR ( address token ) external view returns ( uint256 ); function getCompoundAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); function getFulcrumAPR ( address token ) external view returns ( uint256 ); function getFulcrumAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); function getDyDxAPR ( uint256 marketId ) external view returns ( uint256 ); function getDyDxAPRAdjusted ( uint256 marketId , uint256 _supply ) external view returns ( uint256 ); function getAaveCore () external view returns ( address ); function getAaveAPR ( address token ) external view returns ( uint256 ); function getAaveAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); } {% endtab %}","title":"aprwithpool"},{"location":"developers/misc-resources/smart-contract-integration/aprwithpool/#aprwithpool","text":"Contract ABI Address APRWithPoolOracle JSON apradj.iearn.eth","title":"aprwithpool"},{"location":"developers/misc-resources/smart-contract-integration/aprwithpool/#aprwithpooloracle-interface","text":"{% tabs %} // Solidity Interface interface APRWithPoolOracle { function getLENDFAPR ( address token ) external view returns ( uint256 ); function getLENDFAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); function getDDEXAPR ( address token ) external view returns ( uint256 ); function getDDEXAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); function getCompoundAPR ( address token ) external view returns ( uint256 ); function getCompoundAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); function getFulcrumAPR ( address token ) external view returns ( uint256 ); function getFulcrumAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); function getDyDxAPR ( uint256 marketId ) external view returns ( uint256 ); function getDyDxAPRAdjusted ( uint256 marketId , uint256 _supply ) external view returns ( uint256 ); function getAaveCore () external view returns ( address ); function getAaveAPR ( address token ) external view returns ( uint256 ); function getAaveAPRAdjusted ( address token , uint256 _supply ) external view returns ( uint256 ); } {% endtab %}","title":"APRWithPoolOracle Interface"},{"location":"developers/misc-resources/smart-contract-integration/compound/","text":"compound Contract Address CDAI 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643 CBAT 0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E CETH 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5 CREP 0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1 CSAI 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC CUSDC 0x39AA39c021dfbaE8faC545936693aC917d5E7563 CWBTC 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4 CZRX 0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407 Compound Interface {% tabs %} // Solidity Interface interface Compound { function supply ( address asset , uint amount ) external returns ( uint ); function withdraw ( address asset , uint requestedAmount ) external returns ( uint ); function getSupplyBalance ( address account , address asset ) view external returns ( uint ); function supplyRatePerBlock () external view returns ( uint ); function mint ( uint mintAmount ) external returns ( uint ); function redeem ( uint redeemTokens ) external returns ( uint ); function balanceOf ( address account ) external view returns ( uint ); } {% endtab %}","title":"compound"},{"location":"developers/misc-resources/smart-contract-integration/compound/#compound","text":"Contract Address CDAI 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643 CBAT 0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E CETH 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5 CREP 0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1 CSAI 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC CUSDC 0x39AA39c021dfbaE8faC545936693aC917d5E7563 CWBTC 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4 CZRX 0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407","title":"compound"},{"location":"developers/misc-resources/smart-contract-integration/compound/#compound-interface","text":"{% tabs %} // Solidity Interface interface Compound { function supply ( address asset , uint amount ) external returns ( uint ); function withdraw ( address asset , uint requestedAmount ) external returns ( uint ); function getSupplyBalance ( address account , address asset ) view external returns ( uint ); function supplyRatePerBlock () external view returns ( uint ); function mint ( uint mintAmount ) external returns ( uint ); function redeem ( uint redeemTokens ) external returns ( uint ); function balanceOf ( address account ) external view returns ( uint ); } {% endtab %}","title":"Compound Interface"},{"location":"developers/misc-resources/smart-contract-integration/curvefi/","text":"curvefi Contract ABI Address ICurveFi JSON curve.fi ICurveFi Interface {% tabs %} // Solidity Interface interface ICurveFi { function get_virtual_price () external view returns ( uint256 ); function get_dy ( int128 i , int128 j , uint256 dx ) external view returns ( uint256 ); function get_dy_underlying ( int128 i , int128 j , uint256 dx ) external view returns ( uint256 ); function coins ( int128 arg0 ) external view returns ( address ); function underlying_coins ( int128 arg0 ) external view returns ( address ); function balances ( int128 arg0 ) external view returns ( uint256 ); function add_liquidity ( uint256 [ 2 ] calldata amounts , uint256 deadline ) external ; function exchange ( int128 i , int128 j , uint256 dx , uint256 min_dy , uint256 deadline ) external ; function exchange_underlying ( int128 i , int128 j , uint256 dx , uint256 min_dy , uint256 deadline ) external ; function remove_liquidity ( uint256 _amount , uint256 deadline , uint256 [ 2 ] calldata min_amounts ) external ; function remove_liquidity_imbalance ( uint256 [ 2 ] calldata amounts , uint256 deadline ) external ; } {% endtab %}","title":"curvefi"},{"location":"developers/misc-resources/smart-contract-integration/curvefi/#curvefi","text":"Contract ABI Address ICurveFi JSON curve.fi","title":"curvefi"},{"location":"developers/misc-resources/smart-contract-integration/curvefi/#icurvefi-interface","text":"{% tabs %} // Solidity Interface interface ICurveFi { function get_virtual_price () external view returns ( uint256 ); function get_dy ( int128 i , int128 j , uint256 dx ) external view returns ( uint256 ); function get_dy_underlying ( int128 i , int128 j , uint256 dx ) external view returns ( uint256 ); function coins ( int128 arg0 ) external view returns ( address ); function underlying_coins ( int128 arg0 ) external view returns ( address ); function balances ( int128 arg0 ) external view returns ( uint256 ); function add_liquidity ( uint256 [ 2 ] calldata amounts , uint256 deadline ) external ; function exchange ( int128 i , int128 j , uint256 dx , uint256 min_dy , uint256 deadline ) external ; function exchange_underlying ( int128 i , int128 j , uint256 dx , uint256 min_dy , uint256 deadline ) external ; function remove_liquidity ( uint256 _amount , uint256 deadline , uint256 [ 2 ] calldata min_amounts ) external ; function remove_liquidity_imbalance ( uint256 [ 2 ] calldata amounts , uint256 deadline ) external ; } {% endtab %}","title":"ICurveFi Interface"},{"location":"developers/misc-resources/smart-contract-integration/dydx/","text":"dydx {% tabs %} // Solidity Interface interface DyDx { struct val { uint256 value ; } struct set { uint128 borrow ; uint128 supply ; } function getEarningsRate () external view returns ( val memory ); function getMarketInterestRate ( uint256 marketId ) external view returns ( val memory ); function getMarketTotalPar ( uint256 marketId ) external view returns ( set memory ); } {% endtab %}","title":"dydx"},{"location":"developers/misc-resources/smart-contract-integration/dydx/#dydx","text":"{% tabs %} // Solidity Interface interface DyDx { struct val { uint256 value ; } struct set { uint128 borrow ; uint128 supply ; } function getEarningsRate () external view returns ( val memory ); function getMarketInterestRate ( uint256 marketId ) external view returns ( val memory ); function getMarketTotalPar ( uint256 marketId ) external view returns ( set memory ); } {% endtab %}","title":"dydx"},{"location":"developers/misc-resources/smart-contract-integration/fulcrum/","text":"fulcrum {% tabs %} // Solidity Interface interface Fulcrum { function supplyInterestRate () external view returns ( uint256 ); } {% endtab %}","title":"fulcrum"},{"location":"developers/misc-resources/smart-contract-integration/fulcrum/#fulcrum","text":"{% tabs %} // Solidity Interface interface Fulcrum { function supplyInterestRate () external view returns ( uint256 ); } {% endtab %}","title":"fulcrum"},{"location":"developers/misc-resources/smart-contract-integration/imanage/","text":"imanage Contract ABI Address IIEarnManager JSON imanage.iearn.eth IIEarnManager Interface {% tabs %} // Solidity Interface interface IIEarnManager { function recommendSNX () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendUSDT () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendBAT () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendMKR () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendZRX () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendREP () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendKNC () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendWBTC () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendLINK () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendSUSD () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendDAI () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendETH () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendUSDC () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommend ( address _token ) public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); } {% endtab %}","title":"imanage"},{"location":"developers/misc-resources/smart-contract-integration/imanage/#imanage","text":"Contract ABI Address IIEarnManager JSON imanage.iearn.eth","title":"imanage"},{"location":"developers/misc-resources/smart-contract-integration/imanage/#iiearnmanager-interface","text":"{% tabs %} // Solidity Interface interface IIEarnManager { function recommendSNX () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendUSDT () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendBAT () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendMKR () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendZRX () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendREP () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendKNC () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendWBTC () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendLINK () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendSUSD () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendDAI () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendETH () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommendUSDC () public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); function recommend ( address _token ) public view returns ( string memory choice , uint256 capr , uint256 iapr , uint256 aapr , uint256 dapr ); } {% endtab %}","title":"IIEarnManager Interface"},{"location":"developers/misc-resources/smart-contract-integration/interface/","text":"interface Contract ABI Address APROracle JSON apr.iearn.eth Uniswap_ETH_CDAIZAP JSON 0xB82674CfA16bb28D9b70bEC830fF24BAEC6B1337 iEther JSON 0x9Dde7cdd09dbed542fC422d18d89A589fA9fD4C0 APR Interface {% tabs %} // Solidity Interface interface IAPROracle { function recommendDAI () external view returns ( string memory ); function recommendETH () external view returns ( string memory ); function recommendUSDC () external view returns ( string memory ); function getAllCompoundAPR () external view returns ( uint256 cDAI , uint256 cBAT , uint256 cETH , uint256 cREP , uint256 cSAI , uint256 cUSDC , uint256 cWBTC , uint256 cZRC ); // Compound function getCDAIAPR () external view returns ( uint256 ); function getCBATAPR () external view returns ( uint256 ); function getCETHAPR () external view returns ( uint256 ); function getCREPAPR () external view returns ( uint256 ); function getCSAIAPR () external view returns ( uint256 ); function getCUSDCAPR () external view returns ( uint256 ); function getCWBTCAPR () external view returns ( uint256 ); function getCZRCAPR () public view returns ( uint256 ); function getCompoundAPR ( address token ) public view returns ( uint256 ); function getAllDyDxAPR () external view returns ( uint256 dSAI , uint256 dETH , uint256 dUSDC , uint256 dDAI ); // dYdX function getDyDxSAIAPR () public view returns ( uint256 ); function getDyDxETHAPR () public view returns ( uint256 ); function getDyDxUSDCAPR () public view returns ( uint256 ); function getDyDxDAIAPR () public view returns ( uint256 ); function getAllFulcrumAPR () external view returns ( uint256 iZRX , uint256 iREP , uint256 iKNC , uint256 iWBTC , uint256 iUSDC , uint256 iETH , uint256 iSAI , uint256 iDAI , uint256 iLINK , uint256 iSUSD ); // Fulcrum function getIZRXAPR () public view returns ( uint256 ); function getIREPAPR () public view returns ( uint256 ); function getIKNCAPR () public view returns ( uint256 ); function getIWBTCAPR () public view returns ( uint256 ); function getIUSDCAPR () public view returns ( uint256 ); function getIETHAPR () public view returns ( uint256 ); function getISAIAPR () public view returns ( uint256 ); function getIDAIAPR () public view returns ( uint256 ); function getILINKAPR () public view returns ( uint256 ); function getISUSDAPR () public view returns ( uint256 ); function getFulcrumAPR ( address token ) public view returns ( uint256 ); function getDyDxAPR ( uint256 marketId ) public view returns ( uint256 ); function getAllAaveAPR () external view returns ( uint256 aDAI , uint256 aTUSD , uint256 aUSDC , uint256 aUSDT , uint256 aSUSD , uint256 aBAT , uint256 aETH , uint256 aLINK , uint256 aKNC , uint256 aREP , uint256 aZRX , uint256 aSNX ); function getADAIAPR () public view returns ( uint256 ); function getATUSDAPR () public view returns ( uint256 ); function getAUSDCAPR () public view returns ( uint256 ); function getAUSDTAPR () public view returns ( uint256 ); function getASUSDAPR () public view returns ( uint256 ); function getALENDAPR () public view returns ( uint256 ); function getABATAPR () public view returns ( uint256 ); function getAETHAPR () public view returns ( uint256 ); function getALINKAPR () public view returns ( uint256 ); function getAKNCAPR () public view returns ( uint256 ); function getAREPAPR () public view returns ( uint256 ); function getAMKRAPR () public view returns ( uint256 ); function getAMANAAPR () public view returns ( uint256 ); function getAZRXAPR () public view returns ( uint256 ); function getASNXAPR () public view returns ( uint256 ); function getAWBTCAPR () public view returns ( uint256 ); function getAaveAPR ( address token ) public view returns ( uint256 ); } {% endtab %} ZAP Interface {% tabs %} // Solidity Interface interface IUniSwap_ETH_CDAIZap { function getExpectedReturn ( uint256 eth ) external view returns ( uint256 ); function LetsInvest ( address _towhomtoissue , uint256 _minReturn ) external payable returns ( uint ); function getUniswapExchangeContractAddress () external view returns ( address ); function Redeem ( address payable _towhomtosend , uint256 _amount ) external stopInEmergency returns ( uint ); function getMaxTokens ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _value ) external view returns ( uint ); function getEthBalance ( address _UniSwapExchangeContractAddress ) external view returns ( uint ); function getTokenReserves ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress ) external view returns ( uint ); function getTotalShares ( address _UniSwapExchangeContractAddress ) external view returns ( uint ); function getReturn ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _value ) external view returns ( uint , uint , uint ); function calcReturnETHFromShares ( uint _value ) external view returns ( uint , uint , uint ); function uniBalanceOf ( address _owner ) external view returns ( uint ); function cBalanceOf ( address _owner ) external view returns ( uint ); function calcReturnSharesFromETH ( uint _value ) external view returns ( uint ); function getTokenToEthOutputPrice ( uint _tokens ) external view returns ( uint ); function getSharesReturn ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _ethValue ) external view returns ( uint ); } {% endtab %} iToken Interface {% tabs %} // Solidity Interface interface IIEther { // Invest ETH function invest () external payable ; function calcPoolValueInETH () external view returns ( uint ); function getPricePerFullShare () external view returns ( uint ); // Redeem any invested tokens from the pool function redeem ( uint256 _shares ) external ; } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"interface"},{"location":"developers/misc-resources/smart-contract-integration/interface/#interface","text":"Contract ABI Address APROracle JSON apr.iearn.eth Uniswap_ETH_CDAIZAP JSON 0xB82674CfA16bb28D9b70bEC830fF24BAEC6B1337 iEther JSON 0x9Dde7cdd09dbed542fC422d18d89A589fA9fD4C0","title":"interface"},{"location":"developers/misc-resources/smart-contract-integration/interface/#apr-interface","text":"{% tabs %} // Solidity Interface interface IAPROracle { function recommendDAI () external view returns ( string memory ); function recommendETH () external view returns ( string memory ); function recommendUSDC () external view returns ( string memory ); function getAllCompoundAPR () external view returns ( uint256 cDAI , uint256 cBAT , uint256 cETH , uint256 cREP , uint256 cSAI , uint256 cUSDC , uint256 cWBTC , uint256 cZRC ); // Compound function getCDAIAPR () external view returns ( uint256 ); function getCBATAPR () external view returns ( uint256 ); function getCETHAPR () external view returns ( uint256 ); function getCREPAPR () external view returns ( uint256 ); function getCSAIAPR () external view returns ( uint256 ); function getCUSDCAPR () external view returns ( uint256 ); function getCWBTCAPR () external view returns ( uint256 ); function getCZRCAPR () public view returns ( uint256 ); function getCompoundAPR ( address token ) public view returns ( uint256 ); function getAllDyDxAPR () external view returns ( uint256 dSAI , uint256 dETH , uint256 dUSDC , uint256 dDAI ); // dYdX function getDyDxSAIAPR () public view returns ( uint256 ); function getDyDxETHAPR () public view returns ( uint256 ); function getDyDxUSDCAPR () public view returns ( uint256 ); function getDyDxDAIAPR () public view returns ( uint256 ); function getAllFulcrumAPR () external view returns ( uint256 iZRX , uint256 iREP , uint256 iKNC , uint256 iWBTC , uint256 iUSDC , uint256 iETH , uint256 iSAI , uint256 iDAI , uint256 iLINK , uint256 iSUSD ); // Fulcrum function getIZRXAPR () public view returns ( uint256 ); function getIREPAPR () public view returns ( uint256 ); function getIKNCAPR () public view returns ( uint256 ); function getIWBTCAPR () public view returns ( uint256 ); function getIUSDCAPR () public view returns ( uint256 ); function getIETHAPR () public view returns ( uint256 ); function getISAIAPR () public view returns ( uint256 ); function getIDAIAPR () public view returns ( uint256 ); function getILINKAPR () public view returns ( uint256 ); function getISUSDAPR () public view returns ( uint256 ); function getFulcrumAPR ( address token ) public view returns ( uint256 ); function getDyDxAPR ( uint256 marketId ) public view returns ( uint256 ); function getAllAaveAPR () external view returns ( uint256 aDAI , uint256 aTUSD , uint256 aUSDC , uint256 aUSDT , uint256 aSUSD , uint256 aBAT , uint256 aETH , uint256 aLINK , uint256 aKNC , uint256 aREP , uint256 aZRX , uint256 aSNX ); function getADAIAPR () public view returns ( uint256 ); function getATUSDAPR () public view returns ( uint256 ); function getAUSDCAPR () public view returns ( uint256 ); function getAUSDTAPR () public view returns ( uint256 ); function getASUSDAPR () public view returns ( uint256 ); function getALENDAPR () public view returns ( uint256 ); function getABATAPR () public view returns ( uint256 ); function getAETHAPR () public view returns ( uint256 ); function getALINKAPR () public view returns ( uint256 ); function getAKNCAPR () public view returns ( uint256 ); function getAREPAPR () public view returns ( uint256 ); function getAMKRAPR () public view returns ( uint256 ); function getAMANAAPR () public view returns ( uint256 ); function getAZRXAPR () public view returns ( uint256 ); function getASNXAPR () public view returns ( uint256 ); function getAWBTCAPR () public view returns ( uint256 ); function getAaveAPR ( address token ) public view returns ( uint256 ); } {% endtab %}","title":"APR Interface"},{"location":"developers/misc-resources/smart-contract-integration/interface/#zap-interface","text":"{% tabs %} // Solidity Interface interface IUniSwap_ETH_CDAIZap { function getExpectedReturn ( uint256 eth ) external view returns ( uint256 ); function LetsInvest ( address _towhomtoissue , uint256 _minReturn ) external payable returns ( uint ); function getUniswapExchangeContractAddress () external view returns ( address ); function Redeem ( address payable _towhomtosend , uint256 _amount ) external stopInEmergency returns ( uint ); function getMaxTokens ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _value ) external view returns ( uint ); function getEthBalance ( address _UniSwapExchangeContractAddress ) external view returns ( uint ); function getTokenReserves ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress ) external view returns ( uint ); function getTotalShares ( address _UniSwapExchangeContractAddress ) external view returns ( uint ); function getReturn ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _value ) external view returns ( uint , uint , uint ); function calcReturnETHFromShares ( uint _value ) external view returns ( uint , uint , uint ); function uniBalanceOf ( address _owner ) external view returns ( uint ); function cBalanceOf ( address _owner ) external view returns ( uint ); function calcReturnSharesFromETH ( uint _value ) external view returns ( uint ); function getTokenToEthOutputPrice ( uint _tokens ) external view returns ( uint ); function getSharesReturn ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _ethValue ) external view returns ( uint ); } {% endtab %}","title":"ZAP Interface"},{"location":"developers/misc-resources/smart-contract-integration/interface/#itoken-interface","text":"{% tabs %} // Solidity Interface interface IIEther { // Invest ETH function invest () external payable ; function calcPoolValueInETH () external view returns ( uint ); function getPricePerFullShare () external view returns ( uint ); // Redeem any invested tokens from the pool function redeem ( uint256 _shares ) external ; } {% endtab %}","title":"iToken Interface"},{"location":"developers/misc-resources/smart-contract-integration/interface/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/itoken/","text":"itoken Contract ABI Address iEther JSON ieth.iearn.eth iToken Interface {% tabs %} // Solidity Interface interface IIEther { // Invest ETH function invest () external payable ; function calcPoolValueInETH () external view returns ( uint ); function getPricePerFullShare () external view returns ( uint ); // Redeem any invested tokens from the pool function redeem ( uint256 _shares ) external ; } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"itoken"},{"location":"developers/misc-resources/smart-contract-integration/itoken/#itoken","text":"Contract ABI Address iEther JSON ieth.iearn.eth","title":"itoken"},{"location":"developers/misc-resources/smart-contract-integration/itoken/#itoken-interface","text":"{% tabs %} // Solidity Interface interface IIEther { // Invest ETH function invest () external payable ; function calcPoolValueInETH () external view returns ( uint ); function getPricePerFullShare () external view returns ( uint ); // Redeem any invested tokens from the pool function redeem ( uint256 _shares ) external ; } {% endtab %}","title":"iToken Interface"},{"location":"developers/misc-resources/smart-contract-integration/itoken/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/uniswap/","text":"uniswap Contract Address Uniswap 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95 Uniswap Interface {% tabs %} // Solidity Interface interface IuniswapExchange { // Address of ERC20 token sold on this exchange function tokenAddress () external view returns ( address token ); // Address of Uniswap Factory function factoryAddress () external view returns ( address factory ); // Provide Liquidity function addLiquidity ( uint256 min_liquidity , uint256 max_tokens , uint256 deadline ) external payable returns ( uint256 ); function removeLiquidity ( uint256 amount , uint256 min_eth , uint256 min_tokens , uint256 deadline ) external returns ( uint256 , uint256 ); // Get Prices function getEthToTokenInputPrice ( uint256 eth_sold ) external view returns ( uint256 tokens_bought ); function getEthToTokenOutputPrice ( uint256 tokens_bought ) external view returns ( uint256 eth_sold ); function getTokenToEthInputPrice ( uint256 tokens_sold ) external view returns ( uint256 eth_bought ); function getTokenToEthOutputPrice ( uint256 eth_bought ) external view returns ( uint256 tokens_sold ); // Trade ETH to ERC20 function ethToTokenSwapInput ( uint256 min_tokens , uint256 deadline ) external payable returns ( uint256 tokens_bought ); function ethToTokenTransferInput ( uint256 min_tokens , uint256 deadline , address recipient ) external payable returns ( uint256 tokens_bought ); function ethToTokenSwapOutput ( uint256 tokens_bought , uint256 deadline ) external payable returns ( uint256 eth_sold ); function ethToTokenTransferOutput ( uint256 tokens_bought , uint256 deadline , address recipient ) external payable returns ( uint256 eth_sold ); // Trade ERC20 to ETH function tokenToEthSwapInput ( uint256 tokens_sold , uint256 min_eth , uint256 deadline ) external returns ( uint256 eth_bought ); function tokenToEthTransferInput ( uint256 tokens_sold , uint256 min_eth , uint256 deadline , address recipient ) external returns ( uint256 eth_bought ); function tokenToEthSwapOutput ( uint256 eth_bought , uint256 max_tokens , uint256 deadline ) external returns ( uint256 tokens_sold ); function tokenToEthTransferOutput ( uint256 eth_bought , uint256 max_tokens , uint256 deadline , address recipient ) external returns ( uint256 tokens_sold ); // Trade ERC20 to ERC20 function tokenToTokenSwapInput ( uint256 tokens_sold , uint256 min_tokens_bought , uint256 min_eth_bought , uint256 deadline , address token_addr ) external returns ( uint256 tokens_bought ); function tokenToTokenTransferInput ( uint256 tokens_sold , uint256 min_tokens_bought , uint256 min_eth_bought , uint256 deadline , address recipient , address token_addr ) external returns ( uint256 tokens_bought ); function tokenToTokenSwapOutput ( uint256 tokens_bought , uint256 max_tokens_sold , uint256 max_eth_sold , uint256 deadline , address token_addr ) external returns ( uint256 tokens_sold ); function tokenToTokenTransferOutput ( uint256 tokens_bought , uint256 max_tokens_sold , uint256 max_eth_sold , uint256 deadline , address recipient , address token_addr ) external returns ( uint256 tokens_sold ); // Trade ERC20 to Custom Pool function tokenToExchangeSwapInput ( uint256 tokens_sold , uint256 min_tokens_bought , uint256 min_eth_bought , uint256 deadline , address exchange_addr ) external returns ( uint256 tokens_bought ); function tokenToExchangeTransferInput ( uint256 tokens_sold , uint256 min_tokens_bought , uint256 min_eth_bought , uint256 deadline , address recipient , address exchange_addr ) external returns ( uint256 tokens_bought ); function tokenToExchangeSwapOutput ( uint256 tokens_bought , uint256 max_tokens_sold , uint256 max_eth_sold , uint256 deadline , address exchange_addr ) external returns ( uint256 tokens_sold ); function tokenToExchangeTransferOutput ( uint256 tokens_bought , uint256 max_tokens_sold , uint256 max_eth_sold , uint256 deadline , address recipient , address exchange_addr ) external returns ( uint256 tokens_sold ); function transfer ( address _to , uint256 _value ) external returns ( bool ); function transferFrom ( address _from , address _to , uint256 value ) external returns ( bool ); function approve ( address _spender , uint256 _value ) external returns ( bool ); function allowance ( address _owner , address _spender ) external view returns ( uint256 ); function balanceOf ( address _owner ) external view returns ( uint256 ); function totalSupply () external view returns ( uint256 ); } {% endtab %}","title":"uniswap"},{"location":"developers/misc-resources/smart-contract-integration/uniswap/#uniswap","text":"Contract Address Uniswap 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95","title":"uniswap"},{"location":"developers/misc-resources/smart-contract-integration/uniswap/#uniswap-interface","text":"{% tabs %} // Solidity Interface interface IuniswapExchange { // Address of ERC20 token sold on this exchange function tokenAddress () external view returns ( address token ); // Address of Uniswap Factory function factoryAddress () external view returns ( address factory ); // Provide Liquidity function addLiquidity ( uint256 min_liquidity , uint256 max_tokens , uint256 deadline ) external payable returns ( uint256 ); function removeLiquidity ( uint256 amount , uint256 min_eth , uint256 min_tokens , uint256 deadline ) external returns ( uint256 , uint256 ); // Get Prices function getEthToTokenInputPrice ( uint256 eth_sold ) external view returns ( uint256 tokens_bought ); function getEthToTokenOutputPrice ( uint256 tokens_bought ) external view returns ( uint256 eth_sold ); function getTokenToEthInputPrice ( uint256 tokens_sold ) external view returns ( uint256 eth_bought ); function getTokenToEthOutputPrice ( uint256 eth_bought ) external view returns ( uint256 tokens_sold ); // Trade ETH to ERC20 function ethToTokenSwapInput ( uint256 min_tokens , uint256 deadline ) external payable returns ( uint256 tokens_bought ); function ethToTokenTransferInput ( uint256 min_tokens , uint256 deadline , address recipient ) external payable returns ( uint256 tokens_bought ); function ethToTokenSwapOutput ( uint256 tokens_bought , uint256 deadline ) external payable returns ( uint256 eth_sold ); function ethToTokenTransferOutput ( uint256 tokens_bought , uint256 deadline , address recipient ) external payable returns ( uint256 eth_sold ); // Trade ERC20 to ETH function tokenToEthSwapInput ( uint256 tokens_sold , uint256 min_eth , uint256 deadline ) external returns ( uint256 eth_bought ); function tokenToEthTransferInput ( uint256 tokens_sold , uint256 min_eth , uint256 deadline , address recipient ) external returns ( uint256 eth_bought ); function tokenToEthSwapOutput ( uint256 eth_bought , uint256 max_tokens , uint256 deadline ) external returns ( uint256 tokens_sold ); function tokenToEthTransferOutput ( uint256 eth_bought , uint256 max_tokens , uint256 deadline , address recipient ) external returns ( uint256 tokens_sold ); // Trade ERC20 to ERC20 function tokenToTokenSwapInput ( uint256 tokens_sold , uint256 min_tokens_bought , uint256 min_eth_bought , uint256 deadline , address token_addr ) external returns ( uint256 tokens_bought ); function tokenToTokenTransferInput ( uint256 tokens_sold , uint256 min_tokens_bought , uint256 min_eth_bought , uint256 deadline , address recipient , address token_addr ) external returns ( uint256 tokens_bought ); function tokenToTokenSwapOutput ( uint256 tokens_bought , uint256 max_tokens_sold , uint256 max_eth_sold , uint256 deadline , address token_addr ) external returns ( uint256 tokens_sold ); function tokenToTokenTransferOutput ( uint256 tokens_bought , uint256 max_tokens_sold , uint256 max_eth_sold , uint256 deadline , address recipient , address token_addr ) external returns ( uint256 tokens_sold ); // Trade ERC20 to Custom Pool function tokenToExchangeSwapInput ( uint256 tokens_sold , uint256 min_tokens_bought , uint256 min_eth_bought , uint256 deadline , address exchange_addr ) external returns ( uint256 tokens_bought ); function tokenToExchangeTransferInput ( uint256 tokens_sold , uint256 min_tokens_bought , uint256 min_eth_bought , uint256 deadline , address recipient , address exchange_addr ) external returns ( uint256 tokens_bought ); function tokenToExchangeSwapOutput ( uint256 tokens_bought , uint256 max_tokens_sold , uint256 max_eth_sold , uint256 deadline , address exchange_addr ) external returns ( uint256 tokens_sold ); function tokenToExchangeTransferOutput ( uint256 tokens_bought , uint256 max_tokens_sold , uint256 max_eth_sold , uint256 deadline , address recipient , address exchange_addr ) external returns ( uint256 tokens_sold ); function transfer ( address _to , uint256 _value ) external returns ( bool ); function transferFrom ( address _from , address _to , uint256 value ) external returns ( bool ); function approve ( address _spender , uint256 _value ) external returns ( bool ); function allowance ( address _owner , address _spender ) external view returns ( uint256 ); function balanceOf ( address _owner ) external view returns ( uint256 ); function totalSupply () external view returns ( uint256 ); } {% endtab %}","title":"Uniswap Interface"},{"location":"developers/misc-resources/smart-contract-integration/uniswapapr/","text":"uniswapapr Contract ABI Address UniswapAPR JSON uniapr.iearn.eth UniswapAPR Interface {% tabs %} // Solidity Interface contract IUniswapAPR { function getBlocksPerYear () external view returns ( uint256 ); function calcUniswapAPRADAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRCDAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRCETH () external view returns ( uint256 , uint256 ); function calcUniswapAPRCSAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRCUSDC () external view returns ( uint256 , uint256 ); function calcUniswapAPRDAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRIDAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRISAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRSUSD () external view returns ( uint256 , uint256 ); function calcUniswapAPRTUSD () external view returns ( uint256 , uint256 ); function calcUniswapAPRUSDC () external view returns ( uint256 , uint256 ); function calcUniswapAPRCHAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRFromROI ( uint256 roi , uint256 createdAt ) external view returns ( uint256 ); function calcUniswapAPR ( address token , uint256 createdAt ) external view returns ( uint256 ); } {% endtab %}","title":"uniswapapr"},{"location":"developers/misc-resources/smart-contract-integration/uniswapapr/#uniswapapr","text":"Contract ABI Address UniswapAPR JSON uniapr.iearn.eth","title":"uniswapapr"},{"location":"developers/misc-resources/smart-contract-integration/uniswapapr/#uniswapapr-interface","text":"{% tabs %} // Solidity Interface contract IUniswapAPR { function getBlocksPerYear () external view returns ( uint256 ); function calcUniswapAPRADAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRCDAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRCETH () external view returns ( uint256 , uint256 ); function calcUniswapAPRCSAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRCUSDC () external view returns ( uint256 , uint256 ); function calcUniswapAPRDAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRIDAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRISAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRSUSD () external view returns ( uint256 , uint256 ); function calcUniswapAPRTUSD () external view returns ( uint256 , uint256 ); function calcUniswapAPRUSDC () external view returns ( uint256 , uint256 ); function calcUniswapAPRCHAI () external view returns ( uint256 , uint256 ); function calcUniswapAPRFromROI ( uint256 roi , uint256 createdAt ) external view returns ( uint256 ); function calcUniswapAPR ( address token , uint256 createdAt ) external view returns ( uint256 ); } {% endtab %}","title":"UniswapAPR Interface"},{"location":"developers/misc-resources/smart-contract-integration/uniswaproi/","text":"uniswaproi Contract ABI Address UniswapROI JSON uniroi.iearn.eth UniswapROI Interface {% tabs %} // Solidity Interface interface IUniswapROI { function getCDAIUniROI () external view returns ( uint256 , uint256 ); function getCBATUniROI () external view returns ( uint256 , uint256 ); function getCETHUniROI () external view returns ( uint256 , uint256 ); function getCREPUniROI () external view returns ( uint256 , uint256 ); function getCSAIUniROI () external view returns ( uint256 , uint256 ); function getCUSDCUniROI () external view returns ( uint256 , uint256 ); function getCWBTCUniROI () external view returns ( uint256 , uint256 ); function getCZRXUniROI () external view returns ( uint256 , uint256 ); function getIZRXUniROI () external view returns ( uint256 , uint256 ); function getIREPUniROI () external view returns ( uint256 , uint256 ); function getIKNCUniROI () external view returns ( uint256 , uint256 ); function getIWBTCUniROI () external view returns ( uint256 , uint256 ); function getIUSDCUniROI () external view returns ( uint256 , uint256 ); function getIETHUniROI () external view returns ( uint256 , uint256 ); function getISAIUniROI () external view returns ( uint256 , uint256 ); function getIDAIUniROI () external view returns ( uint256 , uint256 ); function getILINKUniROI () external view returns ( uint256 , uint256 ); function getISUSDUniROI () external view returns ( uint256 , uint256 ); function getADAIUniROI () external view returns ( uint256 , uint256 ); function getATUSDUniROI () external view returns ( uint256 , uint256 ); function getAUSDCUniROI () external view returns ( uint256 , uint256 ); function getAUSDTUniROI () external view returns ( uint256 , uint256 ); function getASUSDUniROI () external view returns ( uint256 , uint256 ); function getALENDUniROI () external view returns ( uint256 , uint256 ); function getABATUniROI () external view returns ( uint256 , uint256 ); function getAETHUniROI () external view returns ( uint256 , uint256 ); function getALINKUniROI () external view returns ( uint256 , uint256 ); function getAKNCUniROI () external view returns ( uint256 , uint256 ); function getAREPUniROI () external view returns ( uint256 , uint256 ); function getAMKRUniROI () external view returns ( uint256 , uint256 ); function getAMANAUniROI () external view returns ( uint256 , uint256 ); function getAZRXUniROI () external view returns ( uint256 , uint256 ); function getASNXUniROI () external view returns ( uint256 , uint256 ); function getAWBTCUniROI () external view returns ( uint256 , uint256 ); function getDAIUniROI () external view returns ( uint256 , uint256 ); function getTUSDUniROI () external view returns ( uint256 , uint256 ); function getUSDCUniROI () external view returns ( uint256 , uint256 ); function getUSDTUniROI () external view returns ( uint256 , uint256 ); function getSUSDUniROI () external view returns ( uint256 , uint256 ); function getLENDUniROI () external view returns ( uint256 , uint256 ); function getBATUniROI () external view returns ( uint256 , uint256 ); function getETHUniROI () external view returns ( uint256 , uint256 ); function getLINKUniROI () external view returns ( uint256 , uint256 ); function getKNCUniROI () external view returns ( uint256 , uint256 ); function getREPUniROI () external view returns ( uint256 , uint256 ); function getMKRUniROI () external view returns ( uint256 , uint256 ); function getMANAUniROI () external view returns ( uint256 , uint256 ); function getZRXUniROI () external view returns ( uint256 , uint256 ); function getSNXUniROI () external view returns ( uint256 , uint256 ); function getWBTCUniROI () external view returns ( uint256 , uint256 ); function calcUniswapROI ( address token ) external view returns ( uint256 , uint256 ); } {% endtab %}","title":"uniswaproi"},{"location":"developers/misc-resources/smart-contract-integration/uniswaproi/#uniswaproi","text":"Contract ABI Address UniswapROI JSON uniroi.iearn.eth","title":"uniswaproi"},{"location":"developers/misc-resources/smart-contract-integration/uniswaproi/#uniswaproi-interface","text":"{% tabs %} // Solidity Interface interface IUniswapROI { function getCDAIUniROI () external view returns ( uint256 , uint256 ); function getCBATUniROI () external view returns ( uint256 , uint256 ); function getCETHUniROI () external view returns ( uint256 , uint256 ); function getCREPUniROI () external view returns ( uint256 , uint256 ); function getCSAIUniROI () external view returns ( uint256 , uint256 ); function getCUSDCUniROI () external view returns ( uint256 , uint256 ); function getCWBTCUniROI () external view returns ( uint256 , uint256 ); function getCZRXUniROI () external view returns ( uint256 , uint256 ); function getIZRXUniROI () external view returns ( uint256 , uint256 ); function getIREPUniROI () external view returns ( uint256 , uint256 ); function getIKNCUniROI () external view returns ( uint256 , uint256 ); function getIWBTCUniROI () external view returns ( uint256 , uint256 ); function getIUSDCUniROI () external view returns ( uint256 , uint256 ); function getIETHUniROI () external view returns ( uint256 , uint256 ); function getISAIUniROI () external view returns ( uint256 , uint256 ); function getIDAIUniROI () external view returns ( uint256 , uint256 ); function getILINKUniROI () external view returns ( uint256 , uint256 ); function getISUSDUniROI () external view returns ( uint256 , uint256 ); function getADAIUniROI () external view returns ( uint256 , uint256 ); function getATUSDUniROI () external view returns ( uint256 , uint256 ); function getAUSDCUniROI () external view returns ( uint256 , uint256 ); function getAUSDTUniROI () external view returns ( uint256 , uint256 ); function getASUSDUniROI () external view returns ( uint256 , uint256 ); function getALENDUniROI () external view returns ( uint256 , uint256 ); function getABATUniROI () external view returns ( uint256 , uint256 ); function getAETHUniROI () external view returns ( uint256 , uint256 ); function getALINKUniROI () external view returns ( uint256 , uint256 ); function getAKNCUniROI () external view returns ( uint256 , uint256 ); function getAREPUniROI () external view returns ( uint256 , uint256 ); function getAMKRUniROI () external view returns ( uint256 , uint256 ); function getAMANAUniROI () external view returns ( uint256 , uint256 ); function getAZRXUniROI () external view returns ( uint256 , uint256 ); function getASNXUniROI () external view returns ( uint256 , uint256 ); function getAWBTCUniROI () external view returns ( uint256 , uint256 ); function getDAIUniROI () external view returns ( uint256 , uint256 ); function getTUSDUniROI () external view returns ( uint256 , uint256 ); function getUSDCUniROI () external view returns ( uint256 , uint256 ); function getUSDTUniROI () external view returns ( uint256 , uint256 ); function getSUSDUniROI () external view returns ( uint256 , uint256 ); function getLENDUniROI () external view returns ( uint256 , uint256 ); function getBATUniROI () external view returns ( uint256 , uint256 ); function getETHUniROI () external view returns ( uint256 , uint256 ); function getLINKUniROI () external view returns ( uint256 , uint256 ); function getKNCUniROI () external view returns ( uint256 , uint256 ); function getREPUniROI () external view returns ( uint256 , uint256 ); function getMKRUniROI () external view returns ( uint256 , uint256 ); function getMANAUniROI () external view returns ( uint256 , uint256 ); function getZRXUniROI () external view returns ( uint256 , uint256 ); function getSNXUniROI () external view returns ( uint256 , uint256 ); function getWBTCUniROI () external view returns ( uint256 , uint256 ); function calcUniswapROI ( address token ) external view returns ( uint256 , uint256 ); } {% endtab %}","title":"UniswapROI Interface"},{"location":"developers/misc-resources/smart-contract-integration/ybtc/","text":"ybtc Contract ABI Address yBTC JSON ybtc.iearn.eth yBTCv2 JSON ybtcv2.iearn.eth IyBTC Interface {% tabs %} // Solidity Interface interface IyBTC { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function supplyDydx ( uint256 amount ) external returns ( uint ); function supplyAave ( uint amount ) external ; function supplyFulcrum ( uint amount ) external ; function supplyCompound ( uint amount ) external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ybtc"},{"location":"developers/misc-resources/smart-contract-integration/ybtc/#ybtc","text":"Contract ABI Address yBTC JSON ybtc.iearn.eth yBTCv2 JSON ybtcv2.iearn.eth","title":"ybtc"},{"location":"developers/misc-resources/smart-contract-integration/ybtc/#iybtc-interface","text":"{% tabs %} // Solidity Interface interface IyBTC { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function supplyDydx ( uint256 amount ) external returns ( uint ); function supplyAave ( uint amount ) external ; function supplyFulcrum ( uint amount ) external ; function supplyCompound ( uint amount ) external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %}","title":"IyBTC Interface"},{"location":"developers/misc-resources/smart-contract-integration/ybtc/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/ybusd/","text":"ybusd","title":"ybusd"},{"location":"developers/misc-resources/smart-contract-integration/ybusd/#ybusd","text":"","title":"ybusd"},{"location":"developers/misc-resources/smart-contract-integration/ycrv/","text":"ycrv Contract ABI Address IyCRV JSON ycrv.iearn.eth IyUSDT Interface {% tabs %} // Solidity Interface interface IyCRV { function balanceCompound () public view returns ( uint256 ); function supplyCompound ( uint amount ) public ; function invest ( uint256 _amount ) external ; function crvapr () external view returns ( uint256 ); function calcPoolValueInToken () external view returns ( uint ); function getPricePerFullShare () external view returns ( uint ); // Redeem any invested tokens from the pool function redeem ( uint256 _shares ) external ; } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ycrv"},{"location":"developers/misc-resources/smart-contract-integration/ycrv/#ycrv","text":"Contract ABI Address IyCRV JSON ycrv.iearn.eth","title":"ycrv"},{"location":"developers/misc-resources/smart-contract-integration/ycrv/#iyusdt-interface","text":"{% tabs %} // Solidity Interface interface IyCRV { function balanceCompound () public view returns ( uint256 ); function supplyCompound ( uint amount ) public ; function invest ( uint256 _amount ) external ; function crvapr () external view returns ( uint256 ); function calcPoolValueInToken () external view returns ( uint ); function getPricePerFullShare () external view returns ( uint ); // Redeem any invested tokens from the pool function redeem ( uint256 _shares ) external ; } {% endtab %}","title":"IyUSDT Interface"},{"location":"developers/misc-resources/smart-contract-integration/ycrv/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/ydai/","text":"ydai Contract ABI Address yDAIv1 JSON ydai.iearn.eth yDAIv2 JSON ydai.iearn.eth yDAIv3 JSON ydaiv3.iearn.eth IyDAI Interface {% tabs %} // Solidity Interface interface IyDAI { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ydai"},{"location":"developers/misc-resources/smart-contract-integration/ydai/#ydai","text":"Contract ABI Address yDAIv1 JSON ydai.iearn.eth yDAIv2 JSON ydai.iearn.eth yDAIv3 JSON ydaiv3.iearn.eth","title":"ydai"},{"location":"developers/misc-resources/smart-contract-integration/ydai/#iydai-interface","text":"{% tabs %} // Solidity Interface interface IyDAI { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %}","title":"IyDAI Interface"},{"location":"developers/misc-resources/smart-contract-integration/ydai/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/ysusd/","text":"ysusd Contract ABI Address ySUSD JSON ysusd.iearn.eth ySUSDv2 JSON ysusd.iearn.eth IySUSD Interface {% tabs %} // Solidity Interface interface IySUSD { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function supplyDydx ( uint256 amount ) external returns ( uint ); function supplyAave ( uint amount ) external ; function supplyFulcrum ( uint amount ) external ; function supplyCompound ( uint amount ) external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ysusd"},{"location":"developers/misc-resources/smart-contract-integration/ysusd/#ysusd","text":"Contract ABI Address ySUSD JSON ysusd.iearn.eth ySUSDv2 JSON ysusd.iearn.eth","title":"ysusd"},{"location":"developers/misc-resources/smart-contract-integration/ysusd/#iysusd-interface","text":"{% tabs %} // Solidity Interface interface IySUSD { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function supplyDydx ( uint256 amount ) external returns ( uint ); function supplyAave ( uint amount ) external ; function supplyFulcrum ( uint amount ) external ; function supplyCompound ( uint amount ) external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %}","title":"IySUSD Interface"},{"location":"developers/misc-resources/smart-contract-integration/ysusd/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/ytusd/","text":"ytusd Contract ABI Address yTUSDv2 JSON ytusd.iearn.eth IyTUSD Interface {% tabs %} // Solidity Interface interface IyTUSD { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function supplyDydx ( uint256 amount ) external returns ( uint ); function supplyAave ( uint amount ) external ; function supplyFulcrum ( uint amount ) external ; function supplyCompound ( uint amount ) external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ytusd"},{"location":"developers/misc-resources/smart-contract-integration/ytusd/#ytusd","text":"Contract ABI Address yTUSDv2 JSON ytusd.iearn.eth","title":"ytusd"},{"location":"developers/misc-resources/smart-contract-integration/ytusd/#iytusd-interface","text":"{% tabs %} // Solidity Interface interface IyTUSD { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function supplyDydx ( uint256 amount ) external returns ( uint ); function supplyAave ( uint amount ) external ; function supplyFulcrum ( uint amount ) external ; function supplyCompound ( uint amount ) external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %}","title":"IyTUSD Interface"},{"location":"developers/misc-resources/smart-contract-integration/ytusd/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/yusdc/","text":"yusdc Contract ABI Address yUSDCv1 JSON yusdc.iearn.eth yUSDCv2 JSON yusdcv2.iearn.eth yUSDCv3 JSON yusdcv3.iearn.eth IyUSDC Interface {% tabs %} // Solidity Interface interface IyUSDC { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"yusdc"},{"location":"developers/misc-resources/smart-contract-integration/yusdc/#yusdc","text":"Contract ABI Address yUSDCv1 JSON yusdc.iearn.eth yUSDCv2 JSON yusdcv2.iearn.eth yUSDCv3 JSON yusdcv3.iearn.eth","title":"yusdc"},{"location":"developers/misc-resources/smart-contract-integration/yusdc/#iyusdc-interface","text":"{% tabs %} // Solidity Interface interface IyUSDC { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %}","title":"IyUSDC Interface"},{"location":"developers/misc-resources/smart-contract-integration/yusdc/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/yusdt/","text":"yusdt Contract ABI Address yUSDT JSON yusdt.iearn.eth yUSDTv2 JSON yusdt.iearn.eth yUSDTv3 JSON yusdtv3.iearn.eth IyUSDT Interface {% tabs %} // Solidity Interface interface IyUSDT { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %} ERC20 Token Interface {% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"yusdt"},{"location":"developers/misc-resources/smart-contract-integration/yusdt/#yusdt","text":"Contract ABI Address yUSDT JSON yusdt.iearn.eth yUSDTv2 JSON yusdt.iearn.eth yUSDTv3 JSON yusdtv3.iearn.eth","title":"yusdt"},{"location":"developers/misc-resources/smart-contract-integration/yusdt/#iyusdt-interface","text":"{% tabs %} // Solidity Interface interface IyUSDT { function withdraw ( uint256 _shares ) external ; function deposit ( uint256 _amount ) external ; function balance () external view returns ( uint256 ); function balanceDydx () external view returns ( uint256 ); function balanceCompound () external view returns ( uint256 ); function balanceCompoundInToken () external view returns ( uint256 ); function balanceFulcrumInToken () external view returns ( uint256 ); function balanceFulcrum () external view returns ( uint256 ); function balanceAave () external view returns ( uint256 ); function recommend () external view returns ( uint256 ); function rebalance () external ; function calcPoolValueInToken () external view returns ( uint256 ); function getPricePerFullShare () external view returns ( uint256 ); } {% endtab %}","title":"IyUSDT Interface"},{"location":"developers/misc-resources/smart-contract-integration/yusdt/#erc20-token-interface","text":"{% tabs %} // https://theethereum.wiki/w/index.php/ERC20_Token_Standard contract ERC20Interface { function totalSupply () public view returns ( uint ); function balanceOf ( address tokenOwner ) public view returns ( uint balance ); function allowance ( address tokenOwner , address spender ) public view returns ( uint remaining ); function transfer ( address to , uint tokens ) public returns ( bool success ); function approve ( address spender , uint tokens ) public returns ( bool success ); function transferFrom ( address from , address to , uint tokens ) public returns ( bool success ); // optional function name () external view returns ( string ); function symbol () external view returns ( string ); function decimals () external view returns ( string ); event Transfer ( address indexed from , address indexed to , uint tokens ); event Approval ( address indexed tokenOwner , address indexed spender , uint tokens ); } {% endtab %}","title":"ERC20 Token Interface"},{"location":"developers/misc-resources/smart-contract-integration/zap/","text":"zap Contract ABI Address Uniswap_ETH_CDAIZAP JSON zap.iearn.eth ZAP Interface {% tabs %} // Solidity Interface interface IUniSwap_ETH_CDAIZap { function getExpectedReturn ( uint256 eth ) external view returns ( uint256 ); function LetsInvest ( address _towhomtoissue , uint256 _minReturn ) external payable returns ( uint ); function getUniswapExchangeContractAddress () external view returns ( address ); function Redeem ( address payable _towhomtosend , uint256 _amount ) external stopInEmergency returns ( uint ); function getMaxTokens ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _value ) external view returns ( uint ); function getEthBalance ( address _UniSwapExchangeContractAddress ) external view returns ( uint ); function getTokenReserves ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress ) external view returns ( uint ); function getTotalShares ( address _UniSwapExchangeContractAddress ) external view returns ( uint ); function getReturn ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _value ) external view returns ( uint , uint , uint ); function calcReturnETHFromShares ( uint _value ) external view returns ( uint , uint , uint ); function uniBalanceOf ( address _owner ) external view returns ( uint ); function cBalanceOf ( address _owner ) external view returns ( uint ); function calcReturnSharesFromETH ( uint _value ) external view returns ( uint ); function getTokenToEthOutputPrice ( uint _tokens ) external view returns ( uint ); function getSharesReturn ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _ethValue ) external view returns ( uint ); } {% endtab %}","title":"zap"},{"location":"developers/misc-resources/smart-contract-integration/zap/#zap","text":"Contract ABI Address Uniswap_ETH_CDAIZAP JSON zap.iearn.eth","title":"zap"},{"location":"developers/misc-resources/smart-contract-integration/zap/#zap-interface","text":"{% tabs %} // Solidity Interface interface IUniSwap_ETH_CDAIZap { function getExpectedReturn ( uint256 eth ) external view returns ( uint256 ); function LetsInvest ( address _towhomtoissue , uint256 _minReturn ) external payable returns ( uint ); function getUniswapExchangeContractAddress () external view returns ( address ); function Redeem ( address payable _towhomtosend , uint256 _amount ) external stopInEmergency returns ( uint ); function getMaxTokens ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _value ) external view returns ( uint ); function getEthBalance ( address _UniSwapExchangeContractAddress ) external view returns ( uint ); function getTokenReserves ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress ) external view returns ( uint ); function getTotalShares ( address _UniSwapExchangeContractAddress ) external view returns ( uint ); function getReturn ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _value ) external view returns ( uint , uint , uint ); function calcReturnETHFromShares ( uint _value ) external view returns ( uint , uint , uint ); function uniBalanceOf ( address _owner ) external view returns ( uint ); function cBalanceOf ( address _owner ) external view returns ( uint ); function calcReturnSharesFromETH ( uint _value ) external view returns ( uint ); function getTokenToEthOutputPrice ( uint _tokens ) external view returns ( uint ); function getSharesReturn ( address _UniSwapExchangeContractAddress , IERC20 _ERC20TokenAddress , uint _ethValue ) external view returns ( uint ); } {% endtab %}","title":"ZAP Interface"},{"location":"developers/yvaults-documentation/","text":"yVaults Documentation {% page-ref page=\"vault-interfaces.md\" %} {% page-ref page=\"vaults-overview.md\" %}","title":"yVaults Documentation"},{"location":"developers/yvaults-documentation/#yvaults-documentation","text":"{% page-ref page=\"vault-interfaces.md\" %} {% page-ref page=\"vaults-overview.md\" %}","title":"yVaults Documentation"},{"location":"developers/yvaults-documentation/vault-interfaces/","text":"Vault Interfaces IStrategy Source code: yearn-protocol/develop/interfaces/yearn/IStrategy.sol function want() Returns the address of the unwrapped token that the Strategy takes as deposit. {% tabs %} function want () external view returns ( address ); {% endtab %} type desc Output 0 address Address of the token the Strategy takes as deposit function deposit() Deposits token (same as want() returns) into a smart contact specified by the Strategy. {% tabs %} function deposit () external ; {% endtab %} func withdraw(address) Dust collecting function to create additional rewards out of tokens that were incorrectly sent to the Strategy. Takes an ERC20 token address and should send the full amount of any such tokens in the Strategy to the Controller. This function should have access control enforcing the Controller only to be its allowed caller, and checks in place to ensure that the token types to withdraw are not those used by the Strategy. {% tabs %} function withdraw ( address ) external ; {% endtab %} type desc Input 0 address ERC-20 token to be drained function withdraw(uint256) Partially withdraws funds (denominated in want() token) from the Strategy, and should always only be sending these to the Vault. In case the Strategy implements harvest() , a withdrawal fee may be applied. This function should have access control enforcing the Controller only to be its allowed caller. {% tabs %} function withdraw ( uint256 ) external ; {% endtab %} type desc Input 0 uint Amount to be withdrawn function skim() Used to obtain the remaining amount that can be borrowed from the lending platform. Relevant when the Strategy implements a lending platform, such as Aave. {% tabs %} function skim () external ; {% endtab %} function withdrawAll() Withdraws the entire amount of want() tokens available, and should always only be sending these to the Vault. This function should have access control enforcing the Controller only to be its allowed caller. Typically used when migrating strategies. The function typically uses withdraw() and performs a set of sequential function calls depending on the Strategy. If the Strategy implements liquidity pools or lending platforms, then withdrawal from these platforms should be performed until the Vault\u2019s unwrapped token is delivered back to the vault. Returns a uint256 of the total amount withdrawn. {% tabs %} function withdrawAll () external returns ( uint256 ); {% endtab %} type desc Output 0 uint256 The amount withdrawn function balanceOf() Returns the Strategy's current want() token balance. {% tabs %} function balanceOf () external view returns ( uint256 ); {% endtab %} type desc Output 0 uint256 Strategy's want() token balance IVault Source code: yearn-protocol/develop/interfaces/yearn/IVault.sol function token() Returns the unwrapped native token address that the Vault takes as deposit. {% tabs %} function token () external view returns ( address ); {% endtab %} type desc Output 0 address Vault\u2019s unwrapped native token address function underlying() Returns the native underlying token address in Delegated Vaults. For example, in case of aLINK delegated vault, underlying() returns the address of the LINK token. {% tabs %} // This is only implemented in Delegated Vaults. function underlying () external view returns ( address ); {% endtab %} type desc Output 0 address Delegated Vault\u2019s underlying native token address function name() Returns the vault\u2019s wrapped token name as a string, e.g. \u201cyearn Dai Stablecoin\". {% tabs %} function name () external view returns ( string memory ); {% endtab %} type desc Output 0 string Vault\u2019s wrapped token name function symbol() Returns the vault\u2019s wrapped token symbol as a string, e.g. \u201cyDai\u201d. {% tabs %} function symbol () external view returns ( string memory ); {% endtab %} type desc Output 0 string Vault\u2019s wrapped token symbol function decimals() Returns the amount of decimals for this vault\u2019s wrapped token as a uint8 . {% tabs %} function decimals () external view returns ( uint8 ); {% endtab %} type desc Output 0 uint8 No of decimals of the vault's wrapped token. func controller() Returns the address of the Vault's Controller. {% tabs %} function controller () external view returns ( address ); {% endtab %} type desc Output 0 address Vault\u2019s Controller contract function governance() Returns the address of the Vault\u2019s governance contract. {% tabs %} function governance () external view returns ( address ); {% endtab %} type desc Output 0 address Vault\u2019s Governance contract function getPricePerFullShare() Returns the price of the Vault\u2019s wrapped token, denominated in the unwrapped native token. The calculation is: Where nativeTokenBalance is the current balance of native token e.g. DAI e.g. DAI in the Vault, Controller and Strategy contracts. And yTokenTotalSupply is the total supply of the Vault's wrapped Token e.g. yDAI e.g. yDAI . {% tabs %} function getPricePerFullShare () external view returns ( uint256 ); {% endtab %} type desc Output 0 uint256 Price of the Vault\u2019s wrapped token denominated in the unwrapped native token function deposit() Deposits the specified amount of the native unwrapped token (same as token() returns) into the Vault. {% tabs %} function deposit ( uint256 ) external ; {% endtab %} type desc Input 0 uint256 Amount to deposit into the Vault. function depositAll() Deposits the maximum available amount of the native unwrapped token (same as token() returns) into the Vault. {% tabs %} function depositAll () external ; {% endtab %} function withdraw() Withdraws the specified amount of the native unwrapped token (same as token() returns) from the Vault. {% tabs %} function withdraw ( uint256 ) external ; {% endtab %} type desc Input 0 uint256 Amount to withdraw from the Vault. function withdrawAll() Withdraws the maximum available amount of the native unwrapped token (same as token() returns) from the Vault. {% tabs %} function withdrawAll () external ; {% endtab %} IController Source code: yearn-protocol/develop/interfaces/yearn/IController.sol function withdraw() Calls Strategy.withdraw() function for the amount defined in unit256 in the Strategy of the specified address. This function should have access control enforcing the Vault to be its only allowed caller. {% tabs %} function withdraw ( address , uint256 ) external ; {% endtab %} type desc Input 0 address Address of the Strategy to withdraw from Input 1 uint256 Amount to withdraw function balanceOf() Returns the Strategy's balance of the specified token. {% tabs %} function balanceOf ( address ) external view returns ( uint256 ); {% endtab %} type desc Input 0 address Token that is used in the Strategy Output 0 uint256 Balance of the specified token function earn() Transfers the profits earned from the yield generating activities of the Strategy to the Vault. Takes an address of a token to withdraw and an amount. {% tabs %} function earn ( address , uint256 ) external ; {% endtab %} type desc Input 0 address Token to be withdrawn to the Vault from the Strategy Input 1 uint256 Amount to be withdrawn function want() {% hint style=\"info\" %} Not used by the currently deployed controller. Please refer to Strategy.want() instead. {% tabs %} function want ( address ) external view returns ( address ); {% endtab %} function rewards() Returns the address of the Treasury which is where the system reward fees go. {% tabs %} function rewards () external view returns ( address ); {% endtab %} type desc Output 0 address Treasury contract function vaults() Takes a token address and returns the corresponding Vault address. {% tabs %} function vaults ( address ) external view returns ( address ); {% endtab %} type desc Input 0 address Token to find a Vault address for Output 0 address Vault address that is associated with the specified token function strategies() Takes a token address and returns the corresponding Strategy address. {% tabs %} function strategies ( address ) external view returns ( address ); {% endtab %} type desc Input 0 address Token to find a Strategy address for Output 0 address Strategy address that is associated with the specified token","title":"Vault Interfaces"},{"location":"developers/yvaults-documentation/vault-interfaces/#vault-interfaces","text":"","title":"Vault Interfaces"},{"location":"developers/yvaults-documentation/vault-interfaces/#istrategy","text":"Source code: yearn-protocol/develop/interfaces/yearn/IStrategy.sol","title":"IStrategy"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-want","text":"Returns the address of the unwrapped token that the Strategy takes as deposit. {% tabs %} function want () external view returns ( address ); {% endtab %} type desc Output 0 address Address of the token the Strategy takes as deposit","title":"function want()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-deposit","text":"Deposits token (same as want() returns) into a smart contact specified by the Strategy. {% tabs %} function deposit () external ; {% endtab %}","title":"function deposit()"},{"location":"developers/yvaults-documentation/vault-interfaces/#func-withdrawaddress","text":"Dust collecting function to create additional rewards out of tokens that were incorrectly sent to the Strategy. Takes an ERC20 token address and should send the full amount of any such tokens in the Strategy to the Controller. This function should have access control enforcing the Controller only to be its allowed caller, and checks in place to ensure that the token types to withdraw are not those used by the Strategy. {% tabs %} function withdraw ( address ) external ; {% endtab %} type desc Input 0 address ERC-20 token to be drained","title":"func withdraw(address)"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-withdrawuint256","text":"Partially withdraws funds (denominated in want() token) from the Strategy, and should always only be sending these to the Vault. In case the Strategy implements harvest() , a withdrawal fee may be applied. This function should have access control enforcing the Controller only to be its allowed caller. {% tabs %} function withdraw ( uint256 ) external ; {% endtab %} type desc Input 0 uint Amount to be withdrawn","title":"function withdraw(uint256)"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-skim","text":"Used to obtain the remaining amount that can be borrowed from the lending platform. Relevant when the Strategy implements a lending platform, such as Aave. {% tabs %} function skim () external ; {% endtab %}","title":"function skim()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-withdrawall","text":"Withdraws the entire amount of want() tokens available, and should always only be sending these to the Vault. This function should have access control enforcing the Controller only to be its allowed caller. Typically used when migrating strategies. The function typically uses withdraw() and performs a set of sequential function calls depending on the Strategy. If the Strategy implements liquidity pools or lending platforms, then withdrawal from these platforms should be performed until the Vault\u2019s unwrapped token is delivered back to the vault. Returns a uint256 of the total amount withdrawn. {% tabs %} function withdrawAll () external returns ( uint256 ); {% endtab %} type desc Output 0 uint256 The amount withdrawn","title":"function withdrawAll()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-balanceof","text":"Returns the Strategy's current want() token balance. {% tabs %} function balanceOf () external view returns ( uint256 ); {% endtab %} type desc Output 0 uint256 Strategy's want() token balance","title":"function balanceOf()"},{"location":"developers/yvaults-documentation/vault-interfaces/#ivault","text":"Source code: yearn-protocol/develop/interfaces/yearn/IVault.sol","title":"IVault"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-token","text":"Returns the unwrapped native token address that the Vault takes as deposit. {% tabs %} function token () external view returns ( address ); {% endtab %} type desc Output 0 address Vault\u2019s unwrapped native token address","title":"function token()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-underlying","text":"Returns the native underlying token address in Delegated Vaults. For example, in case of aLINK delegated vault, underlying() returns the address of the LINK token. {% tabs %} // This is only implemented in Delegated Vaults. function underlying () external view returns ( address ); {% endtab %} type desc Output 0 address Delegated Vault\u2019s underlying native token address","title":"function underlying()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-name","text":"Returns the vault\u2019s wrapped token name as a string, e.g. \u201cyearn Dai Stablecoin\". {% tabs %} function name () external view returns ( string memory ); {% endtab %} type desc Output 0 string Vault\u2019s wrapped token name","title":"function name()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-symbol","text":"Returns the vault\u2019s wrapped token symbol as a string, e.g. \u201cyDai\u201d. {% tabs %} function symbol () external view returns ( string memory ); {% endtab %} type desc Output 0 string Vault\u2019s wrapped token symbol","title":"function symbol()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-decimals","text":"Returns the amount of decimals for this vault\u2019s wrapped token as a uint8 . {% tabs %} function decimals () external view returns ( uint8 ); {% endtab %} type desc Output 0 uint8 No of decimals of the vault's wrapped token.","title":"function decimals()"},{"location":"developers/yvaults-documentation/vault-interfaces/#func-controller","text":"Returns the address of the Vault's Controller. {% tabs %} function controller () external view returns ( address ); {% endtab %} type desc Output 0 address Vault\u2019s Controller contract","title":"func controller()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-governance","text":"Returns the address of the Vault\u2019s governance contract. {% tabs %} function governance () external view returns ( address ); {% endtab %} type desc Output 0 address Vault\u2019s Governance contract","title":"function governance()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-getpriceperfullshare","text":"Returns the price of the Vault\u2019s wrapped token, denominated in the unwrapped native token. The calculation is: Where nativeTokenBalance is the current balance of native token e.g. DAI e.g. DAI in the Vault, Controller and Strategy contracts. And yTokenTotalSupply is the total supply of the Vault's wrapped Token e.g. yDAI e.g. yDAI . {% tabs %} function getPricePerFullShare () external view returns ( uint256 ); {% endtab %} type desc Output 0 uint256 Price of the Vault\u2019s wrapped token denominated in the unwrapped native token","title":"function getPricePerFullShare()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-deposit_1","text":"Deposits the specified amount of the native unwrapped token (same as token() returns) into the Vault. {% tabs %} function deposit ( uint256 ) external ; {% endtab %} type desc Input 0 uint256 Amount to deposit into the Vault.","title":"function deposit()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-depositall","text":"Deposits the maximum available amount of the native unwrapped token (same as token() returns) into the Vault. {% tabs %} function depositAll () external ; {% endtab %}","title":"function depositAll()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-withdraw","text":"Withdraws the specified amount of the native unwrapped token (same as token() returns) from the Vault. {% tabs %} function withdraw ( uint256 ) external ; {% endtab %} type desc Input 0 uint256 Amount to withdraw from the Vault.","title":"function withdraw()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-withdrawall_1","text":"Withdraws the maximum available amount of the native unwrapped token (same as token() returns) from the Vault. {% tabs %} function withdrawAll () external ; {% endtab %}","title":"function withdrawAll()"},{"location":"developers/yvaults-documentation/vault-interfaces/#icontroller","text":"Source code: yearn-protocol/develop/interfaces/yearn/IController.sol","title":"IController"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-withdraw_1","text":"Calls Strategy.withdraw() function for the amount defined in unit256 in the Strategy of the specified address. This function should have access control enforcing the Vault to be its only allowed caller. {% tabs %} function withdraw ( address , uint256 ) external ; {% endtab %} type desc Input 0 address Address of the Strategy to withdraw from Input 1 uint256 Amount to withdraw","title":"function withdraw()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-balanceof_1","text":"Returns the Strategy's balance of the specified token. {% tabs %} function balanceOf ( address ) external view returns ( uint256 ); {% endtab %} type desc Input 0 address Token that is used in the Strategy Output 0 uint256 Balance of the specified token","title":"function balanceOf()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-earn","text":"Transfers the profits earned from the yield generating activities of the Strategy to the Vault. Takes an address of a token to withdraw and an amount. {% tabs %} function earn ( address , uint256 ) external ; {% endtab %} type desc Input 0 address Token to be withdrawn to the Vault from the Strategy Input 1 uint256 Amount to be withdrawn","title":"function earn()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-want_1","text":"{% hint style=\"info\" %} Not used by the currently deployed controller. Please refer to Strategy.want() instead. {% tabs %} function want ( address ) external view returns ( address ); {% endtab %}","title":"function want()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-rewards","text":"Returns the address of the Treasury which is where the system reward fees go. {% tabs %} function rewards () external view returns ( address ); {% endtab %} type desc Output 0 address Treasury contract","title":"function rewards()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-vaults","text":"Takes a token address and returns the corresponding Vault address. {% tabs %} function vaults ( address ) external view returns ( address ); {% endtab %} type desc Input 0 address Token to find a Vault address for Output 0 address Vault address that is associated with the specified token","title":"function vaults()"},{"location":"developers/yvaults-documentation/vault-interfaces/#function-strategies","text":"Takes a token address and returns the corresponding Strategy address. {% tabs %} function strategies ( address ) external view returns ( address ); {% endtab %} type desc Input 0 address Token to find a Strategy address for Output 0 address Strategy address that is associated with the specified token","title":"function strategies()"},{"location":"developers/yvaults-documentation/vaults-overview/","text":"Vaults Overview This document gives a generalized and high level overview of how the protocol and its actors, smart contracts, and other services interact with each other. The aim is to build intuition about how Yearn products work. {% hint style=\"info\" %} All vaults are different. This is not a formal specification. Contracts and components are subject to change without notice. All contracts are open source and available from the /yearn-protocol GitHub repo. Protocol Contracts Vaults Example: yWETH.sol Vaults act as the representation of the user in the system, and is the internal customer for investments. There is one vault per deposit token, and they are agnostic to the strategies they interact with. Their primary tasks are to: process user deposits and withdrawals , minting or burning LP tokens as receipts for these; manage disposable funds , ensuring there is enough to satisfy the minimum amount available to handle withdrawals, and issuing withdrawal requests from strategies when more funds need to be added; and deposit funds into strategies , when there is a surplus of funds in the vault above what's required to be kept at disposal. Controller Controller.sol The Controller act as the gatekeeping interface between vaults and strategies and oversees communication and fund flows. Deposits and withdrawals in and out of strategies flow through the Controller . It keeps track of the addresses for the active vaults, strategies, tokens, and strategy rewards destination, acting as a pseudo-registry that verifies the origin and destination of a transaction. The Controller also handles strategy migration, moving funds from an old strategy to a new one. Registry YRegistry.sol The registry is a wrapper of the controller that contains additional meta-data about active addresses. Its functionality is currently being expanded. Strategies Example: CurveYCRVVoter.sol Strategies are investment instruction sets, written by a Strategist . They are agnostic to the vaults that use them. Strategies execute step-by-step functions with the objective to generate yield. They do so by interacting with: other Yearn services , such as vaults, lending, and insurance; and external 3 rd party services , such as Aave, Curve, Chainlink and Maker. Rewards are claimed and re-invested into the strategies, with deductions for Management fees and for compensating the Strategist . Treasury The Treasury contract accumulates all the Management fees sent from the strategies. It's an intermediate contract that can convert between different tokens, currently normalizing all rewards into yCRV. It calls two functions: toVoters() , sending part of the fees to the governance voters, as a reward for their participation; and toGovernance() , sending part of the fees to the multi-sig to cover gas costs and other expenses. Governance StrategyYFIGovernance.sol Yearn Governance is a combination of the YFI staking contract to participate in Governance voting, and the 6-of-9 multi-sig that executes the decisions by the YFI holders. Governance manages the Vaults , Controller , and Strategies by calling functions on these contracts. Vault management Set governing address , through setGovernance() , in order to upgrade governance contracts. Set controller for the vault , through setController() , in order to upgrade controllers. Set amount of disposable funds at hand in vault , through setMin() , in order to manage how large withdrawal amounts require a Vault to issue a withdrawal request to a Strategy, via the Controller. Controller management Set governing address , through setGovernance() , in order to upgrade governance contracts. Add vaults for the Controller to manage, through setVault() , in order to introduce new vaults. Set address to receive management fees , through setRewards() in order to upgrade the Treasury. Strategy management Set Strategist address , through setStrategist() , in order for Strategists to receive their rewards and to interact with the system. Add an approved Strategy , through approveStrategy() on the Controller, in order for Strategists to be able to activate the Strategy in question. Remove an approved Strategy , through revokeStrategy() on the Controller, in order to prevent Strategists from being able to activate the Strategy in question. Protocol Actors User A Yearn end-user. Deposits funds into vaults, to receive LP tokens, through calling deposit() ; Withdraws funds from vaults, by depositing (effectively burning) LP tokens into vaults and receiving the corresponding deposit token amount back in return, through calling withdraw() . If the vault does not have enough funds to handle the withdrawal, this triggers a cascading withdraw() call via the Controller to the Strategy to liquidate enough funds to process the withdrawal. Keeper Automated bot that calls contract functions. It queries the Registry to get the appropriate Vault and Strategy addresses and then calls: earn() on the Vault, which checks for funds available to be deposited into a Strategy and then deposits those. harvest() on the Strategy, which triggers the Strategy claim any rewards, pay management and Strategist fees, and re-invest the remainder into itself again. Strategist Creates and manages Strategies. Interacts with the Controller to set the active strategy, through setStrategy() . Only Strategies approved by Governance can be set. Is paid the Strategist management fee directly from the Strategy.","title":"Vaults Overview"},{"location":"developers/yvaults-documentation/vaults-overview/#vaults-overview","text":"This document gives a generalized and high level overview of how the protocol and its actors, smart contracts, and other services interact with each other. The aim is to build intuition about how Yearn products work. {% hint style=\"info\" %} All vaults are different. This is not a formal specification. Contracts and components are subject to change without notice. All contracts are open source and available from the /yearn-protocol GitHub repo.","title":"Vaults Overview"},{"location":"developers/yvaults-documentation/vaults-overview/#protocol-contracts","text":"","title":"Protocol Contracts"},{"location":"developers/yvaults-documentation/vaults-overview/#vaults","text":"Example: yWETH.sol Vaults act as the representation of the user in the system, and is the internal customer for investments. There is one vault per deposit token, and they are agnostic to the strategies they interact with. Their primary tasks are to: process user deposits and withdrawals , minting or burning LP tokens as receipts for these; manage disposable funds , ensuring there is enough to satisfy the minimum amount available to handle withdrawals, and issuing withdrawal requests from strategies when more funds need to be added; and deposit funds into strategies , when there is a surplus of funds in the vault above what's required to be kept at disposal.","title":"Vaults"},{"location":"developers/yvaults-documentation/vaults-overview/#controller","text":"Controller.sol The Controller act as the gatekeeping interface between vaults and strategies and oversees communication and fund flows. Deposits and withdrawals in and out of strategies flow through the Controller . It keeps track of the addresses for the active vaults, strategies, tokens, and strategy rewards destination, acting as a pseudo-registry that verifies the origin and destination of a transaction. The Controller also handles strategy migration, moving funds from an old strategy to a new one.","title":"Controller"},{"location":"developers/yvaults-documentation/vaults-overview/#registry","text":"YRegistry.sol The registry is a wrapper of the controller that contains additional meta-data about active addresses. Its functionality is currently being expanded.","title":"Registry"},{"location":"developers/yvaults-documentation/vaults-overview/#strategies","text":"Example: CurveYCRVVoter.sol Strategies are investment instruction sets, written by a Strategist . They are agnostic to the vaults that use them. Strategies execute step-by-step functions with the objective to generate yield. They do so by interacting with: other Yearn services , such as vaults, lending, and insurance; and external 3 rd party services , such as Aave, Curve, Chainlink and Maker. Rewards are claimed and re-invested into the strategies, with deductions for Management fees and for compensating the Strategist .","title":"Strategies"},{"location":"developers/yvaults-documentation/vaults-overview/#treasury","text":"The Treasury contract accumulates all the Management fees sent from the strategies. It's an intermediate contract that can convert between different tokens, currently normalizing all rewards into yCRV. It calls two functions: toVoters() , sending part of the fees to the governance voters, as a reward for their participation; and toGovernance() , sending part of the fees to the multi-sig to cover gas costs and other expenses.","title":"Treasury"},{"location":"developers/yvaults-documentation/vaults-overview/#governance","text":"StrategyYFIGovernance.sol Yearn Governance is a combination of the YFI staking contract to participate in Governance voting, and the 6-of-9 multi-sig that executes the decisions by the YFI holders. Governance manages the Vaults , Controller , and Strategies by calling functions on these contracts.","title":"Governance"},{"location":"developers/yvaults-documentation/vaults-overview/#vault-management","text":"Set governing address , through setGovernance() , in order to upgrade governance contracts. Set controller for the vault , through setController() , in order to upgrade controllers. Set amount of disposable funds at hand in vault , through setMin() , in order to manage how large withdrawal amounts require a Vault to issue a withdrawal request to a Strategy, via the Controller.","title":"Vault management"},{"location":"developers/yvaults-documentation/vaults-overview/#controller-management","text":"Set governing address , through setGovernance() , in order to upgrade governance contracts. Add vaults for the Controller to manage, through setVault() , in order to introduce new vaults. Set address to receive management fees , through setRewards() in order to upgrade the Treasury.","title":"Controller management"},{"location":"developers/yvaults-documentation/vaults-overview/#strategy-management","text":"Set Strategist address , through setStrategist() , in order for Strategists to receive their rewards and to interact with the system. Add an approved Strategy , through approveStrategy() on the Controller, in order for Strategists to be able to activate the Strategy in question. Remove an approved Strategy , through revokeStrategy() on the Controller, in order to prevent Strategists from being able to activate the Strategy in question.","title":"Strategy management"},{"location":"developers/yvaults-documentation/vaults-overview/#protocol-actors","text":"","title":"Protocol Actors"},{"location":"developers/yvaults-documentation/vaults-overview/#user","text":"A Yearn end-user. Deposits funds into vaults, to receive LP tokens, through calling deposit() ; Withdraws funds from vaults, by depositing (effectively burning) LP tokens into vaults and receiving the corresponding deposit token amount back in return, through calling withdraw() . If the vault does not have enough funds to handle the withdrawal, this triggers a cascading withdraw() call via the Controller to the Strategy to liquidate enough funds to process the withdrawal.","title":"User"},{"location":"developers/yvaults-documentation/vaults-overview/#keeper","text":"Automated bot that calls contract functions. It queries the Registry to get the appropriate Vault and Strategy addresses and then calls: earn() on the Vault, which checks for funds available to be deposited into a Strategy and then deposits those. harvest() on the Strategy, which triggers the Strategy claim any rewards, pay management and Strategist fees, and re-invest the remainder into itself again.","title":"Keeper"},{"location":"developers/yvaults-documentation/vaults-overview/#strategist","text":"Creates and manages Strategies. Interacts with the Controller to set the active strategy, through setStrategy() . Only Strategies approved by Governance can be set. Is paid the Strategist management fee directly from the Strategy.","title":"Strategist"},{"location":"how-to-guides/","text":"How-To Guides {% page-ref page=\"how-to-add-a-custom-token-to-metamask.md\" %} {% page-ref page=\"how-to-make-a-yip.md\" %} {% page-ref page=\"how-to-mint-yusd.md\" %} {% page-ref page=\"how-to-participate-in-a-yvault.md\" %} {% page-ref page=\"how-to-understand-crv-vote-locking.md\" %} {% page-ref page=\"how-to-understand-yvault-roi.md\" %} {% page-ref page=\"how-to-withdraw-from-yEarn-and-yVaults.md\" %}","title":"How-To Guides"},{"location":"how-to-guides/#how-to-guides","text":"{% page-ref page=\"how-to-add-a-custom-token-to-metamask.md\" %} {% page-ref page=\"how-to-make-a-yip.md\" %} {% page-ref page=\"how-to-mint-yusd.md\" %} {% page-ref page=\"how-to-participate-in-a-yvault.md\" %} {% page-ref page=\"how-to-understand-crv-vote-locking.md\" %} {% page-ref page=\"how-to-understand-yvault-roi.md\" %} {% page-ref page=\"how-to-withdraw-from-yEarn-and-yVaults.md\" %}","title":"How-To Guides"},{"location":"how-to-guides/how-to-add-a-custom-token-to-metamask/","text":"How to Add a Custom Token to MetaMask Here's how you add a custom token to MetaMask. This guide uses yUSD as an example but there is an easier way for yUSD and YFI with just a couple clicks at https://addyearn.finance . Visual Walkthrough 1) Open MetaMask and click Assets to see the tokens in your wallet. 2) Scroll down to the bottom and click Add Token . 3) Click Custom Token . 4) Paste the contract address for yUSD 0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c into the Token Contract Address field. 5) Click Edit to change the Token Symbol. 6) Type in yUSD and click Next . 7) Hooray! Now you can see your balance of yUSD. Click Add Tokens to finish up. 8) You're done. You'll now see yUSD in your assets list so it's easier to track and use.","title":"How to Add a Custom Token to MetaMask"},{"location":"how-to-guides/how-to-add-a-custom-token-to-metamask/#how-to-add-a-custom-token-to-metamask","text":"Here's how you add a custom token to MetaMask. This guide uses yUSD as an example but there is an easier way for yUSD and YFI with just a couple clicks at https://addyearn.finance .","title":"How to Add a Custom Token to MetaMask"},{"location":"how-to-guides/how-to-add-a-custom-token-to-metamask/#visual-walkthrough","text":"1) Open MetaMask and click Assets to see the tokens in your wallet. 2) Scroll down to the bottom and click Add Token . 3) Click Custom Token . 4) Paste the contract address for yUSD 0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c into the Token Contract Address field. 5) Click Edit to change the Token Symbol. 6) Type in yUSD and click Next . 7) Hooray! Now you can see your balance of yUSD. Click Add Tokens to finish up. 8) You're done. You'll now see yUSD in your assets list so it's easier to track and use.","title":"Visual Walkthrough"},{"location":"how-to-guides/how-to-make-a-yip/","text":"How To Make a YIP Abstract The yEarn Improvement Proposals YIP ss <code>YIP</code>ss describe standards for the yEarn platform, including core protocol specifications, client APIs, and contract standards. This is the definitive, canonical reference specification for the core logic. Contributing Review YIP-0 . Fork the repository by clicking \"Fork\" in the top right. Add your YIP to your fork of the repository. There is a template YIP here . Submit a Pull Request to yEarn's YIPs repository . Your first PR should be a first draft of the final YIP. It must meet the formatting criteria enforced by the build largely, correct metadata in the header largely, correct metadata in the header . An editor will manually review the first PR for a new YIP and assign it a number before merging it. Make sure you include a discussions-to header with the URL to a new thread on gov.yearn.finance where people can discuss the YIP as a whole. Note: It is important that their be community support behind a proposed YIP - It is up to the author s s to shepard their proposal through the process. If your YIP requires images, the image files should be included in a subdirectory of the assets folder for that YIP as follow: assets/yip-X for yip **X** for yip **X** . When linking to an image in the YIP, use relative links such as ../assets/yip-X/image.png . When you believe your YIP is mature and ready to progress past the WIP phase, you should ask to have your issue added to the next governance call where it can be discussed for inclusion in a future platform upgrade. If the community agrees to include it, the YIP editors will update the state of your YIP to 'Approved'. YIP Statuses WIP - a YIP that is still being developed. Proposed - a YIP that is ready to be reviewed in a governance call. Approved - a YIP that has been accepted for implementation by the yEarn community. Implemented - a YIP that has been released to mainnet. Rejected - a YIP that has been rejected. Example YIP -Status: Proposed +Status: Approved YIP: integer, Created: 2020-09-01 -Last-Modified: 2020-09-03 +Last-Modified: 2020-09-08 Validation YIPs MUST pass some validation tests. The YIP repository ensures this by running tests using html-proofer and yip_validator . It is possible to run the YIP validator locally: gem install yip_validator yip_validator < INPUT_FILES > Copyright Copyright and related rights waived via CC0 .","title":"How To Make a YIP"},{"location":"how-to-guides/how-to-make-a-yip/#how-to-make-a-yip","text":"","title":"How To Make a YIP"},{"location":"how-to-guides/how-to-make-a-yip/#abstract","text":"The yEarn Improvement Proposals YIP ss <code>YIP</code>ss describe standards for the yEarn platform, including core protocol specifications, client APIs, and contract standards. This is the definitive, canonical reference specification for the core logic.","title":"Abstract"},{"location":"how-to-guides/how-to-make-a-yip/#contributing","text":"Review YIP-0 . Fork the repository by clicking \"Fork\" in the top right. Add your YIP to your fork of the repository. There is a template YIP here . Submit a Pull Request to yEarn's YIPs repository . Your first PR should be a first draft of the final YIP. It must meet the formatting criteria enforced by the build largely, correct metadata in the header largely, correct metadata in the header . An editor will manually review the first PR for a new YIP and assign it a number before merging it. Make sure you include a discussions-to header with the URL to a new thread on gov.yearn.finance where people can discuss the YIP as a whole. Note: It is important that their be community support behind a proposed YIP - It is up to the author s s to shepard their proposal through the process. If your YIP requires images, the image files should be included in a subdirectory of the assets folder for that YIP as follow: assets/yip-X for yip **X** for yip **X** . When linking to an image in the YIP, use relative links such as ../assets/yip-X/image.png . When you believe your YIP is mature and ready to progress past the WIP phase, you should ask to have your issue added to the next governance call where it can be discussed for inclusion in a future platform upgrade. If the community agrees to include it, the YIP editors will update the state of your YIP to 'Approved'.","title":"Contributing"},{"location":"how-to-guides/how-to-make-a-yip/#yip-statuses","text":"WIP - a YIP that is still being developed. Proposed - a YIP that is ready to be reviewed in a governance call. Approved - a YIP that has been accepted for implementation by the yEarn community. Implemented - a YIP that has been released to mainnet. Rejected - a YIP that has been rejected.","title":"YIP Statuses"},{"location":"how-to-guides/how-to-make-a-yip/#example-yip","text":"-Status: Proposed +Status: Approved YIP: integer, Created: 2020-09-01 -Last-Modified: 2020-09-03 +Last-Modified: 2020-09-08","title":"Example YIP"},{"location":"how-to-guides/how-to-make-a-yip/#validation","text":"YIPs MUST pass some validation tests. The YIP repository ensures this by running tests using html-proofer and yip_validator . It is possible to run the YIP validator locally: gem install yip_validator yip_validator < INPUT_FILES >","title":"Validation"},{"location":"how-to-guides/how-to-make-a-yip/#copyright","text":"Copyright and related rights waived via CC0 .","title":"Copyright"},{"location":"how-to-guides/how-to-mint-yusd/","text":"How to Mint yUSD This visual guide will walk you through every step in minting yUSD at https://vaults.finance . You can learn more about yUSD here: https://docs.yearn.finance/yusd Prerequisites You must have DAI, USDC, USDT, TUSD, or yCRV to use for buying yUSD. You must use a supported wallet, either Metamask, Trustwallet, Trezor, or Torus. Visual Walkthrough 1) Go to https://vaults.finance and click Connect 2) Click on the wallet you are using, for this demo we'll use MetaMask 3) If you have multiple addresses in your wallet, select the one you're planning to use to mint yUSD then click Next 4) Click Connect 5) You will now see your address in the upper right corner this is the address mapped to my ens tracheopteryx.eth this is the address mapped to my ens tracheopteryx.eth . You will also see your balance of compatible tokens on the left. 6) Click Depost All to deposit all the tokens shown on the left into the yCRV vault to mint yUSD. 7) Click Confirm to approve your deposit or click Edit to increase the gas fee if Ethereum is busy check [https://ethgasstation.info](https://ethgasstation.info/) for current rates check [https://ethgasstation.info](https://ethgasstation.info/) for current rates . If you are depositing more than one type of token e.g. DAI and USDC e.g. DAI and USDC you will need to do this step to approve each one. 8) You will see this screen as the Ethereum blockchain processes your approval transaction. 9) Once the approval is processed, click Confirm to actually make the depost or edit the gas fee first as before if you want to increase it or edit the gas fee first as before if you want to increase it . 10) You will see this screen as your transaction is processing. If this takes too long, you may not have set a high enough gas fee or you may have a stuck transaction, check our FAQ page for how to resolve slow or stuck transactions. 11) Your deposit was successful! 12) Now you can see your balance of yUSD here and in your wallet! 13) Go to https://addyearn.finance and click Add Token to add yUSD to MetaMask then Add Token again in the MetaMask window. That's it! If you have any further questions or get stuck somewhere, ask for help on the Support channel in our discord: http://discord.yearn.finance","title":"How to Mint yUSD"},{"location":"how-to-guides/how-to-mint-yusd/#how-to-mint-yusd","text":"This visual guide will walk you through every step in minting yUSD at https://vaults.finance . You can learn more about yUSD here: https://docs.yearn.finance/yusd","title":"How to Mint yUSD"},{"location":"how-to-guides/how-to-mint-yusd/#prerequisites","text":"You must have DAI, USDC, USDT, TUSD, or yCRV to use for buying yUSD. You must use a supported wallet, either Metamask, Trustwallet, Trezor, or Torus.","title":"Prerequisites"},{"location":"how-to-guides/how-to-mint-yusd/#visual-walkthrough","text":"1) Go to https://vaults.finance and click Connect 2) Click on the wallet you are using, for this demo we'll use MetaMask 3) If you have multiple addresses in your wallet, select the one you're planning to use to mint yUSD then click Next 4) Click Connect 5) You will now see your address in the upper right corner this is the address mapped to my ens tracheopteryx.eth this is the address mapped to my ens tracheopteryx.eth . You will also see your balance of compatible tokens on the left. 6) Click Depost All to deposit all the tokens shown on the left into the yCRV vault to mint yUSD. 7) Click Confirm to approve your deposit or click Edit to increase the gas fee if Ethereum is busy check [https://ethgasstation.info](https://ethgasstation.info/) for current rates check [https://ethgasstation.info](https://ethgasstation.info/) for current rates . If you are depositing more than one type of token e.g. DAI and USDC e.g. DAI and USDC you will need to do this step to approve each one. 8) You will see this screen as the Ethereum blockchain processes your approval transaction. 9) Once the approval is processed, click Confirm to actually make the depost or edit the gas fee first as before if you want to increase it or edit the gas fee first as before if you want to increase it . 10) You will see this screen as your transaction is processing. If this takes too long, you may not have set a high enough gas fee or you may have a stuck transaction, check our FAQ page for how to resolve slow or stuck transactions. 11) Your deposit was successful! 12) Now you can see your balance of yUSD here and in your wallet! 13) Go to https://addyearn.finance and click Add Token to add yUSD to MetaMask then Add Token again in the MetaMask window.","title":"Visual Walkthrough"},{"location":"how-to-guides/how-to-mint-yusd/#thats-it","text":"If you have any further questions or get stuck somewhere, ask for help on the Support channel in our discord: http://discord.yearn.finance","title":"That's it!"},{"location":"how-to-guides/how-to-participate-in-a-yvault/","text":"How To Participate in a yVault This visual guide will walk you through every step in depositing funds in a yVault . Prerequisites You must have the yVault's underlying token. For DAI yVault, you must have DAI. You must use a supported wallet, either Metamask, Trustwallet, Trezor, or Torus. Walkthrough 1. Go to Vaults page and click on \u201cConnect your wallet\u201d 2. Choose your favorite wallet 3. Enter your password and click \u201cUnlock\u201d 4. Choose which Vault you want to deposit into, for example, the DAI Vault 5. Enter the amount of DAI that you want to deposit 6. Click \u201cDeposit\u201d Click on 25%, 50%, 75% or 100% to deposit the corresponding proportion of your wallet into the Vault. Or click \u201cDeposit All\u201d if you would like to deposit 100% of the chosen digital asset from your wallet into the Vault. :::info Please note before you make a deposit that there is a 0.5% withdrawal fee . The longer you leave the deposit to earn returns in the Vault, the more likely your returns will exceed the withdrawal fee. ::: 7. Approve yearn.finance to spend your DAI token (first time only) and then click \u201cConfirm\u201d again to approve the deposit You need to pay a transaction fee in Ether (ETH) to approve yearn.finance to spend your DAI. Make sure there is enough ETH in your wallet . 8. Receive your yToken (in this case it would be yDAI) The yDAI you receive is your share of the DAI Vault . The amount of yDAI in your wallet will remain constant over time but the value of it will increase as the DAI Vault earns returns. The amount of yDAI you receive will be less than 1 per DAI you deposited because yDAI is worth more than 1 DAI. For example, at block number 10611372 yDAI was equal to 1.044 DAI. Therefore had you deposited 100 DAI, you would have received 95.78 yDAI (100 / 1.044). 9. Track your earnings Yearn Party shows an approximate running total for how much you have earned in the Vault.","title":"How To Participate in a yVault"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#how-to-participate-in-a-yvault","text":"This visual guide will walk you through every step in depositing funds in a yVault .","title":"How To Participate in a yVault"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#prerequisites","text":"You must have the yVault's underlying token. For DAI yVault, you must have DAI. You must use a supported wallet, either Metamask, Trustwallet, Trezor, or Torus.","title":"Prerequisites"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#walkthrough","text":"","title":"Walkthrough"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#1-go-to-vaults-page-and-click-on-connect-your-wallet","text":"","title":"1. Go to Vaults page and click on \u201cConnect your wallet\u201d"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#2-choose-your-favorite-wallet","text":"","title":"2. Choose your favorite wallet"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#3-enter-your-password-and-click-unlock","text":"","title":"3. Enter your password and click \u201cUnlock\u201d"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#4-choose-which-vault-you-want-to-deposit-into-for-example-the-dai-vault","text":"","title":"4. Choose which Vault you want to deposit into, for example, the DAI Vault"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#5-enter-the-amount-of-dai-that-you-want-to-deposit","text":"","title":"5. Enter the amount of DAI that you want to deposit"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#6-click-deposit","text":"Click on 25%, 50%, 75% or 100% to deposit the corresponding proportion of your wallet into the Vault. Or click \u201cDeposit All\u201d if you would like to deposit 100% of the chosen digital asset from your wallet into the Vault. :::info Please note before you make a deposit that there is a 0.5% withdrawal fee . The longer you leave the deposit to earn returns in the Vault, the more likely your returns will exceed the withdrawal fee. :::","title":"6. Click \u201cDeposit\u201d"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#7-approve-yearnfinance-to-spend-your-dai-token-first-time-only-and-then-click-confirm-again-to-approve-the-deposit","text":"You need to pay a transaction fee in Ether (ETH) to approve yearn.finance to spend your DAI. Make sure there is enough ETH in your wallet .","title":"7. Approve yearn.finance to spend your DAI token (first time only) and then click \u201cConfirm\u201d again to approve the deposit"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#8-receive-your-ytoken-in-this-case-it-would-be-ydai","text":"The yDAI you receive is your share of the DAI Vault . The amount of yDAI in your wallet will remain constant over time but the value of it will increase as the DAI Vault earns returns. The amount of yDAI you receive will be less than 1 per DAI you deposited because yDAI is worth more than 1 DAI. For example, at block number 10611372 yDAI was equal to 1.044 DAI. Therefore had you deposited 100 DAI, you would have received 95.78 yDAI (100 / 1.044).","title":"8. Receive your yToken (in this case it would be yDAI)"},{"location":"how-to-guides/how-to-participate-in-a-yvault/#9-track-your-earnings","text":"Yearn Party shows an approximate running total for how much you have earned in the Vault.","title":"9. Track your earnings"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/","text":"How to understand CRV vote locking This is an overview of how CRV vote locking works on Curve Finance, and how Yearn investment strategies takes advantage of this in order to increase yield. CRV vote locking Vote locking, \"Boosties\", or \"Vote boosting\" is a Curve Finance feature where CRV is locked into the Curve DAO. Vote locking CRV rewards yields veCRV (voting escrow CRV tokens). The longer time period that CRV is locked for, the more veCRVs are received. The minimum locking period is 1 week and the maximum period is 4 years. veCRV enables its holders to: participate in Curve governance; earn trading fees ; and boost rewards from liquidity provided. Trading fees 50% of all Curve trading fees from September 19 2020 and onwards will be distributed to veCRV holders, in the form of CRV tokens. Reward boosting Vote locking CRV into veCRV allows boosting of rewards earned by providing liquidity to any Curve pool, up to a maximum of 2.5x the reward amount. The actual boost multiplier is determined by a formula that depends on the current pool gauge liquidity as a fraction out of the total amount of liquidity provided, and the fraction of voting power that the veCRV constitutes out of the total. See the Curve Guide for more details on the formula and its calculation. CRV Vote Locking in Yearn Yearn deploys a single CRV vote locking strategy that is shared across its general Curve strategies: StrategyCurveYBUSDVoterProxy StrategyCurveBTCVoterProxy StrategyCurveYVoterProxy StrategyCurve3CrvVoterProxy Locking CRV for veCRV 10% of all CRV earned by the strategies are locked up for 4 years in the Curve DAO in order to get the maximum reward ratio of 1:1 CRV:veCRV. Actual veCRV distribution has not yet begun, with a date for this still to be announced by Curve Finance. Earning Trading fees Based on Yearn's share of the total veCRV, 50% of trading fees will be claimed as CRV, out of which 10% will in turn be locked into the Curve DAO for more veCRV. Bosting liquidity rewards Actual boost provided by Curve vote locking will be determined by a formula as described above , but will crucially be depending on the total amount of liquidity provided in Curve pools by Yearn and its relative voting power, i.e. its share of the current total of veCRV issued. A \"Yearn boost\" tool displaying Yearn's current active and potential boost is in development and will be released once available. More information curve.fi webpage Curve Guide for staking CRV Curve Guide for vote locking Curve FAQ deFinn Infographic on CRV Voting Boost and formula Boost calculator Yearn CurveDAO proxy strategy diagram","title":"How to understand CRV vote locking"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#how-to-understand-crv-vote-locking","text":"This is an overview of how CRV vote locking works on Curve Finance, and how Yearn investment strategies takes advantage of this in order to increase yield.","title":"How to understand CRV vote locking"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#crv-vote-locking","text":"Vote locking, \"Boosties\", or \"Vote boosting\" is a Curve Finance feature where CRV is locked into the Curve DAO. Vote locking CRV rewards yields veCRV (voting escrow CRV tokens). The longer time period that CRV is locked for, the more veCRVs are received. The minimum locking period is 1 week and the maximum period is 4 years. veCRV enables its holders to: participate in Curve governance; earn trading fees ; and boost rewards from liquidity provided.","title":"CRV vote locking"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#trading-fees","text":"50% of all Curve trading fees from September 19 2020 and onwards will be distributed to veCRV holders, in the form of CRV tokens.","title":"Trading fees"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#reward-boosting","text":"Vote locking CRV into veCRV allows boosting of rewards earned by providing liquidity to any Curve pool, up to a maximum of 2.5x the reward amount. The actual boost multiplier is determined by a formula that depends on the current pool gauge liquidity as a fraction out of the total amount of liquidity provided, and the fraction of voting power that the veCRV constitutes out of the total. See the Curve Guide for more details on the formula and its calculation.","title":"Reward boosting"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#crv-vote-locking-in-yearn","text":"Yearn deploys a single CRV vote locking strategy that is shared across its general Curve strategies: StrategyCurveYBUSDVoterProxy StrategyCurveBTCVoterProxy StrategyCurveYVoterProxy StrategyCurve3CrvVoterProxy","title":"CRV Vote Locking in Yearn"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#locking-crv-for-vecrv","text":"10% of all CRV earned by the strategies are locked up for 4 years in the Curve DAO in order to get the maximum reward ratio of 1:1 CRV:veCRV. Actual veCRV distribution has not yet begun, with a date for this still to be announced by Curve Finance.","title":"Locking CRV for veCRV"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#earning-trading-fees","text":"Based on Yearn's share of the total veCRV, 50% of trading fees will be claimed as CRV, out of which 10% will in turn be locked into the Curve DAO for more veCRV.","title":"Earning Trading fees"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#bosting-liquidity-rewards","text":"Actual boost provided by Curve vote locking will be determined by a formula as described above , but will crucially be depending on the total amount of liquidity provided in Curve pools by Yearn and its relative voting power, i.e. its share of the current total of veCRV issued. A \"Yearn boost\" tool displaying Yearn's current active and potential boost is in development and will be released once available.","title":"Bosting liquidity rewards"},{"location":"how-to-guides/how-to-understand-crv-vote-locking/#more-information","text":"curve.fi webpage Curve Guide for staking CRV Curve Guide for vote locking Curve FAQ deFinn Infographic on CRV Voting Boost and formula Boost calculator Yearn CurveDAO proxy strategy diagram","title":"More information"},{"location":"how-to-guides/how-to-understand-yvault-roi/","text":"How To Understand yVault ROI ROI Are you an advanced user trying to understand how ROI is calculated? Skip directly to \" Why we can't use compound or linear interest formulas to estimate yVaults returns \" If you are a beginner in DeFi or new to Yearn keep on reading. ROI definition: Return on investment ROI ROI is a ratio between net profit over a period over a period and cost of investment resulting from an investment of some resources at a point in time resulting from an investment of some resources at a point in time . A high ROI means the investment's gains compare favorably to its cost. As a performance measure, ROI is used to evaluate the efficiency of an investment or to compare the efficiencies of several different investments.[1] In economic terms, it is one way of relating profits to capital invested. Source: Wikipedia ROI is a key performance indicator KPI KPI available in all Yearn Vaults yVaults yVaults located here: https://yearn.finance/vaults . ROI is useful when comparing and assessing vault performance. ROI presented in Yearn is a yearly ROI . You deposit X and 1 year later you receive X + X \\* ROI X \\* ROI . The ROI presented is a current estimation based on data since the yVault's inception. If performance remains constant, after 1 year you will receive the displayed ROI. Rates are unstable currently, and fluctuate based on market/strategy. yVaults have different yield farming strategies , which determine how assets are moved between liquidity pools. Strategies are created by the Controller who manages the yVault. New strategies are also voted by the community through governance proposals . A new strategy creates a new challenge in terms of ROI calculation. Individuals interested in participating in a yVault should monitor the ROI presented in the vault dashboard after a strategy change. The rate presented reflects the most recent ROI. An individual participating before a strategy change might be interested in comparing ROI before and ROI after. Historic ROI, e.g. since yVault creation, can also help users understand performance and inform future decisions. ROI calculation Even though yVaults have a compounding effect inherently, this compound interest is not fixed like in a CeFi savings account. Hence, the concept of APY and APR do not apply directly to yVaults. They are used by the community but interpreting them should be taken with a grain of salt. Why can't we use compound or linear interest formulas to estimate yVaults returns? This shows the estimation of an asset that has interest / compounded interest applied to it: This is the actual, measured performance of an asset in the yUSD vault: Why does this happen? A bank's interest rate is constant: either linear or compounding. The interest rate is multiplied by the asset value each period. yVaults work differently: After depositing into a yVault, the user receives 'wrapped' tokens. These tokens start with a 'y' prefix and the depositor receives fewer tokens than were deposited why is explained below why is explained below . Starting from its inception, the vault's input and output are governed by the following equation: F = I * P F = I * P Where F F is the amount of the tokens in the vault, I I is the amount of 'wrapped' tokens held by users and P P is the 'price' of those wrapped tokens. At the start, P = 1 P = 1 <span><span class=\"MathJax_Preview\">P = 1</span><script type=\"math/tex\">P = 1 Thus I = F I = F <span><span class=\"MathJax_Preview\">I = F</span><script type=\"math/tex\">I = F , amount of tokens inside the vault is equal to amount of wrapped tokens. Almost all strategies are identical : invest deposited tokens, accumulate additional tokens which can be withdrawn in the future. By keeping track of the number of wrapped tokens, and the amount of tokens inside the vault which increase the longer they are held in the vault which increase the longer they are held in the vault the price can be calculated as follows: (vault tokens) / (wrapped tokens) = P (vault tokens) / (wrapped tokens) = P Since the amount of wrapped tokens is constant but the amount of vault tokens increases, the price will increase. The balance and thus price are therefore constantly increasing. Therefore, the only thing we can do is: Try to use data from two different points in time Assume growth is linear because simply there is no other information we have because simply there is no other information we have Construct a line using both points which we then extrapolate Calculate price at future data to display ROI. However, as shown below this is dependent on where we take those points. ROI extrapolation applied to the yUSD Vault chart Below are examples to show different results possible by applying linear extrapolation to two points of the price chart for the yUSD yVault. First of all, why and how is this done? Vault input/output formula: F = I * P F = I * P Now, we want to calculate the increment of F F which would be our return. Since I I is constant, and only P P changes, if we know P P at a future date, we can calulate our return. In order to get the formula for a line having two points we have to do some math: Formula for a line: y = m*x + c y = m*x + c <span><span class=\"MathJax_Preview\">y = m*x + c</span><script type=\"math/tex\">y = m*x + c where y y is the price, x x is the block height and m m , c c are what we are looking for. First, let's get c c . When x = 0 x = 0 so at inception of the yVault so at inception of the yVault , we know that the price is 1, hence: y = m\\*0+c y = m\\*0+c x = 0 x = 0 y = c y = c y = 1 y = 1 price is 1 when x = 0 price is 1 when x = 0 c = 1 c = 1 Now m here we have to apply derivatives here we have to apply derivatives : Using the product formula and the constants formula: y'\\(x\\) = m y'\\(x\\) = m Approximating the derivative of a linear function can be done by: y'\\(x\\) = \\(y2-y1\\)/\\(x2-x1\\) = m y'\\(x\\) = \\(y2-y1\\)/\\(x2-x1\\) = m y2 y2 being the price at block x2 x2 and y1 y1 the price at block x1 x1 . Finally we have the complete formula and can estimate the price at any date in the future. However, since y\\(x\\) y\\(x\\) is not linear, we get different lines for different points shown below shown below . As a result, our estimation for price in future and the return varies greatly depending on which points we choose. Here we take two points of the performance chart for the yUSD vault numbered colored points numbered colored points and apply the above. Notice that the different lines are relatively good indications for the short term, but when we try to use them to predict long term they're totally inaccurate! Example Jane has 100 yCRV tokens and decides to invest them in the yUSD yVault. At that time the price P P is 1.045, the total number of vault tokens is 10,450 and of wrapped tokens 10,000. 10450 / 10000 = 1.045 10450 / 10000 = 1.045 <span><span class=\"MathJax_Preview\">10450 / 10000 = 1.045</span><script type=\"math/tex\">10450 / 10000 = 1.045 Now her yCRV tokens get adjusted according to the formula above which is why she sees her now wrapped tokens yUSD yUSD reduce in quantity and the tokens in the vault yCRV yCRV are equal to the amount she invested. So, how many wrapped tokens will she receive? I = F/P = 100/1.045 = 95.7 yUSD I = F/P = 100/1.045 = 95.7 yUSD This action, did not change the price because she supplied to the number of wrapped tokens and vault tokens each exactly according to the ratio of the current price. This is quite important since it means that deposits and withdrawals will not have any effect on the price of the wrapped token. Fast forward a few days, the strategy uses Jane's funds to yield farm and uses the profits to purchase more tokens held inside the vault, increasing the balance to 10,500. For simplicity's sake, assume there were no other deposits. The wrapped tokens are still 10,000 and thus: P = 10500/10000 = 1.05 P = 10500/10000 = 1.05 <span><span class=\"MathJax_Preview\">P = 10500/10000 = 1.05</span><script type=\"math/tex\">P = 10500/10000 = 1.05 When Jane now looks at her balance of wrapped tokens, she will see that they have incremented to approx.: F = I * P = 95.7 * 1.05 = 100.5 F = I * P = 95.7 * 1.05 = 100.5 At this point, she could withdraw and receive her initial yCRV deposit and an additional amount of yCRV tokens, giving her a return of 0.5% on her initial investment (ignoring the 0.5% withdrawal fee). Conclusions The short-term ROI data is a suitable estimation for the short-term i.e. if we compare the % from the last two days, it's likely that the following two days are going go be similar i.e. if we compare the % from the last two days, it's likely that the following two days are going go be similar . Short-term ROI data is absolutely not accurate when extrapolated in the long-term. Long-term data say today and [inception of vault](https://docs.yearn.finance/faq#lists-of-smart-contracts) say today and [inception of vault](https://docs.yearn.finance/faq#lists-of-smart-contracts) is a good overall estimation of the vaults performance and should be used when comparing different investment opportunities. In other words, if your goal is to approximate returns in the short-term, you should use datasets that are recent daily/weekly daily/weekly . If you would like to make a crude estimation on how returns may look like in a year or longer, the longest possible historic timeframe should be taken. Other references The community has been actively creating tools and guides on this topic. https://github.com/thegismar/yearn_roi/blob/master/yearn_vaults_ROI_calc.ipynb provides a mathemathical explanation on how ROI is calculated with some caveats. This repository is no longer being maintained This repository is no longer being maintained . Statistics FAQ","title":"How To Understand yVault ROI"},{"location":"how-to-guides/how-to-understand-yvault-roi/#how-to-understand-yvault-roi","text":"","title":"How To Understand yVault ROI"},{"location":"how-to-guides/how-to-understand-yvault-roi/#roi","text":"Are you an advanced user trying to understand how ROI is calculated? Skip directly to \" Why we can't use compound or linear interest formulas to estimate yVaults returns \" If you are a beginner in DeFi or new to Yearn keep on reading.","title":"ROI"},{"location":"how-to-guides/how-to-understand-yvault-roi/#roi-definition","text":"Return on investment ROI ROI is a ratio between net profit over a period over a period and cost of investment resulting from an investment of some resources at a point in time resulting from an investment of some resources at a point in time . A high ROI means the investment's gains compare favorably to its cost. As a performance measure, ROI is used to evaluate the efficiency of an investment or to compare the efficiencies of several different investments.[1] In economic terms, it is one way of relating profits to capital invested. Source: Wikipedia ROI is a key performance indicator KPI KPI available in all Yearn Vaults yVaults yVaults located here: https://yearn.finance/vaults . ROI is useful when comparing and assessing vault performance. ROI presented in Yearn is a yearly ROI . You deposit X and 1 year later you receive X + X \\* ROI X \\* ROI . The ROI presented is a current estimation based on data since the yVault's inception. If performance remains constant, after 1 year you will receive the displayed ROI. Rates are unstable currently, and fluctuate based on market/strategy. yVaults have different yield farming strategies , which determine how assets are moved between liquidity pools. Strategies are created by the Controller who manages the yVault. New strategies are also voted by the community through governance proposals . A new strategy creates a new challenge in terms of ROI calculation. Individuals interested in participating in a yVault should monitor the ROI presented in the vault dashboard after a strategy change. The rate presented reflects the most recent ROI. An individual participating before a strategy change might be interested in comparing ROI before and ROI after. Historic ROI, e.g. since yVault creation, can also help users understand performance and inform future decisions.","title":"ROI definition:"},{"location":"how-to-guides/how-to-understand-yvault-roi/#roi-calculation","text":"Even though yVaults have a compounding effect inherently, this compound interest is not fixed like in a CeFi savings account. Hence, the concept of APY and APR do not apply directly to yVaults. They are used by the community but interpreting them should be taken with a grain of salt.","title":"ROI calculation"},{"location":"how-to-guides/how-to-understand-yvault-roi/#why-cant-we-use-compound-or-linear-interest-formulas-to-estimate-yvaults-returns","text":"This shows the estimation of an asset that has interest / compounded interest applied to it: This is the actual, measured performance of an asset in the yUSD vault:","title":"Why can't we use compound or linear interest formulas to estimate yVaults returns?"},{"location":"how-to-guides/how-to-understand-yvault-roi/#why-does-this-happen","text":"A bank's interest rate is constant: either linear or compounding. The interest rate is multiplied by the asset value each period. yVaults work differently: After depositing into a yVault, the user receives 'wrapped' tokens. These tokens start with a 'y' prefix and the depositor receives fewer tokens than were deposited why is explained below why is explained below . Starting from its inception, the vault's input and output are governed by the following equation: F = I * P F = I * P Where F F is the amount of the tokens in the vault, I I is the amount of 'wrapped' tokens held by users and P P is the 'price' of those wrapped tokens. At the start, P = 1 P = 1 <span><span class=\"MathJax_Preview\">P = 1</span><script type=\"math/tex\">P = 1 Thus I = F I = F <span><span class=\"MathJax_Preview\">I = F</span><script type=\"math/tex\">I = F , amount of tokens inside the vault is equal to amount of wrapped tokens. Almost all strategies are identical : invest deposited tokens, accumulate additional tokens which can be withdrawn in the future. By keeping track of the number of wrapped tokens, and the amount of tokens inside the vault which increase the longer they are held in the vault which increase the longer they are held in the vault the price can be calculated as follows: (vault tokens) / (wrapped tokens) = P (vault tokens) / (wrapped tokens) = P Since the amount of wrapped tokens is constant but the amount of vault tokens increases, the price will increase. The balance and thus price are therefore constantly increasing. Therefore, the only thing we can do is: Try to use data from two different points in time Assume growth is linear because simply there is no other information we have because simply there is no other information we have Construct a line using both points which we then extrapolate Calculate price at future data to display ROI. However, as shown below this is dependent on where we take those points.","title":"Why does this happen?"},{"location":"how-to-guides/how-to-understand-yvault-roi/#roi-extrapolation-applied-to-the-yusd-vault-chart","text":"Below are examples to show different results possible by applying linear extrapolation to two points of the price chart for the yUSD yVault. First of all, why and how is this done? Vault input/output formula: F = I * P F = I * P Now, we want to calculate the increment of F F which would be our return. Since I I is constant, and only P P changes, if we know P P at a future date, we can calulate our return. In order to get the formula for a line having two points we have to do some math: Formula for a line: y = m*x + c y = m*x + c <span><span class=\"MathJax_Preview\">y = m*x + c</span><script type=\"math/tex\">y = m*x + c where y y is the price, x x is the block height and m m , c c are what we are looking for. First, let's get c c . When x = 0 x = 0 so at inception of the yVault so at inception of the yVault , we know that the price is 1, hence: y = m\\*0+c y = m\\*0+c x = 0 x = 0 y = c y = c y = 1 y = 1 price is 1 when x = 0 price is 1 when x = 0 c = 1 c = 1 Now m here we have to apply derivatives here we have to apply derivatives : Using the product formula and the constants formula: y'\\(x\\) = m y'\\(x\\) = m Approximating the derivative of a linear function can be done by: y'\\(x\\) = \\(y2-y1\\)/\\(x2-x1\\) = m y'\\(x\\) = \\(y2-y1\\)/\\(x2-x1\\) = m y2 y2 being the price at block x2 x2 and y1 y1 the price at block x1 x1 . Finally we have the complete formula and can estimate the price at any date in the future. However, since y\\(x\\) y\\(x\\) is not linear, we get different lines for different points shown below shown below . As a result, our estimation for price in future and the return varies greatly depending on which points we choose. Here we take two points of the performance chart for the yUSD vault numbered colored points numbered colored points and apply the above. Notice that the different lines are relatively good indications for the short term, but when we try to use them to predict long term they're totally inaccurate!","title":"ROI extrapolation applied to the yUSD Vault chart"},{"location":"how-to-guides/how-to-understand-yvault-roi/#example","text":"Jane has 100 yCRV tokens and decides to invest them in the yUSD yVault. At that time the price P P is 1.045, the total number of vault tokens is 10,450 and of wrapped tokens 10,000. 10450 / 10000 = 1.045 10450 / 10000 = 1.045 <span><span class=\"MathJax_Preview\">10450 / 10000 = 1.045</span><script type=\"math/tex\">10450 / 10000 = 1.045 Now her yCRV tokens get adjusted according to the formula above which is why she sees her now wrapped tokens yUSD yUSD reduce in quantity and the tokens in the vault yCRV yCRV are equal to the amount she invested. So, how many wrapped tokens will she receive? I = F/P = 100/1.045 = 95.7 yUSD I = F/P = 100/1.045 = 95.7 yUSD This action, did not change the price because she supplied to the number of wrapped tokens and vault tokens each exactly according to the ratio of the current price. This is quite important since it means that deposits and withdrawals will not have any effect on the price of the wrapped token. Fast forward a few days, the strategy uses Jane's funds to yield farm and uses the profits to purchase more tokens held inside the vault, increasing the balance to 10,500. For simplicity's sake, assume there were no other deposits. The wrapped tokens are still 10,000 and thus: P = 10500/10000 = 1.05 P = 10500/10000 = 1.05 <span><span class=\"MathJax_Preview\">P = 10500/10000 = 1.05</span><script type=\"math/tex\">P = 10500/10000 = 1.05 When Jane now looks at her balance of wrapped tokens, she will see that they have incremented to approx.: F = I * P = 95.7 * 1.05 = 100.5 F = I * P = 95.7 * 1.05 = 100.5 At this point, she could withdraw and receive her initial yCRV deposit and an additional amount of yCRV tokens, giving her a return of 0.5% on her initial investment (ignoring the 0.5% withdrawal fee).","title":"Example"},{"location":"how-to-guides/how-to-understand-yvault-roi/#conclusions","text":"The short-term ROI data is a suitable estimation for the short-term i.e. if we compare the % from the last two days, it's likely that the following two days are going go be similar i.e. if we compare the % from the last two days, it's likely that the following two days are going go be similar . Short-term ROI data is absolutely not accurate when extrapolated in the long-term. Long-term data say today and [inception of vault](https://docs.yearn.finance/faq#lists-of-smart-contracts) say today and [inception of vault](https://docs.yearn.finance/faq#lists-of-smart-contracts) is a good overall estimation of the vaults performance and should be used when comparing different investment opportunities. In other words, if your goal is to approximate returns in the short-term, you should use datasets that are recent daily/weekly daily/weekly . If you would like to make a crude estimation on how returns may look like in a year or longer, the longest possible historic timeframe should be taken.","title":"Conclusions"},{"location":"how-to-guides/how-to-understand-yvault-roi/#other-references","text":"The community has been actively creating tools and guides on this topic. https://github.com/thegismar/yearn_roi/blob/master/yearn_vaults_ROI_calc.ipynb provides a mathemathical explanation on how ROI is calculated with some caveats. This repository is no longer being maintained This repository is no longer being maintained . Statistics FAQ","title":"Other references"},{"location":"how-to-guides/how-to-withdraw-from-yEarn-and-yVaults/","text":"How to withdraw from yVaults This is a simple process similar to sending a transaction with your wallet. You will need to define an amount and approve the transaction. Remember to check the gas fees to ensure your transaction will not fail and you are aware of the transaction costs. For the purpose of this guide, we will use the curve.fi/y LP yVault as an example. Visual Walkthrough Go to Vaults page and click on \u201cConnect your wallet\u201d. Once you've connected your wallet, the website will display the balance you have deposited in each vault. Scroll down through the page and click on the yVault you want to withdraw your funds from. Enter the amount you wish to withdraw: You can choose from pre-defined percentages of your available balance, or enter a specific amount Alternatively, you can click on \"Withdraw All\" to trigger your wallet to start the transaction approval process for the full available amount in just one click. Complete the transaction: Click the Withdraw button, approve the transaction in your wallet, and wait for the transaction to complete successfully. Once completed, your wallet should contain your tokens. Refreshing the Yearn vaults page, the yVault should be displaying updated values accordingly. In your wallet you will then have received: The unwrapped token you originally deposited (in this example DAI). The actual token amount received may differ from the amount displayed in the UI, due to the 0.5% withdrawal fee which may be applied. WAIT! What is this 0.5% fee? Andre explains it pretty well here and here . The 0.5% withdrawal fee is only applied to certain vaults, and not to all withdrawals from those vaults. There is a \"buffer\" (idle) fund inside these vaults. This buffer is used to for efficient handling of smaller sized withdrawals: If your withdrawal is smaller than the vault's current buffer, then your tokens will come from the buffer inside the vault, and no fee will be applied. If your withdrawal is larger than the buffer, then the vault's strategy will be required to request funds from the Strategy in order to perform the withdrawal. In this case, the 0.5% withdrawal fee is applied. Also see: How to calculate the current vault's buffer (idle funds). When the withdrawal fee is applied, the complexity of the transaction is larger, which has an impact on gas used. This may result in different gas fees. As a reference, below is a table with the estimated gas cost associated with withdrawing from vaults as per the time of this writing:","title":"How to withdraw from yVaults"},{"location":"how-to-guides/how-to-withdraw-from-yEarn-and-yVaults/#how-to-withdraw-from-yvaults","text":"This is a simple process similar to sending a transaction with your wallet. You will need to define an amount and approve the transaction. Remember to check the gas fees to ensure your transaction will not fail and you are aware of the transaction costs. For the purpose of this guide, we will use the curve.fi/y LP yVault as an example.","title":"How to withdraw from yVaults"},{"location":"how-to-guides/how-to-withdraw-from-yEarn-and-yVaults/#visual-walkthrough","text":"Go to Vaults page and click on \u201cConnect your wallet\u201d. Once you've connected your wallet, the website will display the balance you have deposited in each vault. Scroll down through the page and click on the yVault you want to withdraw your funds from. Enter the amount you wish to withdraw: You can choose from pre-defined percentages of your available balance, or enter a specific amount Alternatively, you can click on \"Withdraw All\" to trigger your wallet to start the transaction approval process for the full available amount in just one click. Complete the transaction: Click the Withdraw button, approve the transaction in your wallet, and wait for the transaction to complete successfully. Once completed, your wallet should contain your tokens. Refreshing the Yearn vaults page, the yVault should be displaying updated values accordingly. In your wallet you will then have received: The unwrapped token you originally deposited (in this example DAI). The actual token amount received may differ from the amount displayed in the UI, due to the 0.5% withdrawal fee which may be applied.","title":"Visual Walkthrough"},{"location":"how-to-guides/how-to-withdraw-from-yEarn-and-yVaults/#wait-what-is-this-05-fee","text":"Andre explains it pretty well here and here . The 0.5% withdrawal fee is only applied to certain vaults, and not to all withdrawals from those vaults. There is a \"buffer\" (idle) fund inside these vaults. This buffer is used to for efficient handling of smaller sized withdrawals: If your withdrawal is smaller than the vault's current buffer, then your tokens will come from the buffer inside the vault, and no fee will be applied. If your withdrawal is larger than the buffer, then the vault's strategy will be required to request funds from the Strategy in order to perform the withdrawal. In this case, the 0.5% withdrawal fee is applied. Also see: How to calculate the current vault's buffer (idle funds). When the withdrawal fee is applied, the complexity of the transaction is larger, which has an impact on gas used. This may result in different gas fees. As a reference, below is a table with the estimated gas cost associated with withdrawing from vaults as per the time of this writing:","title":"WAIT! What is this 0.5% fee?"},{"location":"products/earn/","text":"Earn Earn is a lending aggregator that strives to attain the highest yield for supported coins DAI, USDC, USDT, TUSD, sUSD, or wBTC DAI, USDC, USDT, TUSD, sUSD, or wBTC at all times. It does this by programmatically shifting these coins between several lending protocols [AAVE](https://aave.com), [dYdX](https://dydx.exchange/), and [Compound](https://compound.finance) [AAVE](https://aave.com), [dYdX](https://dydx.exchange/), and [Compound](https://compound.finance) operating on the Ethereum blockchain. For example, a user can deposit DAI into the Earn yDAI pool. Yearn will programmatically deposit DAI into one of three lending protocols AAVE, dYdX, Compound AAVE, dYdX, Compound . Yearn will withdraw from one protocol and deposit to another automatically as interest rates change between protocols. As a result, the user will receive the optimal interest rate on his or her DAI deposit at all times. Earn is a key component of the yPool at Curve.Finance, which represents a basket of four yTokens: yDai, yUSDC, yUSDT, and yTUSD. The underlying four yTokens are constantly optimizing to yield the highest available interest in the market described above described above , while also serving as a liquidity pool for these tokens. Users can interact with this pool to swap between any of the four tokens with little slippage. Therefore, liquidity providers of the yPool receive the optimized interest rates on their stablecoin deposits and trading fees from users swapping tokens from the pool. As of September 2020, the YTD annualized return for yPool liquidity providers is estimated to be 9.11%. Since yDAI+yUSD+yUSDT+yTUSD is a continuously accruing interest-bearing token, its price is above $1 and is constantly increasing. Resources Earn Homepage","title":"Earn"},{"location":"products/earn/#earn","text":"Earn is a lending aggregator that strives to attain the highest yield for supported coins DAI, USDC, USDT, TUSD, sUSD, or wBTC DAI, USDC, USDT, TUSD, sUSD, or wBTC at all times. It does this by programmatically shifting these coins between several lending protocols [AAVE](https://aave.com), [dYdX](https://dydx.exchange/), and [Compound](https://compound.finance) [AAVE](https://aave.com), [dYdX](https://dydx.exchange/), and [Compound](https://compound.finance) operating on the Ethereum blockchain. For example, a user can deposit DAI into the Earn yDAI pool. Yearn will programmatically deposit DAI into one of three lending protocols AAVE, dYdX, Compound AAVE, dYdX, Compound . Yearn will withdraw from one protocol and deposit to another automatically as interest rates change between protocols. As a result, the user will receive the optimal interest rate on his or her DAI deposit at all times. Earn is a key component of the yPool at Curve.Finance, which represents a basket of four yTokens: yDai, yUSDC, yUSDT, and yTUSD. The underlying four yTokens are constantly optimizing to yield the highest available interest in the market described above described above , while also serving as a liquidity pool for these tokens. Users can interact with this pool to swap between any of the four tokens with little slippage. Therefore, liquidity providers of the yPool receive the optimized interest rates on their stablecoin deposits and trading fees from users swapping tokens from the pool. As of September 2020, the YTD annualized return for yPool liquidity providers is estimated to be 9.11%. Since yDAI+yUSD+yUSDT+yTUSD is a continuously accruing interest-bearing token, its price is above $1 and is constantly increasing.","title":"Earn"},{"location":"products/earn/#resources","text":"Earn Homepage","title":"Resources"},{"location":"products/ygift/","text":"yGift Brighten someone's day by sending a virtual gift. yGift is an NFT (Non-Fungible Token) that can be used to reward someone for their work, or to simply share some love. How to send a yGift Anyone can create and send a yGift. It is possible to add an image or mp4 video, a nice message and even a monetary reward: Access yGift website and click on \" create gift \" Add an image or mp4 video that means something to you both, then upload it to IPFS Add a receiver ETH or ENS address . Make sure it is the correct Ethereum wallet address, or the yGift will be lost In case you want to add funds to your yGift, choose the token and amount. Adding funds is optional Choose a name and write a nice message for your yGift Locking period : Optionally set a period of days to lock tokens added to the yGift when you create it. You may send the yGift immediately and although it will be available to the recipient, the tokens will be locked until this period ends Vesting period : Optionally set a period of days for the tokens to vest. If a locking period has been set, tokens will start vesting immediately after unlocking. Tokens will vest linearly until all become available after this period of days expires. How to Tip a yGift After a yGift has been sent, people can add more funds to it by tipping it! Are you feeling generous? Tip contributor's gift and share some love! Access the page of the yGift you want to tip; Click on \"tip\". Set amount and write a nice message You can only tip a yGift on the previous chosen token . If the yGift was minted with yUSD being the token (even if initial amount was set to 0), then the tips have to be in yUSD. Tips are always immediately available and not subject to locking or vesting. Collecting your yGift funds Received a yGift? Congratulations! If the gift contains a non-zero \"Gift Amount\" you can collect your unlocked funds. Just click on \"Collect\" on the top right corner of your gift. Contribute! yGift is a Yearn project built by the community, for the community! Want to be part of it? Check out yGift Github and yGift Discord and share your ideas!","title":"yGift"},{"location":"products/ygift/#ygift","text":"Brighten someone's day by sending a virtual gift. yGift is an NFT (Non-Fungible Token) that can be used to reward someone for their work, or to simply share some love.","title":"yGift"},{"location":"products/ygift/#how-to-send-a-ygift","text":"Anyone can create and send a yGift. It is possible to add an image or mp4 video, a nice message and even a monetary reward: Access yGift website and click on \" create gift \" Add an image or mp4 video that means something to you both, then upload it to IPFS Add a receiver ETH or ENS address . Make sure it is the correct Ethereum wallet address, or the yGift will be lost In case you want to add funds to your yGift, choose the token and amount. Adding funds is optional Choose a name and write a nice message for your yGift Locking period : Optionally set a period of days to lock tokens added to the yGift when you create it. You may send the yGift immediately and although it will be available to the recipient, the tokens will be locked until this period ends Vesting period : Optionally set a period of days for the tokens to vest. If a locking period has been set, tokens will start vesting immediately after unlocking. Tokens will vest linearly until all become available after this period of days expires.","title":"How to send a yGift"},{"location":"products/ygift/#how-to-tip-a-ygift","text":"After a yGift has been sent, people can add more funds to it by tipping it! Are you feeling generous? Tip contributor's gift and share some love! Access the page of the yGift you want to tip; Click on \"tip\". Set amount and write a nice message You can only tip a yGift on the previous chosen token . If the yGift was minted with yUSD being the token (even if initial amount was set to 0), then the tips have to be in yUSD. Tips are always immediately available and not subject to locking or vesting.","title":"How to Tip a yGift"},{"location":"products/ygift/#collecting-your-ygift-funds","text":"Received a yGift? Congratulations! If the gift contains a non-zero \"Gift Amount\" you can collect your unlocked funds. Just click on \"Collect\" on the top right corner of your gift.","title":"Collecting your yGift funds"},{"location":"products/ygift/#contribute","text":"yGift is a Yearn project built by the community, for the community! Want to be part of it? Check out yGift Github and yGift Discord and share your ideas!","title":"Contribute!"},{"location":"products/yinsure/","text":"yInsure yInsure , also referred to as Cover , is a smart contract cover underwritten by Nexus Mutual . It is decentralised and there is no KYC required to obtain cover. It consists of three components: Cover Vaults hold assets that are used to provide payment in the event of a claim; Covered Vaults hold assets that the \"cover holder\" desires to be covered, and; Claim Governance which represents the claim arbitration process The system consists of many market participants, including: Cover providers: Deposits funds into the Cover Vaults Cover holders: Pays premiums in order to obtain cover for their Covered Vaults Claimants: Cover holders who have an approved claim and are entitled to payment While smart contract cover can provide some protection against smart contract risks, it is not insurance. Cover Vaults Contains the assets used in the capital pool, which can provide payment in the event of a claim. The Cover Vaults works as follows: Cover providers deposit USDC to the vault, and in return receive yiUSDC. yiUSDC represents cover provider's original deposit and ultimately the cover capital pool. Cover providers receive initiation fees and weekly premiums paid by the cover holder. If a claim is approved, USDC will be paid out of the cover vault to the cover holder claimant claimant . Covered Vaults Contains the assets that cover holders desire to obtain insurance on. The Covered Vaults work as follows: If a cover holder wishes to obtain cover on USDT, he/she would deposit USDT to the Covered Vault, and in return receive yiUSDT. yiUSDT represents the cover holder's deposit and can be withdrawn at any time. The covered sum is the value of the asset in dollars at deposit. The cover holder is charged a 0.1% initiation fee at deposit and ongoing 0.1% weekly fees. The intention is that yVaults such as yUSD such as yUSD can be Covered Vaults. Claim Governance Represents the claim arbitration process. This process works as follows: Cover holders submit claims by staking the asset they received during deposit yiUSDT yiUSDT . Cover providers vote with the assets they received during deposit i.e., yiUSDC i.e., yiUSDC on whether the claim is valid or not. If a claim is approved, the cover holder receives the USDC and the cover provider receives the yiUSDT from the cover holder. The voting period is three days, requires 33% approvals to pass, and can be vetoed with 25% of the voting power. Any tokenized ERC-20 token can be covered. Base assets LINK, ETH, etc. LINK, ETH, etc. or composite assets such as aLINK or yaLINK can also be covered. If cover providers deny valid claims, cover holders will no longer use the system and ultimately make it unprofitable for cover providers. {% hint style=\"info\" %} A Common Misconception: Not Insurance The smart contract cover underwritten by Nexus Mutual is not a contract of insurance. It is a discretionary cover provided by members of the mutual to each other. Members have full discretion on which claims payments are made. Members are putting trust in the economic incentive model rather than an insurance company. Learn more on Understanding Nexus Mutual . Resources yInsure Homepage Medium article: yinsure.finance a new insurance primitive","title":"yInsure"},{"location":"products/yinsure/#yinsure","text":"yInsure , also referred to as Cover , is a smart contract cover underwritten by Nexus Mutual . It is decentralised and there is no KYC required to obtain cover. It consists of three components: Cover Vaults hold assets that are used to provide payment in the event of a claim; Covered Vaults hold assets that the \"cover holder\" desires to be covered, and; Claim Governance which represents the claim arbitration process The system consists of many market participants, including: Cover providers: Deposits funds into the Cover Vaults Cover holders: Pays premiums in order to obtain cover for their Covered Vaults Claimants: Cover holders who have an approved claim and are entitled to payment While smart contract cover can provide some protection against smart contract risks, it is not insurance.","title":"yInsure"},{"location":"products/yinsure/#cover-vaults","text":"Contains the assets used in the capital pool, which can provide payment in the event of a claim. The Cover Vaults works as follows: Cover providers deposit USDC to the vault, and in return receive yiUSDC. yiUSDC represents cover provider's original deposit and ultimately the cover capital pool. Cover providers receive initiation fees and weekly premiums paid by the cover holder. If a claim is approved, USDC will be paid out of the cover vault to the cover holder claimant claimant .","title":"Cover Vaults"},{"location":"products/yinsure/#covered-vaults","text":"Contains the assets that cover holders desire to obtain insurance on. The Covered Vaults work as follows: If a cover holder wishes to obtain cover on USDT, he/she would deposit USDT to the Covered Vault, and in return receive yiUSDT. yiUSDT represents the cover holder's deposit and can be withdrawn at any time. The covered sum is the value of the asset in dollars at deposit. The cover holder is charged a 0.1% initiation fee at deposit and ongoing 0.1% weekly fees. The intention is that yVaults such as yUSD such as yUSD can be Covered Vaults.","title":"Covered Vaults"},{"location":"products/yinsure/#claim-governance","text":"Represents the claim arbitration process. This process works as follows: Cover holders submit claims by staking the asset they received during deposit yiUSDT yiUSDT . Cover providers vote with the assets they received during deposit i.e., yiUSDC i.e., yiUSDC on whether the claim is valid or not. If a claim is approved, the cover holder receives the USDC and the cover provider receives the yiUSDT from the cover holder. The voting period is three days, requires 33% approvals to pass, and can be vetoed with 25% of the voting power. Any tokenized ERC-20 token can be covered. Base assets LINK, ETH, etc. LINK, ETH, etc. or composite assets such as aLINK or yaLINK can also be covered. If cover providers deny valid claims, cover holders will no longer use the system and ultimately make it unprofitable for cover providers. {% hint style=\"info\" %}","title":"Claim Governance"},{"location":"products/yinsure/#a-common-misconception-not-insurance","text":"The smart contract cover underwritten by Nexus Mutual is not a contract of insurance. It is a discretionary cover provided by members of the mutual to each other. Members have full discretion on which claims payments are made. Members are putting trust in the economic incentive model rather than an insurance company. Learn more on Understanding Nexus Mutual .","title":"A Common Misconception: Not Insurance "},{"location":"products/yinsure/#resources","text":"yInsure Homepage Medium article: yinsure.finance a new insurance primitive","title":"Resources"},{"location":"products/yvaults/","text":"yVaults The goal of the Vaults program is to empower the community to quickly and safely create and utilize the most effective yield farming robots created by the industry's best strategists. yVaults have a 0.5% withdrawal fee and a 5% fee on additional yield whenever the harvest() function is called, see the FAQ for more details. Individual profits are allocated on a pro-rata basis determined by the share each depositor contributes to the pool. Available yVaults You can access the list of currently available vaults at https://yearn.finance/vaults . Tokens are deposited into their respective yVaults and are then reinvested based on the best current opportunities in the market. Profits generated are used to purchase more of the underlying asset of each vault e.g., the YFI vault's profits are used to purchase additional YFI e.g., the YFI vault's profits are used to purchase additional YFI ; therefore, the vaults represent a continuous buy-and-hold strategy. yETH Vault Mechanics The Controller opens a collateralized debt position CDP CDP at MakerDAO using ETH as collateral and mints DAI. The DAI is deposited into the yDAI vault. The collateralization ratio\u2014a metric of financial leverage\u2014is targeted to always be at least 200%. Automated bots periodically pay down the DAI debt if the ratio falls below 200%. The DAI is redeemed from Curve and is not purchased from the open market i.e., yDAI is burned and redeemed for DAI i.e., yDAI is burned and redeemed for DAI . Excess DAI earned from yield farming are used to purchase additional ETH, which is deposited into the yETH vault. Delegated yVaults Volatile assets can also particpate in yield farming strategies as part of the delegated yVault product. Currently, there is only one delegated yVault: aLINK. Profits generated from the delegated yVault are used to purchase more of the underlying asset. Once again representing a continuous buy-and-hold strategy , allowing the depositor to remain 100% exposed to the asset. Depositors can withdraw their initial deposits and accrued profits, if any, at any time after a 0.5% fee taken on deposit. Mechanics The Controller deposits LINK into AAVE and borrows stablecoins. If at any time the health factor drops below the vault's configured value currently set to 2 currently set to 2 , the Controller repays a portion of the debt in order to maintain a health factor above its configured value. The stablecoins borrowed e.g., USDC, DAI, USDT, etc. e.g., USDC, DAI, USDT, etc. depend on the strategy selected by the Controller. After obtaining stablecoins the Controller will deposit them into one of the yVaults identified above. Resources Vaults Homepage Medium Article: yETH vault explained Medium Article: Delegated Vaults Explained","title":"yVaults"},{"location":"products/yvaults/#yvaults","text":"The goal of the Vaults program is to empower the community to quickly and safely create and utilize the most effective yield farming robots created by the industry's best strategists. yVaults have a 0.5% withdrawal fee and a 5% fee on additional yield whenever the harvest() function is called, see the FAQ for more details. Individual profits are allocated on a pro-rata basis determined by the share each depositor contributes to the pool.","title":"yVaults"},{"location":"products/yvaults/#available-yvaults","text":"You can access the list of currently available vaults at https://yearn.finance/vaults . Tokens are deposited into their respective yVaults and are then reinvested based on the best current opportunities in the market. Profits generated are used to purchase more of the underlying asset of each vault e.g., the YFI vault's profits are used to purchase additional YFI e.g., the YFI vault's profits are used to purchase additional YFI ; therefore, the vaults represent a continuous buy-and-hold strategy.","title":"Available yVaults"},{"location":"products/yvaults/#yeth-vault-mechanics","text":"The Controller opens a collateralized debt position CDP CDP at MakerDAO using ETH as collateral and mints DAI. The DAI is deposited into the yDAI vault. The collateralization ratio\u2014a metric of financial leverage\u2014is targeted to always be at least 200%. Automated bots periodically pay down the DAI debt if the ratio falls below 200%. The DAI is redeemed from Curve and is not purchased from the open market i.e., yDAI is burned and redeemed for DAI i.e., yDAI is burned and redeemed for DAI . Excess DAI earned from yield farming are used to purchase additional ETH, which is deposited into the yETH vault.","title":"yETH Vault Mechanics"},{"location":"products/yvaults/#delegated-yvaults","text":"Volatile assets can also particpate in yield farming strategies as part of the delegated yVault product. Currently, there is only one delegated yVault: aLINK. Profits generated from the delegated yVault are used to purchase more of the underlying asset. Once again representing a continuous buy-and-hold strategy , allowing the depositor to remain 100% exposed to the asset. Depositors can withdraw their initial deposits and accrued profits, if any, at any time after a 0.5% fee taken on deposit.","title":"Delegated yVaults"},{"location":"products/yvaults/#mechanics","text":"The Controller deposits LINK into AAVE and borrows stablecoins. If at any time the health factor drops below the vault's configured value currently set to 2 currently set to 2 , the Controller repays a portion of the debt in order to maintain a health factor above its configured value. The stablecoins borrowed e.g., USDC, DAI, USDT, etc. e.g., USDC, DAI, USDT, etc. depend on the strategy selected by the Controller. After obtaining stablecoins the Controller will deposit them into one of the yVaults identified above.","title":"Mechanics"},{"location":"products/yvaults/#resources","text":"Vaults Homepage Medium Article: yETH vault explained Medium Article: Delegated Vaults Explained","title":"Resources"},{"location":"products/zap/","text":"Zap Users can use the Zap section on yearn.finance to swap various assets bi-directionally into pooled interest-bearing tokens. The purpose of Zap is to faciliate a more seamless and frictionless swaps between various coins. The following assets can be zapped into curve.fi pools: DAI, USDC, USDT, TUSD, BUSD. Users can zap out of curve.finance tokens to receive stablecoins in return. Zap also enables bi-directional swaps between ETH and DAI. Resources Zap Homepage","title":"Zap"},{"location":"products/zap/#zap","text":"Users can use the Zap section on yearn.finance to swap various assets bi-directionally into pooled interest-bearing tokens. The purpose of Zap is to faciliate a more seamless and frictionless swaps between various coins. The following assets can be zapped into curve.fi pools: DAI, USDC, USDT, TUSD, BUSD. Users can zap out of curve.finance tokens to receive stablecoins in return. Zap also enables bi-directional swaps between ETH and DAI.","title":"Zap"},{"location":"products/zap/#resources","text":"Zap Homepage","title":"Resources"},{"location":"r-and-d/delegated-funding-dao-vaults/","text":"Delegated Funding DAO Vaults YFI holders can provide capital to DAOs approved to accept funding in the DAO vault ecosystem. DAOs wishing to receive funding are required to setup Gitcoin Grants page and apply for funding via the Yearn governance forum . If there is sufficient interest to approve the DAO for funding an off-chain vote will be conducted [https://vote.yearn.finance](https://yearn.snapshot.page/#/) [https://vote.yearn.finance](https://yearn.snapshot.page/#/) . If voting is successful the DAO will be added to the DAO vault ecosystem. Governance determines weekly, monthly, and yearly credit limits that the DAO can access via the DAO vault . The DAO is free to repay the credit line on their own terms, and in tokens or other collateral options accepted in the yearn ecosystem. Any profits are shared between vault LPs. Resources Medium article: Delegated Funding DAO Vaults","title":"Delegated Funding DAO Vaults"},{"location":"r-and-d/delegated-funding-dao-vaults/#delegated-funding-dao-vaults","text":"YFI holders can provide capital to DAOs approved to accept funding in the DAO vault ecosystem. DAOs wishing to receive funding are required to setup Gitcoin Grants page and apply for funding via the Yearn governance forum . If there is sufficient interest to approve the DAO for funding an off-chain vote will be conducted [https://vote.yearn.finance](https://yearn.snapshot.page/#/) [https://vote.yearn.finance](https://yearn.snapshot.page/#/) . If voting is successful the DAO will be added to the DAO vault ecosystem. Governance determines weekly, monthly, and yearly credit limits that the DAO can access via the DAO vault . The DAO is free to repay the credit line on their own terms, and in tokens or other collateral options accepted in the yearn ecosystem. Any profits are shared between vault LPs.","title":"Delegated Funding DAO Vaults"},{"location":"r-and-d/delegated-funding-dao-vaults/#resources","text":"Medium article: Delegated Funding DAO Vaults","title":"Resources "},{"location":"r-and-d/stablecredit/","text":"StableCredit StableCredit is an upcoming product in research & development that combines three pillars of existing DeFi infrastructure: Minting synthetic debt (DAI, Synthetix). Decentralized lending platform (Compound, AAVE). Automated Market Maker (AMM) functionality (Uniswap, Sushiswap). Mechanics StableCredit will enable users to deposit assets as collateral and obtain a line of credit (denominated in StableCredit USD) based on the dollar value of the assets at deposit. For example, a user can deposit 100 LINK and will obtain 1,100 worth of StableCredit USD (at the time of writing LINK is ~ 1,100 worth of StableCredit USD (at the time of writing LINK is ~ 11). StableCredit USD can then be traded for other assets available in the protocol. Exchange rates between StableCredit USD and assets in the protocol are determined by price feeds from oracles (Chainlink), and current utilization ratios of assets within the platform. For example, if liquidity providers have lent 100 DAI to the pool and 90 DAI is borrowed, the utilization ratio is 90%. Similar to how bonding curves work, there will then be a significant premium for any additional DAI borrowing (the cost to borrow DAI will be > $1). Users will be able to borrow up to 75% of the value of their collateral (i.e., utilization ratio of 75%). The AMM will also support single-sided liquidity exposure for liquidity providers (LPs). Current popular AMM models, such as Uniswap and Sushiswap, require LPs to deposit both assets in a liquidity pool. For example, in a ETH-USDC liquidity pool, the liquidity provider would be required to deposit ETH and USDC in a 50/50 ratio. This increases the barrier to entry for liquidity providers and also the capital requirements. Single-sided liquidity provisioning will enable LPs to deposit only one of the assets in the liquidity pool (i.e., either ETH or USDC). As a result, the barriers of entry to be a LP will be greatly reduced, and should contribute to an overall increase in capital efficiency. Summary Users can: Deposit collateral and obtain a line of credit (StableCredit USD). Borrow other assets with this line of credit (similar to Aave or Compound). Trade the asset borrowed for another asset in the pool (existing AMM functionality). Additional Learning Resources & Background Initial Medium Post introducing StableCredit Animation illustrating the mechanics of StableCredit Bankless video about StableCredit, featuring Andre Cronje CODEUP 38 video about StableCredit, featuring Andre Cronje","title":"StableCredit"},{"location":"r-and-d/stablecredit/#stablecredit","text":"StableCredit is an upcoming product in research & development that combines three pillars of existing DeFi infrastructure: Minting synthetic debt (DAI, Synthetix). Decentralized lending platform (Compound, AAVE). Automated Market Maker (AMM) functionality (Uniswap, Sushiswap).","title":"StableCredit"},{"location":"r-and-d/stablecredit/#mechanics","text":"StableCredit will enable users to deposit assets as collateral and obtain a line of credit (denominated in StableCredit USD) based on the dollar value of the assets at deposit. For example, a user can deposit 100 LINK and will obtain 1,100 worth of StableCredit USD (at the time of writing LINK is ~ 1,100 worth of StableCredit USD (at the time of writing LINK is ~ 11). StableCredit USD can then be traded for other assets available in the protocol. Exchange rates between StableCredit USD and assets in the protocol are determined by price feeds from oracles (Chainlink), and current utilization ratios of assets within the platform. For example, if liquidity providers have lent 100 DAI to the pool and 90 DAI is borrowed, the utilization ratio is 90%. Similar to how bonding curves work, there will then be a significant premium for any additional DAI borrowing (the cost to borrow DAI will be > $1). Users will be able to borrow up to 75% of the value of their collateral (i.e., utilization ratio of 75%). The AMM will also support single-sided liquidity exposure for liquidity providers (LPs). Current popular AMM models, such as Uniswap and Sushiswap, require LPs to deposit both assets in a liquidity pool. For example, in a ETH-USDC liquidity pool, the liquidity provider would be required to deposit ETH and USDC in a 50/50 ratio. This increases the barrier to entry for liquidity providers and also the capital requirements. Single-sided liquidity provisioning will enable LPs to deposit only one of the assets in the liquidity pool (i.e., either ETH or USDC). As a result, the barriers of entry to be a LP will be greatly reduced, and should contribute to an overall increase in capital efficiency.","title":"Mechanics"},{"location":"r-and-d/stablecredit/#summary","text":"Users can: Deposit collateral and obtain a line of credit (StableCredit USD). Borrow other assets with this line of credit (similar to Aave or Compound). Trade the asset borrowed for another asset in the pool (existing AMM functionality).","title":"Summary"},{"location":"r-and-d/stablecredit/#additional-learning-resources--background","text":"Initial Medium Post introducing StableCredit Animation illustrating the mechanics of StableCredit Bankless video about StableCredit, featuring Andre Cronje CODEUP 38 video about StableCredit, featuring Andre Cronje","title":"Additional Learning Resources &amp; Background"},{"location":"r-and-d/yborrow/","text":"yBorrow {% embed url=\"https://yborrow.finance\" caption=\"\" %} It is an internal tool enabling credit delegation for smart contract to smart contract lending.","title":"yBorrow"},{"location":"r-and-d/yborrow/#yborrow","text":"{% embed url=\"https://yborrow.finance\" caption=\"\" %} It is an internal tool enabling credit delegation for smart contract to smart contract lending.","title":"yBorrow"},{"location":"r-and-d/yliquidate/","text":"yLiquidate {% embed url=\"https://yliquidate.finance\" caption=\"\" %}","title":"yLiquidate"},{"location":"r-and-d/yliquidate/#yliquidate","text":"{% embed url=\"https://yliquidate.finance\" caption=\"\" %}","title":"yLiquidate"},{"location":"r-and-d/yswap/","text":"ySwap Overview ySwap is currently in the testing phase and not available for general use. It's an automated market maker AMM AMM enabling single-sided liquidity and impermanent loss IL IL mitigation. ySwap creates decentralized trading pools similar to Uniswap similar to Uniswap , which traders can buy or sell from. Additionally, users can provide liquidity using only one token, whereas on Uniswap they would need both tokens in the pool at a 50/50 ratio. This removes barriers of entry for potential liquidity providers who may not have both tokens in a pool. The following tokens are available to be traded: wrapped BTC: renBTC, wBTC, sBTC AAVE tokens: aBTC, aLEND, aMKR, aMANA, aKNC, aLINK, aUSDC, aREP, aZRX, aBAT, aDAI, aTUSD, aUSDT, aBUSD, aSUSD, aSNX Standard ERC-20s: LEND, MKR, MANA, KNC, LINK, USDC, REP, ZRX, BAT, DAI, TUSD, USDT, BUSD, SUSD, SNX, Synthetix tokens: sAUD, sEUR, sCHF, sGBP, sJPY, sXAG, sXAU Mechanics aUSD is immediately minted when a user deposits into one of the ySwap AMM pools. aUSD is a synthetic stablecoin that is pegged to the price of $1. The amount of aUSD minted depends on the market value of the asset deposited. Market prices are provided by Chainlink 's decentralized oracles, therefore only coins with Chainlink price feeds are eligible to be traded. A list of the current price feeds supported by Chainlink oracles can be found here . Immediately after deposit, the deposited token and aUSD are added to the ySwap pool, and the depositor receives a LP token in return, representing his or her share of the pool. Traders make trades using the ySwap interface . If a trader desires to sell aLINK for aLEND the following steps will occur: The interface will deposit the trader's aLINK into the ySwap LINK pool; The dollar amount of the aLINK, at the time of trade, is made using the aUSD to the aLEND pool; ySwap sends the amount of aLEND purchased to the trader. The AMM is a constant product market maker CPMM CPMM and uses a bonding curve, similar in design to Uniswap. If the dollar value of the asset increases, depositors will receive the full amount of the deposit back. If the dollar value of the asset decreases, depositors will receive the full amount of the deposit back plus an additional amount in aUSD. This additional aUSD amount is meant to compensate liquidity providers for exposure to impermanent loss, which occurs during volatile price changes of assets.","title":"ySwap"},{"location":"r-and-d/yswap/#yswap","text":"","title":"ySwap"},{"location":"r-and-d/yswap/#overview","text":"ySwap is currently in the testing phase and not available for general use. It's an automated market maker AMM AMM enabling single-sided liquidity and impermanent loss IL IL mitigation. ySwap creates decentralized trading pools similar to Uniswap similar to Uniswap , which traders can buy or sell from. Additionally, users can provide liquidity using only one token, whereas on Uniswap they would need both tokens in the pool at a 50/50 ratio. This removes barriers of entry for potential liquidity providers who may not have both tokens in a pool. The following tokens are available to be traded: wrapped BTC: renBTC, wBTC, sBTC AAVE tokens: aBTC, aLEND, aMKR, aMANA, aKNC, aLINK, aUSDC, aREP, aZRX, aBAT, aDAI, aTUSD, aUSDT, aBUSD, aSUSD, aSNX Standard ERC-20s: LEND, MKR, MANA, KNC, LINK, USDC, REP, ZRX, BAT, DAI, TUSD, USDT, BUSD, SUSD, SNX, Synthetix tokens: sAUD, sEUR, sCHF, sGBP, sJPY, sXAG, sXAU","title":"Overview"},{"location":"r-and-d/yswap/#mechanics","text":"aUSD is immediately minted when a user deposits into one of the ySwap AMM pools. aUSD is a synthetic stablecoin that is pegged to the price of $1. The amount of aUSD minted depends on the market value of the asset deposited. Market prices are provided by Chainlink 's decentralized oracles, therefore only coins with Chainlink price feeds are eligible to be traded. A list of the current price feeds supported by Chainlink oracles can be found here . Immediately after deposit, the deposited token and aUSD are added to the ySwap pool, and the depositor receives a LP token in return, representing his or her share of the pool. Traders make trades using the ySwap interface . If a trader desires to sell aLINK for aLEND the following steps will occur: The interface will deposit the trader's aLINK into the ySwap LINK pool; The dollar amount of the aLINK, at the time of trade, is made using the aUSD to the aLEND pool; ySwap sends the amount of aLEND purchased to the trader. The AMM is a constant product market maker CPMM CPMM and uses a bonding curve, similar in design to Uniswap. If the dollar value of the asset increases, depositors will receive the full amount of the deposit back. If the dollar value of the asset decreases, depositors will receive the full amount of the deposit back plus an additional amount in aUSD. This additional aUSD amount is meant to compensate liquidity providers for exposure to impermanent loss, which occurs during volatile price changes of assets.","title":"Mechanics"},{"location":"r-and-d/ytrade/","text":"yTrade yTrade yTrade is a leveraged stablecoin exchange. It enables users to borrow stablecoins with up to 1000x leverage. Four stablecoins DAI, USDC, USDT, BUSD DAI, USDC, USDT, BUSD are currently enabled as collateral. Users deposit one of the four stablecoins identified above and receive another stablecoin on margin. Leverage tiers are: 75x, 100x, and 1000x. This is a unique product in the market and it enables users to conduct arbitrage trades whenever certain stablecoins are not pegged exactly to $1. For example: DAI is intended to be pegged at $1, however, occasionally in the past it has traded at $1.05. A user can deposit a stablecoin as collateral and borrow up to 1000x of his or her collateral, receive DAI, sell it for $1.05 each, use the proceeds to buy back the amount of DAI they borrowed and profit the difference. This has significant implication in the broader DeFi space as stablecoins are frequently off their pegs, but some traders don\u2019t possess sufficient capital to conduct profitable arbitrage trades.","title":"yTrade"},{"location":"r-and-d/ytrade/#ytrade","text":"","title":"yTrade"},{"location":"r-and-d/ytrade/#ytrade_1","text":"yTrade is a leveraged stablecoin exchange. It enables users to borrow stablecoins with up to 1000x leverage. Four stablecoins DAI, USDC, USDT, BUSD DAI, USDC, USDT, BUSD are currently enabled as collateral. Users deposit one of the four stablecoins identified above and receive another stablecoin on margin. Leverage tiers are: 75x, 100x, and 1000x. This is a unique product in the market and it enables users to conduct arbitrage trades whenever certain stablecoins are not pegged exactly to $1. For example: DAI is intended to be pegged at $1, however, occasionally in the past it has traded at $1.05. A user can deposit a stablecoin as collateral and borrow up to 1000x of his or her collateral, receive DAI, sell it for $1.05 each, use the proceeds to buy back the amount of DAI they borrowed and profit the difference. This has significant implication in the broader DeFi space as stablecoins are frequently off their pegs, but some traders don\u2019t possess sufficient capital to conduct profitable arbitrage trades.","title":"yTrade "}]}